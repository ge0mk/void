import std/core;
import std/string;
import std/format;

@[packed]
struct Span {
	var start: uint;
	var end: uint;
	var line: u32;
	var column: u16;
	var file: u16;

	func constructor(this: &&Span) -> void = default;

	func constructor(this: &&Span, start: uint, end: uint, line: u32, column: u16, file: u16) -> void {
		this.start := start;
		this.end := end;
		this.line := line;
		this.column := column;
		this.file := file;
	}

	func constructor(this: &&Span, other: Span) -> void = default;
	func destructor(this: &&Span) -> void = default;

	operator =(this: &&Span, other: Span) -> void = default;
	operator ==(this: Span, other: Span) -> bool = default;

	operator ..(this: Span, other: Span) -> Span {
		assert(this.file == other.file);

		return Span(
			this.start,
			other.end,
			this.line,
			this.column,
			this.file
		);
	}

	func length(this: Span) -> uint {
		return this.end - this.start;
	}

	func dump(this: Span) -> String {
		return "\e[90m" + format(this.file as int) + "[" + format(this.start as int) + ".." + format(this.end as int) + "]\e[0m"
			+ " \e[33m@ " + format(this.line as int + 1) + ":" + format(this.column as int + 1) + "\e[0m";
	}

	func dump(this: Span, file_name: String) -> String {
		return "\e[90m" + file_name + "[" + format(this.start as int) + ".." + format(this.end as int) + "]\e[0m"
			+ " \e[33m@ " + format(this.line as int + 1) + ":" + format(this.column as int + 1) + "\e[0m";
	}
}
