import std/core;
import std/list;
import std/range;
import std/string;
import std/io;

import llvm_c;

func createInterpreterForModule(module: LLVMModuleRef) -> Result!<LLVMExecutionEngineRef, String> {
	var result: LLVMExecutionEngineRef;
	var out_error: vptr!<byte>;

	if LLVMCreateInterpreterForModule(vptr!<LLVMExecutionEngineRef>::addressOf(&&result), module, vptr!<vptr!<byte>>::addressOf(&&out_error)) != 0 {
		const error = String::fromCString(out_error as cptr!<byte>);
		LLVMDisposeMessage(out_error);
		throw error;
	}

	return Ok(result);
}

func createJITCompilerForModule(module: LLVMModuleRef, optimization_level: uint) -> Result!<LLVMExecutionEngineRef, String> {
	var result: LLVMExecutionEngineRef;
	var out_error: vptr!<byte>;

	if LLVMCreateJITCompilerForModule(vptr!<LLVMExecutionEngineRef>::addressOf(&&result), module, optimization_level as u32, vptr!<vptr!<byte>>::addressOf(&&out_error)) != 0 {
		const error = String::fromCString(out_error as cptr!<byte>);
		LLVMDisposeMessage(out_error);
		throw error;
	}

	return Ok(result);
}

func loadModuleFromFile(ctx: LLVMContextRef, path: String) -> Optional!<LLVMModuleRef> {
	var buffer: LLVMMemoryBufferRef;
	var message: vptr!<byte>;

	const buffer_status = LLVMCreateMemoryBufferWithContentsOfFile(
		(path + '\0'b).data(),
		vptr!<LLVMMemoryBufferRef>::addressOf(&&buffer),
		vptr!<vptr!<byte>>::addressOf(&&message)
	);

	if buffer_status != 0 {
		eprint("couldn't load module " + path + ": ");
		eprintln(String::fromCString(message as cptr!<byte>));
		return None;
	}
	LLVMDisposeMessage(message);

	var module: LLVMModuleRef;
	const module_status = LLVMParseIRInContext(
		ctx, buffer,
		vptr!<vptr!<LLVMOpaqueModule>>::addressOf(&&module),
		vptr!<vptr!<byte>>::addressOf(&&message)
	);

	if module_status != 0 {
		eprint("couldn't parse module " + path + ": ");
		eprintln(String::fromCString(message as cptr!<byte>));
		return None;
	}
	LLVMDisposeMessage(message);

	return Some(module);
}

func printModuleToFile(module: LLVMModuleRef, path: String) -> bool {
	var error_message = vptr::null() as vptr!<byte>;
	if LLVMPrintModuleToFile(module, (path + '\0'b).data(), vptr!<vptr!<byte>>::addressOf(&&error_message)) != 0 {
		eprintln(String::fromCString(error_message as cptr!<byte>));
		LLVMDisposeMessage(error_message);
		return false;
	}

	return true;
}

func printModuleToString(module: LLVMModuleRef) -> String {
	const data = LLVMPrintModuleToString(module);
	const result = String::fromCString(data as cptr!<byte>);
	LLVMDisposeMessage(data);
	return result;
}

func verifyModule(module: LLVMModuleRef, failure_action: LLVMVerifierFailureAction) -> Result!<void, String> {
	var result = Result!<void, String>::Ok;

	var message = vptr::null() as vptr!<byte>;
	if LLVMVerifyModule(module, failure_action, vptr!<vptr!<byte>>::addressOf(&&message)) != 0 {
		result = Result!<void, String>::Error(String::fromCString(message as cptr!<byte>));
	}
	LLVMDisposeMessage(message);

	return result;
}

func LLVMLookupIntrinsicID(name: String) -> u32 {
	return LLVMLookupIntrinsicID(name.data(), name.size());
}

func LLVMModuleCreateWithNameInContext(name: String, ctx: LLVMContextRef) -> LLVMModuleRef {
	return LLVMModuleCreateWithNameInContext((name + '\0'b).data(), ctx);
}

func LLVMPointerTypeInContext(ctx: LLVMContextRef, address_space: uint) -> LLVMTypeRef {
	return LLVMPointerTypeInContext(ctx, address_space as u32);
}

func LLVMIntTypeInContext(ctx: LLVMContextRef, bits: uint) -> LLVMTypeRef {
	return LLVMIntTypeInContext(ctx, bits as u32);
}

func LLVMArrayType(element_type: LLVMTypeRef, size: uint) -> LLVMTypeRef {
	return LLVMArrayType(element_type, size as u32);
}

func LLVMFunctionType(return_type: LLVMTypeRef, parameter_types: &List!<LLVMTypeRef>, is_variadic: bool) -> LLVMTypeRef {
	return LLVMFunctionType(return_type, parameter_types.data, parameter_types.size() as u32, is_variadic as i32);
}

func LLVMStructTypeInContext(ctx: LLVMContextRef, element_types: &List!<LLVMTypeRef>, is_packed: bool) -> LLVMTypeRef {
	return LLVMStructTypeInContext(ctx, element_types.data, element_types.size() as u32, is_packed as i32);
}

func LLVMStructCreateNamed(ctx: LLVMContextRef, name: String) -> LLVMTypeRef {
	return LLVMStructCreateNamed(ctx, (name + '\0'b).data());
}

func LLVMAppendBasicBlockInContext(ctx: LLVMContextRef, function: LLVMValueRef, name: String) -> LLVMBasicBlockRef {
	return LLVMAppendBasicBlockInContext(ctx, function, (name + '\0'b).data());
}

func LLVMConstStringInContext(ctx: LLVMContextRef, value: String, dont_null_terminate: bool) -> LLVMValueRef {
	return LLVMConstStringInContext(ctx, value.data(), value.size() as u32, dont_null_terminate as i32);
}

func LLVMIntrinsicGetType(ctx: LLVMContextRef, id: u32, parameter_types: &List!<LLVMTypeRef>) -> LLVMTypeRef {
	return LLVMIntrinsicGetType(ctx, id, parameter_types.data, parameter_types.size());
}

func LLVMDIBuilderCreateDebugLocation(ctx: LLVMContextRef, line: uint, column: uint, scope: LLVMMetadataRef) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateDebugLocation(ctx, line as u32, column as u32, scope, vptr::null() as vptr!<LLVMOpaqueMetadata>);
}

func LLVMDIBuilderCreateDebugLocation(ctx: LLVMContextRef, line: uint, column: uint, scope: LLVMMetadataRef, inlined_at: LLVMMetadataRef) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateDebugLocation(ctx, line as u32, column as u32, scope, inlined_at);
}

func LLVMTemporaryMDNode(ctx: LLVMContextRef) -> LLVMMetadataRef {
	return LLVMTemporaryMDNode(ctx, vptr!<LLVMMetadataRef>::null(), 0u);
}

func LLVMSetModuleIdentifier(module: LLVMModuleRef, identifier: String) -> void {
	LLVMSetModuleIdentifier(module, identifier.data(), identifier.size());
}

func LLVMSetSourceFileName(module: LLVMModuleRef, file_name: String) -> void {
	LLVMSetSourceFileName(module, file_name.data(), file_name.size());
}

func LLVMSetTarget(module: LLVMModuleRef, target_triple: String) -> void {
	LLVMSetTarget(module, (target_triple + '\0'b).data());
}

func LLVMSetDataLayout(module: LLVMModuleRef, data_layout: String) -> void {
	LLVMSetDataLayout(module, (data_layout + '\0'b).data());
}

func LLVMWriteBitcodeToFile(module: LLVMModuleRef, path: String) -> int {
	return LLVMWriteBitcodeToFile(module, (path + '\0'b).data()) as int;
}

func LLVMAddFunction(module: LLVMModuleRef, name: String, type: LLVMTypeRef) -> LLVMValueRef {
	return LLVMAddFunction(module, (name + '\0'b).data(), type);
}

func LLVMGetNamedFunction(module: LLVMModuleRef, name: String) -> LLVMValueRef {
	return LLVMGetNamedFunction(module, (name + '\0'b).data());
}

func LLVMAddGlobal(module: LLVMModuleRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMAddGlobal(module, type, (name + '\0'b).data());
}

func LLVMAddModuleFlag(module: LLVMModuleRef, behavior: LLVMModuleFlagBehavior, key: String, value: LLVMMetadataRef) -> void {
	LLVMAddModuleFlag(module, behavior, key.data(), key.size(), value);
}

func LLVMGetIntrinsicDeclaration(module: LLVMModuleRef, id: u32, parameter_types: &List!<LLVMTypeRef>) -> LLVMValueRef {
	return LLVMGetIntrinsicDeclaration(module, id, parameter_types.data, parameter_types.size());
}

func LLVMStructSetBody(type: LLVMTypeRef, element_types: &List!<LLVMTypeRef>, is_packed: bool) -> void {
	LLVMStructSetBody(type, element_types.data, element_types.size() as u32, is_packed as i32);
}

func LLVMStructGetTypeAtIndex(type: LLVMTypeRef, index: uint) -> LLVMTypeRef {
	return LLVMStructGetTypeAtIndex(type, index as u32);
}

func LLVMGetParam(value: LLVMValueRef, index: uint) -> LLVMValueRef {
	return LLVMGetParam(value, index as u32);
}

func LLVMSetUnnamedAddr(value: LLVMValueRef, unnamed_address: bool) -> void {
	LLVMSetUnnamedAddr(value, unnamed_address as i32);
}

func LLVMSetAlignment(value: LLVMValueRef, alignment: uint) -> void {
	LLVMSetAlignment(value, alignment as u32);
}

func LLVMSetGlobalConstant(value: LLVMValueRef, state: bool) -> void {
	LLVMSetGlobalConstant(value, state as i32);
}

func LLVMAddIncoming(phi_node: LLVMValueRef, values: &List!<LLVMValueRef>, blocks: &List!<LLVMBasicBlockRef>) -> void {
	assert(values.size() == blocks.size());
	LLVMAddIncoming(phi_node, values.data, blocks.data, values.size() as u32);
}

func LLVMOffsetOfElement(target_data: LLVMTargetDataRef, type: LLVMTypeRef, index: uint) -> uint {
	return LLVMOffsetOfElement(target_data, type, index as u32) as uint;
}

func LLVMHasBasicBlockTerminator(bb: LLVMBasicBlockRef) -> bool {
	return LLVMGetBasicBlockTerminator(bb) != vptr::null();
}

func LLVMBuildSwitch(builder: LLVMBuilderRef, value: LLVMValueRef, else_block: LLVMBasicBlockRef, num_cases: uint) -> LLVMValueRef {
	return LLVMBuildSwitch(builder, value, else_block, num_cases as u32);
}

func LLVMBuildAdd(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildAdd(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNSWAdd(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNSWAdd(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNUWAdd(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNUWAdd(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildFAdd(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFAdd(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildSub(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildSub(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNSWSub(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNSWSub(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNUWSub(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNUWSub(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildFSub(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFSub(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildMul(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildMul(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNSWMul(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNSWMul(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNUWMul(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNUWMul(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildFMul(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFMul(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildUDiv(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildUDiv(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildExactUDiv(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildExactUDiv(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildSDiv(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildSDiv(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildExactSDiv(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildExactSDiv(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildFDiv(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFDiv(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildURem(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildURem(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildSRem(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildSRem(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildFRem(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFRem(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildShl(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildShl(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildLShr(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildLShr(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildAShr(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildAShr(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildAnd(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildAnd(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildOr(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildOr(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildXor(builder: LLVMBuilderRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildXor(builder, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildNeg(builder: LLVMBuilderRef, lhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNeg(builder, lhs, (name + '\0'b).data());
}

func LLVMBuildNSWNeg(builder: LLVMBuilderRef, lhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNSWNeg(builder, lhs, (name + '\0'b).data());
}

func LLVMBuildNUWNeg(builder: LLVMBuilderRef, lhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNUWNeg(builder, lhs, (name + '\0'b).data());
}

func LLVMBuildFNeg(builder: LLVMBuilderRef, lhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFNeg(builder, lhs, (name + '\0'b).data());
}

func LLVMBuildNot(builder: LLVMBuilderRef, lhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildNot(builder, lhs, (name + '\0'b).data());
}

func LLVMBuildAlloca(builder: LLVMBuilderRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildAlloca(builder, type, (name + '\0'b).data());
}

func LLVMBuildLoad2(builder: LLVMBuilderRef, type: LLVMTypeRef, pointer: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildLoad2(builder, type, pointer, (name + '\0'b).data());
}

func LLVMBuildGEP2(builder: LLVMBuilderRef, type: LLVMTypeRef, pointer: LLVMValueRef, indices: &List!<LLVMValueRef>, name: String) -> LLVMValueRef {
	return LLVMBuildGEP2(builder, type, pointer, indices.data, indices.size() as u32, (name + '\0'b).data());
}

func LLVMBuildStructGEP2(builder: LLVMBuilderRef, type: LLVMTypeRef, pointer: LLVMValueRef, index: uint, name: String) -> LLVMValueRef {
	return LLVMBuildStructGEP2(builder, type, pointer, index as u32, (name + '\0'b).data());
}

func LLVMBuildTrunc(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildTrunc(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildZExt(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildZExt(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildSExt(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildSExt(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildFPToUI(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildFPToUI(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildFPToSI(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildFPToSI(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildUIToFP(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildUIToFP(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildSIToFP(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildSIToFP(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildFPTrunc(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildFPTrunc(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildFPExt(builder: LLVMBuilderRef, value: LLVMValueRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildFPExt(builder, value, type, (name + '\0'b).data());
}

func LLVMBuildICmp(builder: LLVMBuilderRef, op: LLVMIntPredicate, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildICmp(builder, op, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildFCmp(builder: LLVMBuilderRef, op: LLVMRealPredicate, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildFCmp(builder, op, lhs, rhs, (name + '\0'b).data());
}

func LLVMBuildPhi(builder: LLVMBuilderRef, type: LLVMTypeRef, name: String) -> LLVMValueRef {
	return LLVMBuildPhi(builder, type, (name + '\0'b).data());
}

func LLVMBuildCall2(builder: LLVMBuilderRef, type: LLVMTypeRef, function: LLVMValueRef, args: &List!<LLVMValueRef>, name: String) -> LLVMValueRef {
	return LLVMBuildCall2(builder, type, function, args.data, args.size() as u32, (name + '\0'b).data());
}

func LLVMBuildExtractValue(builder: LLVMBuilderRef, object: LLVMValueRef, index: uint, name: String) -> LLVMValueRef {
	return LLVMBuildExtractValue(builder, object, index as u32, (name + '\0'b).data());
}

func LLVMBuildInsertValue(builder: LLVMBuilderRef, object: LLVMValueRef, element: LLVMValueRef, index: uint, name: String) -> LLVMValueRef {
	return LLVMBuildInsertValue(builder, object, element, index as u32, (name + '\0'b).data());
}

func LLVMBuildPtrDiff2(builder: LLVMBuilderRef, type: LLVMTypeRef, lhs: LLVMValueRef, rhs: LLVMValueRef, name: String) -> LLVMValueRef {
	return LLVMBuildPtrDiff2(builder, type, lhs, rhs, (name + '\0'b).data());
}

func LLVMConstInt(type: LLVMTypeRef, value: int, sign_extend: bool) -> LLVMValueRef {
	return LLVMConstInt(type, value as u32, sign_extend as i32);
}

func LLVMConstGEP2(type: LLVMTypeRef, pointer: LLVMValueRef, indices: &List!<LLVMValueRef>) -> LLVMValueRef {
	return LLVMConstGEP2(type, pointer, indices.data, indices.size() as u32);
}

func LLVMDIBuilderCreateFile(di_builder: LLVMDIBuilderRef, file_name: String, directory: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateFile(di_builder, file_name.data(), file_name.size(), directory.data(), directory.size());
}

func LLVMDIBuilderCreateCompileUnit(di_builder: LLVMDIBuilderRef, lang: LLVMDWARFSourceLanguage, file: LLVMMetadataRef, producer: String, is_optimized: bool, flags: String, runtime_version: uint, split_name: String, kind: LLVMDWARFEmissionKind, dwo_id: uint, split_debug_inlining: bool, debug_info_for_profiling: bool, sys_root: String, sdk: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateCompileUnit(di_builder, lang, file, producer.data(), producer.size(), is_optimized as i32, flags.data(), flags.size(), runtime_version as u32, split_name.data(), split_name.size(), kind, dwo_id as u32, split_debug_inlining as i32, debug_info_for_profiling as i32, sys_root.data(), sys_root.size(), sdk.data(), sdk.size());
}

func LLVMDIBuilderCreateModule(di_builder: LLVMDIBuilderRef, cu: LLVMMetadataRef, name: String, config_macros: String, include_path: String, api_notes_file: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateModule(di_builder, cu, name.data(), name.size(), config_macros.data(), config_macros.size(), include_path.data(), include_path.size(), api_notes_file.data(), api_notes_file.size());
}

func LLVMDIBuilderCreateNameSpace(di_builder: LLVMDIBuilderRef, parent: LLVMMetadataRef, name: String, export_symbols: bool) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateNameSpace(di_builder, parent, name.data(), name.size(), export_symbols as i32);
}

func LLVMDIBuilderCreateFunction(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, linkage_name: String, file: LLVMMetadataRef, line: uint, type: LLVMMetadataRef, is_local_to_unit: bool, is_definition: bool, scope_line: uint, flags: LLVMDIFlags, is_optimized: bool) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateFunction(di_builder, scope, name.data(), name.size(), linkage_name.data(), linkage_name.size(), file, line as u32, type, is_local_to_unit as i32, is_definition as i32, scope_line as u32, flags, is_optimized as i32);
}

func LLVMDIBuilderCreateSubroutineType(di_builder: LLVMDIBuilderRef, file: LLVMMetadataRef, parameter_types: &List!<LLVMMetadataRef>, flags: LLVMDIFlags) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateSubroutineType(di_builder, file, parameter_types.data, parameter_types.size() as u32, flags);
}

func LLVMDIBuilderCreateEnumerator(di_builder: LLVMDIBuilderRef, name: String, value: int, is_unsigned: bool) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateEnumerator(di_builder, name.data(), name.size(), value as i64, is_unsigned as i32);
}

func LLVMDIBuilderCreateEnumerationType(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, file: LLVMMetadataRef, line: uint, size_in_bits: uint, alignment_in_bits: uint, elements: &List!<LLVMMetadataRef>, class_type: LLVMMetadataRef) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateEnumerationType(di_builder, scope, name.data(), name.size(), file, line as u32, size_in_bits as u64, alignment_in_bits as u32, elements.data, elements.size() as u32, class_type);
}

func LLVMDIBuilderCreateUnionType(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, file: LLVMMetadataRef, line: uint, size_in_bits: uint, alignment_in_bits: uint, flags: LLVMDIFlags, elements: &List!<LLVMMetadataRef>, runtime_lang: u32, unique_id: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateUnionType(di_builder, scope, name.data(), name.size(), file, line as u32, size_in_bits as u64, alignment_in_bits as u32, flags, elements.data, elements.size() as u32, runtime_lang, unique_id.data(), unique_id.size());
}

func LLVMDIBuilderCreateArrayType(di_builder: LLVMDIBuilderRef, size: uint, alignment_in_bits: uint, element_type: LLVMMetadataRef, subscripts: &List!<LLVMMetadataRef>) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateArrayType(di_builder, size as u64, alignment_in_bits as u32, element_type, subscripts.data, subscripts.size() as u32);
}

func LLVMDIBuilderCreateVectorType(di_builder: LLVMDIBuilderRef, size: uint, alignment_in_bits: uint, element_type: LLVMMetadataRef, subscripts: &List!<LLVMMetadataRef>) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateVectorType(di_builder, size as u64, alignment_in_bits as u32, element_type, subscripts.data, subscripts.size() as u32);
}

func LLVMDIBuilderCreateUnspecifiedType(di_builder: LLVMDIBuilderRef, name: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateUnspecifiedType(di_builder, name.data(), name.size());
}

func LLVMDIBuilderCreateBasicType(di_builder: LLVMDIBuilderRef, name: String, size_in_bits: uint, encoding: DWARFTypeEncoding, flags: LLVMDIFlags) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateBasicType(di_builder, name.data(), name.size(), size_in_bits as u64, encoding as u32, flags);
}

func LLVMDIBuilderCreatePointerType(di_builder: LLVMDIBuilderRef, pointee_type: LLVMMetadataRef, size_in_bits: uint, alignment_in_bits: uint, address_space: uint, name: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreatePointerType(di_builder, pointee_type, size_in_bits as u64, alignment_in_bits as u32, address_space as u32, name.data(), name.size());
}

func LLVMDIBuilderCreateStructType(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, file: LLVMMetadataRef, line: uint, size_in_bits: uint, alignment_in_bits: uint, flags: LLVMDIFlags, derived_from: LLVMMetadataRef, elements: &List!<LLVMMetadataRef>, runtime_lang: u32, vtable_holder: LLVMMetadataRef, unique_id: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateStructType(di_builder, scope, name.data(), name.size(), file, line as u32, size_in_bits as u64, alignment_in_bits as u32, flags, derived_from, elements.data, elements.size() as u32, runtime_lang, vtable_holder, unique_id.data(), unique_id.size());
}

func LLVMDIBuilderCreateMemberType(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, file: LLVMMetadataRef, line: uint, size_in_bits: uint, alignment_in_bits: uint, offset_in_bits: uint, flags: LLVMDIFlags, type: LLVMMetadataRef) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateMemberType(di_builder, scope, name.data(), name.size(), file, line as u32, size_in_bits as u64, alignment_in_bits as u32, offset_in_bits as u64, flags, type);
}

func LLVMDIBuilderCreateReferenceType(di_builder: LLVMDIBuilderRef, tag: DWARFTag, base_type: LLVMMetadataRef) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateReferenceType(di_builder, tag as u32, base_type);
}

func LLVMDIBuilderCreateReplaceableCompositeType(di_builder: LLVMDIBuilderRef, tag: DWARFTag, name: String, scope: LLVMMetadataRef, file: LLVMMetadataRef, line: uint, runtime_lang: u32, size_in_bits: uint, alignment_in_bits: uint, flags: LLVMDIFlags, unique_id: String) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateReplaceableCompositeType(di_builder, tag as u32, name.data(), name.size(), scope, file, line as u32, runtime_lang, size_in_bits as u64, alignment_in_bits as u32, flags, unique_id.data(), unique_id.size());
}

func LLVMDIBuilderCreateAutoVariable(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, file: LLVMMetadataRef, line: uint, type: LLVMMetadataRef, always_preserve: bool, flags: LLVMDIFlags, alignment_in_bits: uint) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateAutoVariable(di_builder, scope, name.data(), name.size(), file, line as u32, type, always_preserve as i32, flags, alignment_in_bits as u32);
}

func LLVMDIBuilderCreateParameterVariable(di_builder: LLVMDIBuilderRef, scope: LLVMMetadataRef, name: String, arg_no: uint, file: LLVMMetadataRef, line: uint, type: LLVMMetadataRef, always_preserve: bool, flags: LLVMDIFlags) -> LLVMMetadataRef {
	return LLVMDIBuilderCreateParameterVariable(di_builder, scope, name.data(), name.size(), arg_no as u32, file, line as u32, type, always_preserve as i32, flags);
}

func LLVMRunFunctionAsMain(ee: LLVMExecutionEngineRef, function: LLVMValueRef, args: List!<String>, env: List!<String>) -> int {
	var argv: List!<cptr!<byte>>;
	for &&arg in args {
		arg.append('\0'b);
		argv.append(arg.data());
	}

	var envv: List!<cptr!<byte>>;
	for &&val in env {
		val.append('\0'b);
		envv.append(val.data());
	}
	envv.append(cptr!<byte>::null());

	return LLVMRunFunctionAsMain(ee, function, argv.size() as u32, argv.data(), envv.data()) as int;
}

func LLVMRunFunction(ee: LLVMExecutionEngineRef, function: LLVMValueRef, args: &List!<LLVMGenericValueRef>) -> LLVMGenericValueRef {
	return LLVMRunFunction(ee, function, args.size() as u32, args.data);
}
