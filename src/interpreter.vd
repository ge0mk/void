import std/core;
import std/io;
import std/list;
import std/map;
import std/shared_list;
import std/string;

import error;
import program;
import span;

struct StackFrame {
	var variables: Map!<SharedHandle!<VarDecl>, Value>;
	var return_variable: SharedHandle!<VarDecl>;

	func constructor(this: &&StackFrame) -> void = default;
	func constructor(this: &&StackFrame, other: StackFrame) -> void = default;
	func destructor(this: &&StackFrame) -> void = default;

	operator ==(this: StackFrame, other: StackFrame) -> bool = default;
}

enum ControlFlow {
	case Continue;
	case Break;
	case Yield;
	case Return;
}

struct Interpreter {
	var program: &&Program;
	var stack: List!<StackFrame>;
	var current_namespace: SharedHandle!<Namespace>;

	func constructor(this: &&Interpreter, program: &&Program) -> void {
		this.program := &&program;
	}

	func destructor(this: &&Interpreter) -> void = default;

	func error(this: &Interpreter, message: String, span: Span) -> void {
		this.program.printError(CompilationError(message, ErrorType::Error, ErrorStage::Interpreter, span));
	}

	func todo(this: &Interpreter, message: String, span: Span) -> void {
		this.program.printError(CompilationError(message, ErrorType::Todo, ErrorStage::Interpreter, span));
	}

	func getASTNode(this: &&Interpreter, id: uint) -> Node {
		return this.current_namespace.file.nodes[id];
	}

	func pushStackFrame(this: &&Interpreter) -> void {
		this.stack.append(StackFrame());
	}

	func popStackFrame(this: &&Interpreter) -> Value {
		const last_stack_frame = this.stack.last() else {
			return Value::Undefined;
		}

		this.stack.removeLast();
		return last_stack_frame.variables.get(last_stack_frame.return_variable) ?? Value::Void(this.program.void_type);
	}

	func setVariable(this: &&Interpreter, variable: SharedHandle!<VarDecl>, value: &Value) -> void {
		if variable.is_comptime {
			variable.value = value;
		} else {
			this.stack[this.stack.size() - 1].variables[variable] = value;
		}
	}

	func getVariable(this: &&Interpreter, variable: SharedHandle!<VarDecl>) -> Value {
		if variable.is_comptime {
			return variable.value;
		} else {
			return this.stack[this.stack.size() - 1].variables[variable];
		}
	}

	func interpret(this: &&Interpreter, node: &Node) -> Result!<Value, ControlFlow> {
		var result = Value::Undefined;

		match node {
			case Empty -> return Ok(Value::Void(this.program.void_type));
			case Garbage -> return Ok(Value::Undefined);
			case CompoundStmt: children -> {
				for child in children {
					discard this.interpret(this.getASTNode(child));
				}
				return Ok(Value::Void(this.program.void_type));
			}
			case IfStmt: if_stmt -> {
				const condition = try this.interpret(this.getASTNode(if_stmt.condition));
				if condition is Undefined {
					return Ok(Value::Void(this.program.void_type));
				}

				if condition.toBool() {
					return this.interpret(this.getASTNode(if_stmt.then_branch));
				} else {
					return this.interpret(this.getASTNode(if_stmt.else_branch));
				}
			}
			case WhileStmt: while_stmt -> {
				var condition = Value::Undefined;
				if while_stmt.kind == While {
					condition = try this.interpret(this.getASTNode(while_stmt.condition));
					while condition.toBool() {
						if const control_flow = this.interpret(this.getASTNode(while_stmt.body)) as Error {
							match control_flow {
								case Break -> break;
								case Continue -> {}
								else -> throw control_flow;
							}
						}

						condition = try this.interpret(this.getASTNode(while_stmt.condition));
					}
				} else if while_stmt.kind == DoWhile {
					do {
						if const control_flow = this.interpret(this.getASTNode(while_stmt.body)) as Error {
							match control_flow {
								case Break -> break;
								case Continue -> {}
								else -> throw control_flow;
							}
						}

						condition = try this.interpret(this.getASTNode(while_stmt.condition));
					} while condition.toBool();
				}

				return Ok(Value::Void(this.program.void_type));
			}
			case BreakStmt -> throw ControlFlow::Break;
			case ContinueStmt -> throw ControlFlow::Continue;
			case YieldStmt -> throw ControlFlow::Yield;
			case ReturnStmt: value -> {
				this.setVariable(this.stack[this.stack.size() - 1].return_variable, try this.interpret(this.getASTNode(value)));
				throw ControlFlow::Return;
			}
			case LifeTimeStart: variable -> {
				discard try this.interpret(this.getASTNode(variable.constructor_call));
				return Ok(Value::Void(this.program.void_type));
			}
			case LifeTimeEnd: variable -> {
				discard try this.interpret(this.getASTNode(variable.destructor_call));
				return Ok(Value::Void(this.program.void_type));
			}
			case IntegerLiteralExpr: value -> return Ok(Value::Integer(value, node.type));
			case FloatLiteralExpr: value -> return Ok(Value::Float(value, node.type));
			case BoolLiteralExpr: value -> return Ok(Value::Integer(value as int, node.type));
			case StringLiteralExpr: literal -> return Ok(Value::String(literal.value, node.type));
			case ConstAggregateExpr: children -> {
				var values: List!<Value>;
				for child in children {
					values.append(try this.interpret(this.getASTNode(child)));
				}
				return Ok(Value::Aggregate(values, node.type));
			}
			case TypeRefExpr: type -> return Ok(Value::Type(type, node.type));
			case FunctionRefExpr: function -> return Ok(Value::Function(function, node.type));
			case VarInvokeExpr: variable -> return Ok(Value::Variable(variable, node.type));
			case CallExpr: call -> {
				var parameters: List!<Value>;
				var has_errors = false;
				for param in call.parameters {
					const value = try this.interpret(this.getASTNode(param));
					if value is Undefined {
						has_errors = true;
					}
					parameters.append(value);
				}

				if !has_errors {
					result = this.interpret(call.function, parameters, node.span);
				}
			}
			case DereferenceExpr: base -> match try this.interpret(this.getASTNode(base)) {
				case Variable: variable -> result = this.getVariable(variable);
				else -> {}
			}
			else -> {}
		}

		if result is Undefined {
			result = this.compileAndRun(node);
		}

		return Ok(result);
	}

	func interpret(this: &&Interpreter, function: SharedHandle!<FunctionDecl>, args: &List!<Value>, error_span: Span) -> Value {
		match function.body {
			case Extern -> {
				this.todo("interpret calls to extern functions", error_span);
				return Value::Undefined;
			}
			case Builtin: builtin_funcion -> return this.interpret(builtin_funcion, function.return_type, args, error_span);
			case Stmt: stmt -> {
				const prev_namespace = this.current_namespace;
				this.current_namespace = function.parent_namespace;
				this.pushStackFrame();

				for i in 0u..args.size() {
					this.setVariable(function.variables[i], args[i]);
				}

				discard this.interpret(this.getASTNode(stmt));
				this.current_namespace = prev_namespace;
				return this.popStackFrame();
			}
			else -> {
				this.error("function can't be interpreted: " + function.signature(), error_span);
				return Value::Undefined;
			}
		}
	}

	func interpret(this: &&Interpreter, function: BuiltinFunction, return_type: Type, args: &List!<Value>, span: Span) -> Value {
		match function {
			case PrimitiveOp: op -> return this.interpret(op, function.base_type, args, span);
			// casts
			case IntCast: target_type -> return Value::Integer(args[0u].toInt(), target_type);
			case FloatCast: target_type -> return Value::Float(args[0u].toFloat(), target_type);
			case IntToFloat: target_type -> return Value::Float(args[0u].toInt() as f64, target_type);
			case FloatToInt: target_type -> return Value::Integer(args[0u].toFloat() as int, target_type);
			// reflection functions
			case ReferenceKindOf -> return Value::Integer(function.base_type.reference_kind as int, return_type);
			case HasDefaultConstructor -> return Value::Integer(function.base_type.decl.default_constructor.isAlive() as int, return_type);
			case HasCopyConstructor -> return Value::Integer(function.base_type.decl.copy_constructor.isAlive() as int, return_type);
			case TypeRefOpEqual -> return Value::Integer((args[0u].toType() == args[1u].toType()) as int, return_type);
			else -> {
				this.todo("finish interpretation of builtin functions", span);
				return Value::Undefined;
			}
		}
	}

	func interpret(this: &&Interpreter, op: PrimitiveOp, type: Type, args: &List!<Value>, span: Span) -> Value {
		var lhs = args[0u];
		if op.isAssignment() && op.getOp() > Copy {
			const variable = args[0u] as Variable else {
				return Value::Undefined;
			}

			lhs = this.getVariable(variable);
		}

		const lhs_int = lhs.toInt();
		const lhs_uint = lhs.toUInt();
		const lhs_float = lhs.toFloat();

		const rhs = args.at(1u) ?? Value::Undefined;

		const rhs_int = rhs.toInt();
		const rhs_uint = rhs.toUInt();
		const rhs_float = rhs.toFloat();

		const result = match op.getOp() {
			case NoOp -> yield Value::Undefined;
			case ConstNull -> {
				if type.decl.body is Float {
					yield Value::Float(0.0, type);
				} else {
					yield Value::Integer(0, type);
				}
			}
			case Copy -> yield rhs;
			case BitwiseEQ -> yield Value::Integer((lhs_int == rhs_int) as int, this.program.bool_type);
			case BitwiseNE -> yield Value::Integer((lhs_int != rhs_int) as int, this.program.bool_type);
			case BitwiseAnd -> yield Value::Integer(lhs_int & rhs_int, type);
			case BitwiseOr -> yield Value::Integer(lhs_int | rhs_int, type);
			case BitwiseXOr -> yield Value::Integer(lhs_int ^ rhs_int, type);
			case BitwiseNot -> yield Value::Integer(~lhs_int, type);
			case BitwiseShl -> yield Value::Integer(lhs_int << rhs_int, type);
			case BitwiseLShr -> yield Value::Integer((lhs_uint >> rhs_uint) as int, type);
			case BitwiseAShr -> yield Value::Integer(lhs_int >> rhs_int, type);
			case IntAdd -> yield Value::Integer(lhs_int + rhs_int, type);
			case IntSub -> yield Value::Integer(lhs_int - rhs_int, type);
			case IntMul -> yield Value::Integer(lhs_int * rhs_int, type);
			case IntNeg -> yield Value::Integer(-lhs_int, type);
			case IntInc -> yield Value::Integer(lhs_int + 1, type);
			case IntDec -> yield Value::Integer(lhs_int - 1, type);
			case SIntLT -> yield Value::Integer((lhs_int < rhs_int) as int, this.program.bool_type);
			case SIntLE -> yield Value::Integer((lhs_int <= rhs_int) as int, this.program.bool_type);
			case SIntGT -> yield Value::Integer((lhs_int > rhs_int) as int, this.program.bool_type);
			case SIntGE -> yield Value::Integer((lhs_int >= rhs_int) as int, this.program.bool_type);
			case SIntCmp -> yield Value::Integer(lhs_int <=> rhs_int, this.program.int_type);
			case SIntDiv -> yield Value::Integer(lhs_int / rhs_int, type);
			case SIntMod -> yield Value::Integer(lhs_int % rhs_int, type);
			case UIntLT -> yield Value::Integer((lhs_uint < rhs_uint) as int, this.program.bool_type);
			case UIntLE -> yield Value::Integer((lhs_uint <= rhs_uint) as int, this.program.bool_type);
			case UIntGT -> yield Value::Integer((lhs_uint > rhs_uint) as int, this.program.bool_type);
			case UIntGE -> yield Value::Integer((lhs_uint >= rhs_uint) as int, this.program.bool_type);
			case UIntCmp -> yield Value::Integer(lhs_uint <=> rhs_uint, this.program.int_type);
			case UIntDiv -> yield Value::Integer((lhs_uint / rhs_uint) as int, type);
			case UIntMod -> yield Value::Integer((lhs_uint % rhs_uint) as int, type);
			case FloatEQ -> yield Value::Integer((lhs_float == rhs_float) as int, this.program.bool_type);
			case FloatNE -> yield Value::Integer((lhs_float != rhs_float) as int, this.program.bool_type);
			case FloatLT -> yield Value::Integer((lhs_float < rhs_float) as int, this.program.bool_type);
			case FloatLE -> yield Value::Integer((lhs_float <= rhs_float) as int, this.program.bool_type);
			case FloatGT -> yield Value::Integer((lhs_float > rhs_float) as int, this.program.bool_type);
			case FloatGE -> yield Value::Integer((lhs_float >= rhs_float) as int, this.program.bool_type);
			case FloatCmp -> yield Value::Integer(lhs_float <=> rhs_float, this.program.int_type);
			case FloatAdd -> yield Value::Float(lhs_float + rhs_float, type);
			case FloatSub -> yield Value::Float(lhs_float - rhs_float, type);
			case FloatMul -> yield Value::Float(lhs_float * rhs_float, type);
			case FloatDiv -> yield Value::Float(lhs_float / rhs_float, type);
			case FloatMod -> yield Value::Float(lhs_float % rhs_float, type);
			case FloatNeg -> yield Value::Float(-lhs_float,  type)
			else -> panic("invalid primitive op");
		}

		if op.isAssignment() {
			const variable = args[0u] as Variable else {
				return Value::Undefined;
			}
			this.setVariable(variable, result);

			return Value::Void(this.program.void_type);
		} else {
			return result;
		}
	}

	func compileAndRun(this: &&Interpreter, node: &Node) -> Value {
		var result = Value::Undefined;

		this.todo("finish interpretation of expressions using llvm", node.span);

		return result;
	}
}
