import extern c "llvm-c/Types.h" {
	extern struct LLVMMemoryBufferRef {}
	extern struct LLVMContextRef {}
	extern struct LLVMModuleRef {}

	extern struct LLVMTypeRef implements (Equal<LLVMTypeRef>) {
		[[name="operator(==)"]]
		public fn equals(this, anon rhs: LLVMTypeRef) -> bool
	}

	extern struct LLVMValueRef implements (Equal<LLVMValueRef>) {
		[[name="operator(==)"]]
		public fn equals(this, anon rhs: LLVMValueRef) -> bool
	}

	extern struct LLVMBasicBlockRef {}
	extern struct LLVMMetadataRef {}
	extern struct LLVMBuilderRef {}
	extern struct LLVMDIBuilderRef {}
}

import extern c "llvm-c/Core.h" {
	extern struct LLVMOpcode {}

	extern enum LLVMLinkage: i32 {
		LLVMExternalLinkage
		LLVMAvailableExternallyLinkage
		LLVMLinkOnceAnyLinkage
		LLVMLinkOnceODRLinkage
		LLVMLinkOnceODRAutoHideLinkage
		LLVMWeakAnyLinkage
		LLVMWeakODRLinkage
		LLVMAppendingLinkage
		LLVMInternalLinkage
		LLVMPrivateLinkage
		LLVMDLLImportLinkage
		LLVMDLLExportLinkage
		LLVMExternalWeakLinkage
		LLVMGhostLinkage
		LLVMCommonLinkage
		LLVMLinkerPrivateLinkage
		LLVMLinkerPrivateWeakLinkage
	}

	extern enum LLVMAtomicRMWBinOp: i32 {
		LLVMAtomicRMWBinOpXchg
		LLVMAtomicRMWBinOpAdd
		LLVMAtomicRMWBinOpSub
		LLVMAtomicRMWBinOpAnd
		LLVMAtomicRMWBinOpNand
		LLVMAtomicRMWBinOpOr
		LLVMAtomicRMWBinOpXor
		LLVMAtomicRMWBinOpMax
		LLVMAtomicRMWBinOpMin
		LLVMAtomicRMWBinOpUMax
		LLVMAtomicRMWBinOpUMin
		LLVMAtomicRMWBinOpFAdd
		LLVMAtomicRMWBinOpFSub
	}

	extern enum LLVMAtomicOrdering: i32 {
		LLVMAtomicOrderingNotAtomic
		LLVMAtomicOrderingUnordered
		LLVMAtomicOrderingMonotonic
		LLVMAtomicOrderingAcquire
		LLVMAtomicOrderingRelease
		LLVMAtomicOrderingAcquireRelease
		LLVMAtomicOrderingSequentiallyConsistent
	}

	extern enum LLVMIntPredicate: i32 {
		LLVMIntEQ
		LLVMIntNE
		LLVMIntUGT
		LLVMIntUGE
		LLVMIntULT
		LLVMIntULE
		LLVMIntSGT
		LLVMIntSGE
		LLVMIntSLT
		LLVMIntSLE
	}

	extern enum LLVMRealPredicate: i32 {
		LLVMRealPredicateFalse
		LLVMRealOEQ
		LLVMRealOGT
		LLVMRealOGE
		LLVMRealOLT
		LLVMRealOLE
		LLVMRealONE
		LLVMRealORD
		LLVMRealUNO
		LLVMRealUEQ
		LLVMRealUGT
		LLVMRealUGE
		LLVMRealULT
		LLVMRealULE
		LLVMRealUNE
		LLVMRealPredicateTrue
	}

	extern enum LLVMModuleFlagBehavior: i32 {
		LLVMModuleFlagBehaviorError
		LLVMModuleFlagBehaviorWarning
		LLVMModuleFlagBehaviorRequire
		LLVMModuleFlagBehaviorOverride
		LLVMModuleFlagBehaviorAppend
		LLVMModuleFlagBehaviorAppendUnique
	}

	extern fn LLVMDisposeMessage(anon message: raw c_char)

	extern fn LLVMContextCreate() -> LLVMContextRef
	extern fn LLVMGetGlobalContext() -> LLVMContextRef
	extern fn LLVMContextDispose(anon context: LLVMContextRef)

	extern fn LLVMGetTypeByName2(anon context: LLVMContextRef, anon name: raw c_char) -> LLVMTypeRef

	extern fn LLVMModuleCreateWithNameInContext(anon name: raw c_char, anon context: LLVMContextRef) -> LLVMModuleRef
	extern fn LLVMDisposeModule(anon module: LLVMModuleRef)
	extern fn LLVMSetTarget(anon module: LLVMModuleRef, anon target: raw c_char)
	extern fn LLVMAddModuleFlag(anon module: LLVMModuleRef, anon behavior: LLVMModuleFlagBehavior, anon key: raw c_char, anon key_len: usize, anon value: LLVMMetadataRef)
	extern fn LLVMPrintModuleToFile(anon module: LLVMModuleRef, anon filename: raw c_char, anon errorMessage: raw raw c_char) -> bool
	extern fn LLVMPrintModuleToString(anon module: LLVMModuleRef) -> raw c_char
	extern fn LLVMGetModuleContext(anon module: LLVMModuleRef) -> LLVMContextRef
	extern fn LLVMAddFunction(anon module: LLVMModuleRef, anon name: raw c_char, anon type: LLVMTypeRef) -> LLVMValueRef
	extern fn LLVMGetNamedFunction(anon module: LLVMModuleRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMIntTypeInContext(anon context: LLVMContextRef, anon num_bits: u32) -> LLVMTypeRef
	extern fn LLVMGetIntTypeWidth(anon int_type: LLVMTypeRef) -> u32
	extern fn LLVMHalfTypeInContext(anon context: LLVMContextRef) -> LLVMTypeRef
	extern fn LLVMFloatTypeInContext(anon context: LLVMContextRef) -> LLVMTypeRef
	extern fn LLVMDoubleTypeInContext(anon context: LLVMContextRef) -> LLVMTypeRef
	extern fn LLVMX86FP80TypeInContext(anon context: LLVMContextRef) -> LLVMTypeRef
	extern fn LLVMFP128TypeInContext(anon context: LLVMContextRef) -> LLVMTypeRef

	extern fn LLVMFunctionType(anon return_type: LLVMTypeRef, anon param_types: raw LLVMTypeRef, anon paramCount: u32, anon isVarArg: bool) -> LLVMTypeRef
	extern fn LLVMCountParamTypes(anon func: LLVMTypeRef) -> u32
	extern fn LLVMGetParamTypes(anon func: LLVMTypeRef, anon buffer: raw LLVMTypeRef)

	extern fn LLVMStructCreateNamed(anon context: LLVMContextRef, anon name: raw c_char) -> LLVMTypeRef
	extern fn LLVMStructSetBody(anon structTy: LLVMTypeRef, anon elements: raw LLVMTypeRef, anon elementCount: u32, anon packed: bool) -> LLVMTypeRef

	extern fn LLVMArrayType(anon element_type: LLVMTypeRef, anon elementCount: u32) -> LLVMTypeRef
	extern fn LLVMPointerTypeInContext(anon context: LLVMContextRef, anon addressSpace: u32) -> LLVMTypeRef
	extern fn LLVMVectorType(anon element_type: LLVMTypeRef, anon elementCount: u32) -> LLVMTypeRef
	extern fn LLVMScalableVectorType(anon element_type: LLVMTypeRef, anon elementCount: u32) -> LLVMTypeRef
	extern fn LLVMVoidTypeInContext(anon context: LLVMContextRef) -> LLVMTypeRef

	extern fn LLVMTypeOf(anon value: LLVMValueRef) -> LLVMTypeRef
	extern fn LLVMIsConstant(anon value: LLVMValueRef) -> bool
	extern fn LLVMIsUndef(anon value: LLVMValueRef) -> bool
	extern fn LLVMIsPoison(anon value: LLVMValueRef) -> bool

	extern fn LLVMConstNull(anon type: LLVMTypeRef) -> LLVMValueRef
	extern fn LLVMConstAllOnes(anon type: LLVMTypeRef) -> LLVMValueRef
	extern fn LLVMGetUndef(anon type: LLVMTypeRef) -> LLVMValueRef
	extern fn LLVMGetPoison(anon type: LLVMTypeRef) -> LLVMValueRef
	extern fn LLVMConstInt(anon type: LLVMTypeRef, anon value: i64, anon signExtend: bool) -> LLVMValueRef
	extern fn LLVMConstReal(anon type: LLVMTypeRef, anon value: f64) -> LLVMValueRef
	extern fn LLVMConstStringInContext(anon context: LLVMContextRef, anon str: raw c_char, anon length: u64, anon DontNullTerminate: bool) -> LLVMValueRef

	extern fn LLVMSetLinkage(anon global: LLVMValueRef, anon linkage: LLVMLinkage)

	extern fn LLVMAddGlobal(anon module: LLVMModuleRef, anon type: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMAddGlobalInAddressSpace(anon module: LLVMModuleRef, anon type: LLVMTypeRef, anon name: raw c_char, anon addressSpace: u32) -> LLVMValueRef
	extern fn LLVMGetNamedGlobal(anon module: LLVMModuleRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMSetInitializer(anon var: LLVMValueRef, anon value: LLVMValueRef)
	extern fn LLVMSetGlobalConstant(anon var: LLVMValueRef, anon IsConstant: bool)

	extern fn LLVMLookupIntrinsicID(anon name: raw c_char, anon name_len: usize) -> u32
	extern fn LLVMGetIntrinsicID(anon func: LLVMValueRef) -> u32
	extern fn LLVMGetIntrinsicDeclaration(anon module: LLVMModuleRef, anon id: u32, anon param_types: raw LLVMTypeRef, anon param_count: usize) -> LLVMValueRef
	extern fn LLVMIntrinsicGetType(anon context: LLVMContextRef, anon id: u32, anon param_types: raw LLVMTypeRef, anon param_count: usize) -> LLVMTypeRef

	extern fn LLVMGetAlignment(anon value: LLVMValueRef) -> u32
	extern fn LLVMSetAlignment(anon value: LLVMValueRef, anon bytes: u32)

	extern fn LLVMCountParams(anon func: LLVMValueRef) -> u32
	extern fn LLVMGetParams(anon func: LLVMValueRef, anon buffer: raw LLVMValueRef)
	extern fn LLVMGetParam(anon func: LLVMValueRef, anon index: u32) -> LLVMValueRef

	extern fn LLVMMetadataAsValue(anon context: LLVMContextRef, anon md: LLVMMetadataRef) -> LLVMValueRef
	extern fn LLVMValueAsMetadata(anon value: LLVMValueRef) -> LLVMMetadataRef

	extern fn LLVMBasicBlockAsValue(anon block: LLVMBasicBlockRef) -> LLVMValueRef
	extern fn LLVMValueIsBasicBlock(anon value: LLVMValueRef) -> bool
	extern fn LLVMValueAsBasicBlock(anon value: LLVMValueRef) -> LLVMBasicBlockRef
	extern fn LLVMGetBasicBlockTerminator(anon block: LLVMBasicBlockRef) -> LLVMValueRef
	extern fn LLVMCreateBasicBlockInContext(anon context: LLVMContextRef, anon name: raw c_char) -> LLVMBasicBlockRef
	extern fn LLVMAppendBasicBlockInContext(anon context: LLVMContextRef, anon func: LLVMValueRef, anon name: raw c_char) -> LLVMBasicBlockRef
	extern fn LLVMDeleteBasicBlock(anon block: LLVMBasicBlockRef)

	extern fn LLVMGetLastInstruction(anon block: LLVMBasicBlockRef) -> LLVMValueRef
	extern fn LLVMGetInstructionOpcode(anon inst: LLVMValueRef) -> LLVMOpcode
	extern fn LLVMIsATerminatorInst(anon inst: LLVMValueRef) -> LLVMValueRef

	extern fn LLVMAddIncoming(anon PhiNode: LLVMValueRef, anon IncomingValues: raw LLVMValueRef, anon IncomingBlocks: raw LLVMBasicBlockRef, anon count: u32)

	extern fn LLVMCreateBuilderInContext(anon context: LLVMContextRef) -> LLVMBuilderRef
	extern fn LLVMPositionBuilderAtEnd(anon builder: LLVMBuilderRef, anon block: LLVMBasicBlockRef)
	extern fn LLVMGetInsertBlock(anon builder: LLVMBuilderRef) -> LLVMBasicBlockRef
	extern fn LLVMDisposeBuilder(anon builder: LLVMBuilderRef)
	extern fn LLVMSetCurrentDebugLocation2(anon builder: LLVMBuilderRef, anon loc: LLVMMetadataRef)

	extern fn LLVMBuildRetVoid(anon builder: LLVMBuilderRef)
	extern fn LLVMBuildRet(anon builder: LLVMBuilderRef, anon value: LLVMValueRef)
	extern fn LLVMBuildBr(anon builder: LLVMBuilderRef, anon dest: LLVMBasicBlockRef)
	extern fn LLVMBuildCondBr(anon builder: LLVMBuilderRef, anon condition: LLVMValueRef, anon then_block: LLVMBasicBlockRef, anon else_block: LLVMBasicBlockRef)
	extern fn LLVMBuildSwitch(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon else_block: LLVMBasicBlockRef, anon num_cases: u32) -> LLVMValueRef
	extern fn LLVMBuildUnreachable(anon builder: LLVMBuilderRef)

	extern fn LLVMAddCase(anon switch_instr: LLVMValueRef, anon value: LLVMValueRef, anon dest: LLVMBasicBlockRef)

	extern fn LLVMBuildAdd(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFAdd(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildSub(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFSub(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildMul(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFMul(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildUDiv(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildSDiv(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFDiv(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildURem(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildSRem(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFRem(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildShl(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildLShr(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildAShr(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildAnd(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildOr(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildXor(anon builder: LLVMBuilderRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildNeg(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFNeg(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildNot(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildMalloc(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildArrayMalloc(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon size: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildAlloca(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildArrayAlloca(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon size: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildFree(anon builder: LLVMBuilderRef, anon ptr: LLVMValueRef) -> LLVMValueRef

	extern fn LLVMBuildLoad2(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon address: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildStore(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon address: LLVMValueRef) -> LLVMValueRef

	extern fn LLVMBuildGEP2(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon ptr: LLVMValueRef, anon indices: raw LLVMValueRef, anon numIndices: u32, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildInBoundsGEP2(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon ptr: LLVMValueRef, anon indices: raw LLVMValueRef, anon numIndices: u32, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildStructGEP2(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon ptr: LLVMValueRef, anon index: u32, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildGlobalString(anon builder: LLVMBuilderRef, anon str: raw c_char, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildGlobalStringPtr(anon builder: LLVMBuilderRef, anon str: raw c_char, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildTrunc(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildZExt(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildSExt(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFPToUI(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFPToSI(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildUIToFP(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildSIToFP(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFPTrunc(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFPExt(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildPtrToInt(anon builder: LLVMBuilderRef, anon value: LLVMValueRef, anon destType: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildBitCast(anon builder: LLVMBuilderRef, anon val: LLVMValueRef, anon dst: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildPointerCast(anon builder: LLVMBuilderRef, anon val: LLVMValueRef, anon dst: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildICmp(anon builder: LLVMBuilderRef, anon op: LLVMIntPredicate, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildFCmp(anon builder: LLVMBuilderRef, anon op: LLVMRealPredicate, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildPhi(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildCall2(anon builder: LLVMBuilderRef, anon type: LLVMTypeRef, anon func: LLVMValueRef, anon args: raw LLVMValueRef, anon numArgs: u64, anon name: raw c_char) -> LLVMValueRef

	extern fn LLVMBuildExtractValue(anon builder: LLVMBuilderRef, anon aggVal: LLVMValueRef, anon index: u32, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildInsertValue(anon builder: LLVMBuilderRef, anon aggVal: LLVMValueRef, anon val: LLVMValueRef, anon index: u32, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildPtrDiff2(anon builder: LLVMBuilderRef, anon element_type: LLVMTypeRef, anon lhs: LLVMValueRef, anon rhs: LLVMValueRef, anon name: raw c_char) -> LLVMValueRef
	extern fn LLVMBuildAtomicRMW(anon builder: LLVMBuilderRef, anon op: LLVMAtomicRMWBinOp, anon ptr: LLVMValueRef, anon value: LLVMValueRef, anon ordering: LLVMAtomicOrdering, anon singleThread: bool) -> LLVMValueRef

	extern fn LLVMCreateMemoryBufferWithContentsOfFile(anon path: raw c_char, anon out_mem_buf: raw LLVMMemoryBufferRef, anon out_message: raw raw c_char) -> bool
	extern fn LLVMDisposeMemoryBuffer(anon mem_buf: LLVMMemoryBufferRef)
}

import extern c "llvm-c/Target.h" {
	extern struct LLVMTargetDataRef {}

	extern fn LLVMIntPtrTypeInContext(anon context: LLVMContextRef, anon target_data: LLVMTargetDataRef) -> LLVMTypeRef

	extern fn LLVMGetModuleDataLayout(anon module: LLVMModuleRef) -> LLVMTargetDataRef
	extern fn LLVMSizeOfTypeInBits(anon target_data: LLVMTargetDataRef, anon type: LLVMTypeRef) -> u64
	extern fn LLVMStoreSizeOfType(anon target_data: LLVMTargetDataRef, anon type: LLVMTypeRef) -> u64
	extern fn LLVMABISizeOfType(anon target_data: LLVMTargetDataRef, anon type: LLVMTypeRef) -> u64

	extern fn LLVMPreferredAlignmentOfType(anon target_data: LLVMTargetDataRef, anon type: LLVMTypeRef) -> u32
}

import extern c "llvm-c/IRReader.h" {
	extern fn LLVMParseIRInContext(anon context: LLVMContextRef, anon mem_buf: LLVMMemoryBufferRef, anon out_module: raw LLVMModuleRef, anon out_message: raw raw c_char) -> bool
}

import extern c "llvm-c/BitWriter.h" {
	extern fn LLVMWriteBitcodeToFile(anon module: LLVMModuleRef, anon path: raw c_char) -> i32
}

import extern c "llvm-c/Analysis.h" {
	extern enum LLVMVerifierFailureAction: i32 {
		LLVMAbortProcessAction
		LLVMPrintMessageAction
		LLVMReturnStatusAction
	}

	extern fn LLVMVerifyModule(anon module: LLVMModuleRef, anon action: LLVMVerifierFailureAction, anon result: raw raw c_char) -> bool
}

import extern c "llvm-c/Linker.h" {
	extern fn LLVMLinkModules2(anon dst: LLVMModuleRef, anon src: LLVMModuleRef) -> bool
}

import extern c "llvm-c/DebugInfo.h" {
	extern enum LLVMDWARFSourceLanguage: i32 {
		LLVMDWARFSourceLanguageC89
		LLVMDWARFSourceLanguageC
		LLVMDWARFSourceLanguageAda83
		LLVMDWARFSourceLanguageC_plus_plus
		LLVMDWARFSourceLanguageCobol74
		LLVMDWARFSourceLanguageCobol85
		LLVMDWARFSourceLanguageFortran77
		LLVMDWARFSourceLanguageFortran90
		LLVMDWARFSourceLanguagePascal83
		LLVMDWARFSourceLanguageModula2
		LLVMDWARFSourceLanguageJava
		LLVMDWARFSourceLanguageC99
		LLVMDWARFSourceLanguageAda95
		LLVMDWARFSourceLanguageFortran95
		LLVMDWARFSourceLanguagePLI
		LLVMDWARFSourceLanguageObjC
		LLVMDWARFSourceLanguageObjC_plus_plus
		LLVMDWARFSourceLanguageUPC
		LLVMDWARFSourceLanguageD
		LLVMDWARFSourceLanguagePython
		LLVMDWARFSourceLanguageOpenCL
		LLVMDWARFSourceLanguageGo
		LLVMDWARFSourceLanguageModula3
		LLVMDWARFSourceLanguageHaskell
		LLVMDWARFSourceLanguageC_plus_plus_03
		LLVMDWARFSourceLanguageC_plus_plus_11
		LLVMDWARFSourceLanguageOCaml
		LLVMDWARFSourceLanguageRust
		LLVMDWARFSourceLanguageC11
		LLVMDWARFSourceLanguageSwift
		LLVMDWARFSourceLanguageJulia
		LLVMDWARFSourceLanguageDylan
		LLVMDWARFSourceLanguageC_plus_plus_14
		LLVMDWARFSourceLanguageFortran03
		LLVMDWARFSourceLanguageFortran08
		LLVMDWARFSourceLanguageRenderScript
		LLVMDWARFSourceLanguageBLISS
		LLVMDWARFSourceLanguageMips_Assembler
		LLVMDWARFSourceLanguageGOOGLE_RenderScript
		LLVMDWARFSourceLanguageBORLAND_Delphi
	}

	extern enum LLVMDWARFEmissionKind: i32 {
		LLVMDWARFEmissionNone
		LLVMDWARFEmissionFull
		LLVMDWARFEmissionLineTablesOnly
	}

	extern enum LLVMDIFlags: i32 {
		LLVMDIFlagZero
		LLVMDIFlagPrivate
		LLVMDIFlagProtected
		LLVMDIFlagPublic
		LLVMDIFlagFwdDecl
		LLVMDIFlagAppleBlock
		LLVMDIFlagReservedBit4
		LLVMDIFlagVirtual
		LLVMDIFlagArtificial
		LLVMDIFlagExplicit
		LLVMDIFlagPrototyped
		LLVMDIFlagObjcClassComplete
		LLVMDIFlagObjectPointer
		LLVMDIFlagVector
		LLVMDIFlagStaticMember
		LLVMDIFlagLValueReference
		LLVMDIFlagRValueReference
		LLVMDIFlagReserved
		LLVMDIFlagSingleInheritance
		LLVMDIFlagMultipleInheritance
		LLVMDIFlagVirtualInheritance
		LLVMDIFlagIntroducedVirtual
		LLVMDIFlagBitField
		LLVMDIFlagNoReturn
		LLVMDIFlagTypePassByValue
		LLVMDIFlagTypePassByReference
		LLVMDIFlagEnumClass
		LLVMDIFlagFixedEnum
		LLVMDIFlagThunk
		LLVMDIFlagNonTrivial
		LLVMDIFlagBigEndian
		LLVMDIFlagLittleEndian
		LLVMDIFlagIndirectVirtualBase
		LLVMDIFlagAccessibility
		LLVMDIFlagPtrToMemberRep
	}

	extern fn LLVMCreateDIBuilder(anon module: LLVMModuleRef) -> LLVMDIBuilderRef
	extern fn LLVMDisposeDIBuilder(anon builder: LLVMDIBuilderRef)
	extern fn LLVMDIBuilderFinalize(anon builder: LLVMDIBuilderRef)

	extern fn LLVMDIBuilderCreateCompileUnit(
		anon builder: LLVMDIBuilderRef
		anon lang: LLVMDWARFSourceLanguage
		anon file: LLVMMetadataRef
		anon producer: raw c_char, anon producer_len: usize
		anon is_optimized: bool
		anon flags: raw c_char, anon flags_len: usize
		anon runtime_ver: u32
		anon split_name: raw c_char, anon split_name_len: usize
		anon kind: LLVMDWARFEmissionKind
		anon dwo_id: u32
		anon split_debug_inlining: bool
		anon debug_info_for_profiling: bool
		anon sys_root: raw c_char, anon sys_root_len: usize
		anon sdk: raw c_char, anon sdk_len: usize
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateFile(
		anon builder: LLVMDIBuilderRef
		anon filename: raw c_char, anon filename_len: usize
		anon directory: raw c_char, anon directory_len: usize
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateModule(
		anon builder: LLVMDIBuilderRef
		anon parent_scope: LLVMMetadataRef
		anon name: raw c_char, anon name_len: usize
		anon config_macros: raw c_char, anon config_macros_len: usize
		anon include_path: raw c_char, anon include_path_len: usize
		anon api_notes_file: raw c_char, anon api_notes_file_len: usize
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateNameSpace(
		anon builder: LLVMDIBuilderRef
		anon parent_scope: LLVMMetadataRef
		anon name: raw c_char, anon name_len: usize
		anon export_symbols: bool
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateFunction(
		anon builder: LLVMDIBuilderRef
		anon scope: LLVMMetadataRef
		anon name: raw c_char, anon name_len: usize
		anon linkage_name: raw c_char, anon linkage_name_len: usize
		anon file: LLVMMetadataRef, anon line_no: u32
		anon type: LLVMMetadataRef
		anon is_local_to_unit: bool
		anon is_definition: bool
		anon scope_line: u32
		anon flags: LLVMDIFlags
		anon is_optimized: bool
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateLexicalBlock(
		anon builder: LLVMDIBuilderRef
		anon scope: LLVMMetadataRef
		anon file: LLVMMetadataRef
		anon line: u32, anon column: u32
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateImportedModuleFromModule(
		anon builder: LLVMDIBuilderRef
		anon scope: LLVMMetadataRef
		anon module: LLVMMetadataRef
		anon file: LLVMMetadataRef
		anon line: u32
		anon elements: raw LLVMMetadataRef, anon num_elements: u32
	) -> LLVMMetadataRef

	extern fn LLVMSetSubprogram(anon func: LLVMValueRef, anon sp: LLVMMetadataRef)

	extern fn LLVMDIBuilderCreateBasicType(
		anon builder: LLVMDIBuilderRef
		anon name: raw c_char, anon name_len: usize
		anon size_in_bits: u64
		anon encoding: u32
		anon flags: LLVMDIFlags
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateUnspecifiedType(
		anon builder: LLVMDIBuilderRef
		anon name: raw c_char, anon name_len: usize
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreatePointerType(
		anon builder: LLVMDIBuilderRef
		anon pointee_type: LLVMMetadataRef
		anon size_in_bits: u64
		anin align_in_bits: u32
		anon address_space: u32
		anon name: raw c_char, anon name_len: usize
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateStructType(
		anon builder: LLVMDIBuilderRef
		anon scope: LLVMMetadataRef
		anon name: raw c_char, anon name_len: usize
		anon file: LLVMMetadataRef
		anon line_number: u32
		anon size_in_bits: u64
		anin align_in_bits: u32
		anon flags: LLVMDIFlags
		anon derived_from: LLVMMetadataRef
		anon elements: raw LLVMMetadataRef
		anon num_elements: u32
		anon run_time_lang: u32
		anon vtable_holder: LLVMMetadataRef
		anon unique_id: raw c_char, anon unique_id_len: usize
	) -> LLVMMetadataRef

	extern fn LLVMDIBuilderCreateSubroutineType(
		anon builder: LLVMDIBuilderRef
		anon file: LLVMMetadataRef
		anon parameter_types: raw LLVMMetadataRef
		anon num_parameter_types: u32
		anon flags: LLVMDIFlags
	) -> LLVMMetadataRef
}

struct LLVMHelper {
	fn LLVMHasBasicBlockTerminator(anon block: LLVMBasicBlockRef) -> bool {
		unsafe {
			cpp {
				"return LLVMGetBasicBlockTerminator(block) != nullptr;"
			}
		}

		return false
	}

	fn LLVMNullMemoryBuffer() -> LLVMMemoryBufferRef {
		unsafe {
			cpp {
				"return nullptr;"
			}
		}
		abort();
	}

	fn LLVMNullModule() -> LLVMModuleRef {
		unsafe {
			cpp {
				"return nullptr;"
			}
		}
		abort();
	}

	fn LLVMNullValue() -> LLVMValueRef {
		unsafe {
			cpp {
				"return nullptr;"
			}
		}
		abort();
	}

	fn LLVMHasNamedFunction(anon module: LLVMModuleRef, anon name: String) -> bool {
		return LLVMGetNamedFunction(module, name.c_string()) != LLVMNullValue();
	}

	fn LLVMHasNamedGlobal(anon module: LLVMModuleRef, anon name: String) -> bool {
		return LLVMGetNamedGlobal(module, name.c_string()) != LLVMNullValue();
	}

	fn LLVMAddModuleFlag2(anon module: LLVMModuleRef, anon behavior: LLVMModuleFlagBehavior, anon key: String, anon value: LLVMMetadataRef) {
		LLVMAddModuleFlag(module, behavior, key.c_string(), key.length(), value)
	}
}
