import std/core;

struct LLVMOpaqueMemoryBuffer {}

struct LLVMOpaqueContext {}

struct LLVMOpaqueModule {}

struct LLVMOpaqueType {}

struct LLVMOpaqueValue {}

struct LLVMOpaqueBasicBlock {}

struct LLVMOpaqueMetadata {}

struct LLVMOpaqueNamedMDNode {}

struct LLVMOpaqueValueMetadataEntry {}

struct LLVMOpaqueBuilder {}

struct LLVMOpaqueDIBuilder {}

struct LLVMOpaqueModuleProvider {}

struct LLVMOpaquePassManager {}

struct LLVMOpaquePassRegistry {}

struct LLVMOpaqueUse {}

struct LLVMOpaqueAttributeRef {}

struct LLVMOpaqueDiagnosticInfo {}

struct LLVMComdat {}

struct LLVMOpaqueModuleFlagEntry {}

struct LLVMOpaqueJITEventListener {}

struct LLVMOpaqueBinary {}

enum LLVMByteOrdering {
	case LLVMBigEndian;
	case LLVMLittleEndian;
}

struct LLVMOpaqueTargetData {}

struct LLVMOpaqueTargetLibraryInfotData {}

struct LLVMOpaqueTargetMachine {}

struct LLVMTarget {}

struct LLVMOpaqueGenericValue {}

struct LLVMOpaqueExecutionEngine {}

struct LLVMOpaqueMCJITMemoryManager {}

struct LLVMMCJITCompilerOptions {}

enum DWARFTag {
	case Tag_null = 0;
	case Tag_array_type = 1;
	case Tag_class_type = 2;
	case Tag_entry_point = 3;
	case Tag_enumeration_type = 4;
	case Tag_formal_parameter = 5;
	case Tag_imported_declaration = 8;
	case Tag_label = 10;
	case Tag_lexical_block = 11;
	case Tag_member = 13;
	case Tag_pointer_type = 15;
	case Tag_reference_type = 16;
	case Tag_compile_unit = 17;
	case Tag_string_type = 18;
	case Tag_structure_type = 19;
	case Tag_subroutine_type = 21;
	case Tag_typedef = 22;
	case Tag_union_type = 23;
	case Tag_unspecified_parameters = 24;
	case Tag_variant = 25;
	case Tag_common_block = 26;
	case Tag_common_inclusion = 27;
	case Tag_inheritance = 28;
	case Tag_inlined_subroutine = 29;
	case Tag_module = 30;
	case Tag_ptr_to_member_type = 31;
	case Tag_set_type = 32;
	case Tag_subrange_type = 33;
	case Tag_with_stmt = 34;
	case Tag_access_declaration = 35;
	case Tag_base_type = 36;
	case Tag_catch_block = 37;
	case Tag_const_type = 38;
	case Tag_constant = 39;
	case Tag_enumerator = 40;
	case Tag_file_type = 41;
	case Tag_friend = 42;
	case Tag_namelist = 43;
	case Tag_namelist_item = 44;
	case Tag_packed_type = 45;
	case Tag_subprogram = 46;
	case Tag_template_type_parameter = 47;
	case Tag_template_value_parameter = 48;
	case Tag_thrown_type = 49;
	case Tag_try_block = 50;
	case Tag_variant_part = 51;
	case Tag_variable = 52;
	case Tag_volatile_type = 53;
	case Tag_dwarf_procedure = 54;
	case Tag_restrict_type = 55;
	case Tag_interface_type = 56;
	case Tag_namespace = 57;
	case Tag_imported_module = 58;
	case Tag_unspecified_type = 59;
	case Tag_partial_unit = 60;
	case Tag_imported_unit = 61;
	case Tag_condition = 63;
	case Tag_shared_type = 64;
	case Tag_type_unit = 65;
	case Tag_rvalue_reference_type = 66;
	case Tag_template_alias = 67;
	case Tag_coarray_type = 68;
	case Tag_generic_subrange = 69;
	case Tag_dynamic_type = 70;
	case Tag_atomic_type = 71;
	case Tag_call_site = 72;
	case Tag_call_site_parameter = 73;
	case Tag_skeleton_unit = 74;
	case Tag_immutable_type = 75;
	case Tag_MIPS_loop = 16513;
	case Tag_format_label = 16641;
	case Tag_function_template = 16642;
	case Tag_class_template = 16643;
	case Tag_GNU_BINCL = 16644;
	case Tag_GNU_EINCL = 16645;
	case Tag_GNU_template_template_param = 16646;
	case Tag_GNU_template_parameter_pack = 16647;
	case Tag_GNU_formal_parameter_pack = 16648;
	case Tag_GNU_call_site = 16649;
	case Tag_GNU_call_site_parameter = 16650;
	case Tag_APPLE_property = 16896;
	case Tag_SUN_function_template = 16897;
	case Tag_SUN_class_template = 16898;
	case Tag_SUN_struct_template = 16899;
	case Tag_SUN_union_template = 16900;
	case Tag_SUN_indirect_inheritance = 16901;
	case Tag_SUN_codeflags = 16902;
	case Tag_SUN_memop_info = 16903;
	case Tag_SUN_omp_child_func = 16904;
	case Tag_SUN_rtti_descriptor = 16905;
	case Tag_SUN_dtor_info = 16906;
	case Tag_SUN_dtor = 16907;
	case Tag_SUN_f90_interface = 16908;
	case Tag_SUN_fortran_vax_structure = 16909;
	case Tag_SUN_hi = 17151;
	case Tag_LLVM_ptrauth_type = 17152;
	case Tag_ALTIUM_circ_type = 20737;
	case Tag_ALTIUM_mwa_circ_type = 20738;
	case Tag_ALTIUM_rev_carry_type = 20739;
	case Tag_ALTIUM_rom = 20753;
	case Tag_LLVM_annotation = 24576;
	case Tag_GHS_namespace = 32772;
	case Tag_GHS_using_namespace = 32773;
	case Tag_GHS_using_declaration = 32774;
	case Tag_GHS_template_templ_param = 32775;
	case Tag_UPC_shared_type = 34661;
	case Tag_UPC_strict_type = 34662;
	case Tag_UPC_relaxed = 34663;
	case Tag_PGI_kanji_type = 40960;
	case Tag_PGI_interface_block = 40992;
	case Tag_BORLAND_property = 45056;
	case Tag_BORLAND_Delphi_string = 45057;
	case Tag_BORLAND_Delphi_dynamic_array = 45058;
	case Tag_BORLAND_Delphi_set = 45059;
	case Tag_BORLAND_Delphi_variant = 45060;
}

enum DWARFTypeEncoding {
	case Type_address = 1;
	case Type_boolean = 2;
	case Type_complex_float = 3;
	case Type_float = 4;
	case Type_signed = 5;
	case Type_signed_char = 6;
	case Type_unsigned = 7;
	case Type_unsigned_char = 8;
	case Type_imaginary_float = 9;
	case Type_packed_decimal = 10;
	case Type_numeric_string = 11;
	case Type_edited = 12;
	case Type_signed_fixed = 13;
	case Type_unsigned_fixed = 14;
	case Type_decimal_float = 15;
	case Type_UTF = 16;
	case Type_UCS = 17;
	case Type_ASCII = 18;
	case Type_HP_complex_float = 129;
	case Type_HP_float128 = 130;
	case Type_HP_complex_float128 = 131;
	case Type_HP_floathpintel = 132;
	case Type_HP_imaginary_float90 = 133;
	case Type_HP_imaginary_float128 = 134;
}

enum LLVMOpcode {
	case LLVMRet = 1;
	case LLVMBr = 2;
	case LLVMSwitch = 3;
	case LLVMIndirectBr = 4;
	case LLVMInvoke = 5;
	case LLVMUnreachable = 7;
	case LLVMCallBr = 67;
	case LLVMFNeg = 66;
	case LLVMAdd = 8;
	case LLVMFAdd = 9;
	case LLVMSub = 10;
	case LLVMFSub = 11;
	case LLVMMul = 12;
	case LLVMFMul = 13;
	case LLVMUDiv = 14;
	case LLVMSDiv = 15;
	case LLVMFDiv = 16;
	case LLVMURem = 17;
	case LLVMSRem = 18;
	case LLVMFRem = 19;
	case LLVMShl = 20;
	case LLVMLShr = 21;
	case LLVMAShr = 22;
	case LLVMAnd = 23;
	case LLVMOr = 24;
	case LLVMXor = 25;
	case LLVMAlloca = 26;
	case LLVMLoad = 27;
	case LLVMStore = 28;
	case LLVMGetElementPtr = 29;
	case LLVMTrunc = 30;
	case LLVMZExt = 31;
	case LLVMSExt = 32;
	case LLVMFPToUI = 33;
	case LLVMFPToSI = 34;
	case LLVMUIToFP = 35;
	case LLVMSIToFP = 36;
	case LLVMFPTrunc = 37;
	case LLVMFPExt = 38;
	case LLVMPtrToInt = 39;
	case LLVMIntToPtr = 40;
	case LLVMBitCast = 41;
	case LLVMAddrSpaceCast = 60;
	case LLVMICmp = 42;
	case LLVMFCmp = 43;
	case LLVMPHI = 44;
	case LLVMCall = 45;
	case LLVMSelect = 46;
	case LLVMUserOp1 = 47;
	case LLVMUserOp2 = 48;
	case LLVMVAArg = 49;
	case LLVMExtractElement = 50;
	case LLVMInsertElement = 51;
	case LLVMShuffleVector = 52;
	case LLVMExtractValue = 53;
	case LLVMInsertValue = 54;
	case LLVMFreeze = 68;
	case LLVMFence = 55;
	case LLVMAtomicCmpXchg = 56;
	case LLVMAtomicRMW = 57;
	case LLVMResume = 58;
	case LLVMLandingPad = 59;
	case LLVMCleanupRet = 61;
	case LLVMCatchRet = 62;
	case LLVMCatchPad = 63;
	case LLVMCleanupPad = 64;
	case LLVMCatchSwitch = 65;
}

enum LLVMTypeKind {
	case LLVMVoidTypeKind;
	case LLVMHalfTypeKind;
	case LLVMFloatTypeKind;
	case LLVMDoubleTypeKind;
	case LLVMX86_FP80TypeKind;
	case LLVMFP128TypeKind;
	case LLVMPPC_FP128TypeKind;
	case LLVMLabelTypeKind;
	case LLVMIntegerTypeKind;
	case LLVMFunctionTypeKind;
	case LLVMStructTypeKind;
	case LLVMArrayTypeKind;
	case LLVMPointerTypeKind;
	case LLVMVectorTypeKind;
	case LLVMMetadataTypeKind;
	case LLVMX86_MMXTypeKind;
	case LLVMTokenTypeKind;
	case LLVMScalableVectorTypeKind;
	case LLVMBFloatTypeKind;
	case LLVMX86_AMXTypeKind;
	case LLVMTargetExtTypeKind;
}

enum LLVMLinkage {
	case LLVMExternalLinkage;
	case LLVMAvailableExternallyLinkage;
	case LLVMLinkOnceAnyLinkage;
	case LLVMLinkOnceODRLinkage;
	case LLVMLinkOnceODRAutoHideLinkage;
	case LLVMWeakAnyLinkage;
	case LLVMWeakODRLinkage;
	case LLVMAppendingLinkage;
	case LLVMInternalLinkage;
	case LLVMPrivateLinkage;
	case LLVMDLLImportLinkage;
	case LLVMDLLExportLinkage;
	case LLVMExternalWeakLinkage;
	case LLVMGhostLinkage;
	case LLVMCommonLinkage;
	case LLVMLinkerPrivateLinkage;
	case LLVMLinkerPrivateWeakLinkage;
}

enum LLVMVisibility {
	case LLVMDefaultVisibility;
	case LLVMHiddenVisibility;
	case LLVMProtectedVisibility;
}

enum LLVMUnnamedAddr {
	case LLVMNoUnnamedAddr;
	case LLVMLocalUnnamedAddr;
	case LLVMGlobalUnnamedAddr;
}

enum LLVMDLLStorageClass {
	case LLVMDefaultStorageClass = 0;
	case LLVMDLLImportStorageClass = 1;
	case LLVMDLLExportStorageClass = 2;
}

enum LLVMCallConv {
	case LLVMCCallConv = 0;
	case LLVMFastCallConv = 8;
	case LLVMColdCallConv = 9;
	case LLVMGHCCallConv = 10;
	case LLVMHiPECallConv = 11;
	case LLVMWebKitJSCallConv = 12;
	case LLVMAnyRegCallConv = 13;
	case LLVMPreserveMostCallConv = 14;
	case LLVMPreserveAllCallConv = 15;
	case LLVMSwiftCallConv = 16;
	case LLVMCXXFASTTLSCallConv = 17;
	case LLVMX86StdcallCallConv = 64;
	case LLVMX86FastcallCallConv = 65;
	case LLVMARMAPCSCallConv = 66;
	case LLVMARMAAPCSCallConv = 67;
	case LLVMARMAAPCSVFPCallConv = 68;
	case LLVMMSP430INTRCallConv = 69;
	case LLVMX86ThisCallCallConv = 70;
	case LLVMPTXKernelCallConv = 71;
	case LLVMPTXDeviceCallConv = 72;
	case LLVMSPIRFUNCCallConv = 75;
	case LLVMSPIRKERNELCallConv = 76;
	case LLVMIntelOCLBICallConv = 77;
	case LLVMX8664SysVCallConv = 78;
	case LLVMWin64CallConv = 79;
	case LLVMX86VectorCallCallConv = 80;
	case LLVMHHVMCallConv = 81;
	case LLVMHHVMCCallConv = 82;
	case LLVMX86INTRCallConv = 83;
	case LLVMAVRINTRCallConv = 84;
	case LLVMAVRSIGNALCallConv = 85;
	case LLVMAVRBUILTINCallConv = 86;
	case LLVMAMDGPUVSCallConv = 87;
	case LLVMAMDGPUGSCallConv = 88;
	case LLVMAMDGPUPSCallConv = 89;
	case LLVMAMDGPUCSCallConv = 90;
	case LLVMAMDGPUKERNELCallConv = 91;
	case LLVMX86RegCallCallConv = 92;
	case LLVMAMDGPUHSCallConv = 93;
	case LLVMMSP430BUILTINCallConv = 94;
	case LLVMAMDGPULSCallConv = 95;
	case LLVMAMDGPUESCallConv = 96;
}

enum LLVMValueKind {
	case LLVMArgumentValueKind;
	case LLVMBasicBlockValueKind;
	case LLVMMemoryUseValueKind;
	case LLVMMemoryDefValueKind;
	case LLVMMemoryPhiValueKind;
	case LLVMFunctionValueKind;
	case LLVMGlobalAliasValueKind;
	case LLVMGlobalIFuncValueKind;
	case LLVMGlobalVariableValueKind;
	case LLVMBlockAddressValueKind;
	case LLVMConstantExprValueKind;
	case LLVMConstantArrayValueKind;
	case LLVMConstantStructValueKind;
	case LLVMConstantVectorValueKind;
	case LLVMUndefValueValueKind;
	case LLVMConstantAggregateZeroValueKind;
	case LLVMConstantDataArrayValueKind;
	case LLVMConstantDataVectorValueKind;
	case LLVMConstantIntValueKind;
	case LLVMConstantFPValueKind;
	case LLVMConstantPointerNullValueKind;
	case LLVMConstantTokenNoneValueKind;
	case LLVMMetadataAsValueValueKind;
	case LLVMInlineAsmValueKind;
	case LLVMInstructionValueKind;
	case LLVMPoisonValueValueKind;
	case LLVMConstantTargetNoneValueKind;
}

enum LLVMIntPredicate {
	case LLVMIntEQ = 32;
	case LLVMIntNE;
	case LLVMIntUGT;
	case LLVMIntUGE;
	case LLVMIntULT;
	case LLVMIntULE;
	case LLVMIntSGT;
	case LLVMIntSGE;
	case LLVMIntSLT;
	case LLVMIntSLE;
}

enum LLVMRealPredicate {
	case LLVMRealPredicateFalse;
	case LLVMRealOEQ;
	case LLVMRealOGT;
	case LLVMRealOGE;
	case LLVMRealOLT;
	case LLVMRealOLE;
	case LLVMRealONE;
	case LLVMRealORD;
	case LLVMRealUNO;
	case LLVMRealUEQ;
	case LLVMRealUGT;
	case LLVMRealUGE;
	case LLVMRealULT;
	case LLVMRealULE;
	case LLVMRealUNE;
	case LLVMRealPredicateTrue;
}

enum LLVMLandingPadClauseTy {
	case LLVMLandingPadCatch;
	case LLVMLandingPadFilter;
}

enum LLVMThreadLocalMode {
	case LLVMNotThreadLocal = 0;
	case LLVMGeneralDynamicTLSModel;
	case LLVMLocalDynamicTLSModel;
	case LLVMInitialExecTLSModel;
	case LLVMLocalExecTLSModel;
}

enum LLVMAtomicOrdering {
	case LLVMAtomicOrderingNotAtomic = 0;
	case LLVMAtomicOrderingUnordered = 1;
	case LLVMAtomicOrderingMonotonic = 2;
	case LLVMAtomicOrderingAcquire = 4;
	case LLVMAtomicOrderingRelease = 5;
	case LLVMAtomicOrderingAcquireRelease = 6;
	case LLVMAtomicOrderingSequentiallyConsistent = 7;
}

enum LLVMAtomicRMWBinOp {
	case LLVMAtomicRMWBinOpXchg;
	case LLVMAtomicRMWBinOpAdd;
	case LLVMAtomicRMWBinOpSub;
	case LLVMAtomicRMWBinOpAnd;
	case LLVMAtomicRMWBinOpNand;
	case LLVMAtomicRMWBinOpOr;
	case LLVMAtomicRMWBinOpXor;
	case LLVMAtomicRMWBinOpMax;
	case LLVMAtomicRMWBinOpMin;
	case LLVMAtomicRMWBinOpUMax;
	case LLVMAtomicRMWBinOpUMin;
	case LLVMAtomicRMWBinOpFAdd;
	case LLVMAtomicRMWBinOpFSub;
	case LLVMAtomicRMWBinOpFMax;
	case LLVMAtomicRMWBinOpFMin;
}

enum LLVMDiagnosticSeverity {
	case LLVMDSError;
	case LLVMDSWarning;
	case LLVMDSRemark;
	case LLVMDSNote;
}

enum LLVMInlineAsmDialect {
	case LLVMInlineAsmDialectATT;
	case LLVMInlineAsmDialectIntel;
}

enum LLVMModuleFlagBehavior {
	case LLVMModuleFlagBehaviorError;
	case LLVMModuleFlagBehaviorWarning;
	case LLVMModuleFlagBehaviorRequire;
	case LLVMModuleFlagBehaviorOverride;
	case LLVMModuleFlagBehaviorAppend;
	case LLVMModuleFlagBehaviorAppendUnique;
}

enum LLVMVerifierFailureAction {
	case LLVMAbortProcessAction;
	case LLVMPrintMessageAction;
	case LLVMReturnStatusAction;
}

enum LLVMLinkerMode {
	case LLVMLinkerDestroySource = 0;
	case LLVMLinkerPreserveSource_Removed = 1;
}

enum LLVMDIFlags {
	case LLVMDIFlagZero = 0;
	case LLVMDIFlagPrivate = 1;
	case LLVMDIFlagProtected = 2;
	case LLVMDIFlagPublic = 3;
	case LLVMDIFlagFwdDecl = 4;
	case LLVMDIFlagAppleBlock = 8;
	case LLVMDIFlagReservedBit4 = 16;
	case LLVMDIFlagVirtual = 32;
	case LLVMDIFlagArtificial = 64;
	case LLVMDIFlagExplicit = 128;
	case LLVMDIFlagPrototyped = 256;
	case LLVMDIFlagObjcClassComplete = 512;
	case LLVMDIFlagObjectPointer = 1024;
	case LLVMDIFlagVector = 2048;
	case LLVMDIFlagStaticMember = 4096;
	case LLVMDIFlagLValueReference = 8192;
	case LLVMDIFlagRValueReference = 16384;
	case LLVMDIFlagReserved = 32768;
	case LLVMDIFlagSingleInheritance = 65536;
	case LLVMDIFlagMultipleInheritance = 131072;
	case LLVMDIFlagVirtualInheritance = 196608;
	case LLVMDIFlagIntroducedVirtual = 262144;
	case LLVMDIFlagBitField = 524288;
	case LLVMDIFlagNoReturn = 1048576;
	case LLVMDIFlagTypePassByValue = 4194304;
	case LLVMDIFlagTypePassByReference = 8388608;
	case LLVMDIFlagEnumClass = 16777216;
	case LLVMDIFlagFixedEnum = 16777216;
	case LLVMDIFlagThunk = 33554432;
	case LLVMDIFlagNonTrivial = 67108864;
	case LLVMDIFlagBigEndian = 134217728;
	case LLVMDIFlagLittleEndian = 268435456;
	case LLVMDIFlagIndirectVirtualBase = 36;
	case LLVMDIFlagAccessibility = 3;
	case LLVMDIFlagPtrToMemberRep = 196608;
}

enum LLVMDWARFSourceLanguage {
	case LLVMDWARFSourceLanguageC89;
	case LLVMDWARFSourceLanguageC;
	case LLVMDWARFSourceLanguageAda83;
	case LLVMDWARFSourceLanguageC_plus_plus;
	case LLVMDWARFSourceLanguageCobol74;
	case LLVMDWARFSourceLanguageCobol85;
	case LLVMDWARFSourceLanguageFortran77;
	case LLVMDWARFSourceLanguageFortran90;
	case LLVMDWARFSourceLanguagePascal83;
	case LLVMDWARFSourceLanguageModula2;
	case LLVMDWARFSourceLanguageJava;
	case LLVMDWARFSourceLanguageC99;
	case LLVMDWARFSourceLanguageAda95;
	case LLVMDWARFSourceLanguageFortran95;
	case LLVMDWARFSourceLanguagePLI;
	case LLVMDWARFSourceLanguageObjC;
	case LLVMDWARFSourceLanguageObjC_plus_plus;
	case LLVMDWARFSourceLanguageUPC;
	case LLVMDWARFSourceLanguageD;
	case LLVMDWARFSourceLanguagePython;
	case LLVMDWARFSourceLanguageOpenCL;
	case LLVMDWARFSourceLanguageGo;
	case LLVMDWARFSourceLanguageModula3;
	case LLVMDWARFSourceLanguageHaskell;
	case LLVMDWARFSourceLanguageC_plus_plus_03;
	case LLVMDWARFSourceLanguageC_plus_plus_11;
	case LLVMDWARFSourceLanguageOCaml;
	case LLVMDWARFSourceLanguageRust;
	case LLVMDWARFSourceLanguageC11;
	case LLVMDWARFSourceLanguageSwift;
	case LLVMDWARFSourceLanguageJulia;
	case LLVMDWARFSourceLanguageDylan;
	case LLVMDWARFSourceLanguageC_plus_plus_14;
	case LLVMDWARFSourceLanguageFortran03;
	case LLVMDWARFSourceLanguageFortran08;
	case LLVMDWARFSourceLanguageRenderScript;
	case LLVMDWARFSourceLanguageBLISS;
	case LLVMDWARFSourceLanguageKotlin;
	case LLVMDWARFSourceLanguageZig;
	case LLVMDWARFSourceLanguageCrystal;
	case LLVMDWARFSourceLanguageC_plus_plus_17;
	case LLVMDWARFSourceLanguageC_plus_plus_20;
	case LLVMDWARFSourceLanguageC17;
	case LLVMDWARFSourceLanguageFortran18;
	case LLVMDWARFSourceLanguageAda2005;
	case LLVMDWARFSourceLanguageAda2012;
	case LLVMDWARFSourceLanguageMips_Assembler;
	case LLVMDWARFSourceLanguageGOOGLE_RenderScript;
	case LLVMDWARFSourceLanguageBORLAND_Delphi;
}

enum LLVMDWARFEmissionKind {
	case LLVMDWARFEmissionNone = 0;
	case LLVMDWARFEmissionFull;
	case LLVMDWARFEmissionLineTablesOnly;
}

enum LLVMDWARFMacinfoRecordType {
	case LLVMDWARFMacinfoRecordTypeDefine = 1;
	case LLVMDWARFMacinfoRecordTypeMacro = 2;
	case LLVMDWARFMacinfoRecordTypeStartFile = 3;
	case LLVMDWARFMacinfoRecordTypeEndFile = 4;
	case LLVMDWARFMacinfoRecordTypeVendorExt = 255;
}

enum LLVMCodeGenOptLevel {
	case LLVMCodeGenLevelNone;
	case LLVMCodeGenLevelLess;
	case LLVMCodeGenLevelDefault;
	case LLVMCodeGenLevelAggressive;
}

enum LLVMRelocMode {
	case LLVMRelocDefault;
	case LLVMRelocStatic;
	case LLVMRelocPIC;
	case LLVMRelocDynamicNoPic;
	case LLVMRelocROPI;
	case LLVMRelocRWPI;
	case LLVMRelocROPI_RWPI;
}

enum LLVMCodeModel {
	case LLVMCodeModelDefault;
	case LLVMCodeModelJITDefault;
	case LLVMCodeModelTiny;
	case LLVMCodeModelSmall;
	case LLVMCodeModelKernel;
	case LLVMCodeModelMedium;
	case LLVMCodeModelLarge;
}

enum LLVMCodeGenFileType {
	case LLVMAssemblyFile;
	case LLVMObjectFile;
}

func LLVMResetFatalErrorHandler() -> void = extern;
func LLVMEnablePrettyStackTrace() -> void = extern;
func LLVMInitializeCore(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMShutdown() -> void = extern;
func LLVMGetVersion(Major: vptr!<u32>, Minor: vptr!<u32>, Patch: vptr!<u32>) -> void = extern;
func LLVMCreateMessage(Message: cptr!<byte>) -> vptr!<byte> = extern;
func LLVMDisposeMessage(Message: vptr!<byte>) -> void = extern;
func LLVMContextCreate() -> vptr!<LLVMOpaqueContext> = extern;
func LLVMGetGlobalContext() -> vptr!<LLVMOpaqueContext> = extern;
func LLVMContextGetDiagnosticContext(C: vptr!<LLVMOpaqueContext>) -> vptr = extern;
func LLVMContextShouldDiscardValueNames(C: vptr!<LLVMOpaqueContext>) -> i32 = extern;
func LLVMContextSetDiscardValueNames(C: vptr!<LLVMOpaqueContext>, Discard: i32) -> void = extern;
func LLVMContextSetOpaquePointers(C: vptr!<LLVMOpaqueContext>, OpaquePointers: i32) -> void = extern;
func LLVMContextDispose(C: vptr!<LLVMOpaqueContext>) -> void = extern;
func LLVMGetDiagInfoDescription(DI: vptr!<LLVMOpaqueDiagnosticInfo>) -> vptr!<byte> = extern;
func LLVMGetDiagInfoSeverity(DI: vptr!<LLVMOpaqueDiagnosticInfo>) -> LLVMDiagnosticSeverity = extern;
func LLVMGetMDKindIDInContext(C: vptr!<LLVMOpaqueContext>, Name: cptr!<byte>, SLen: u32) -> u32 = extern;
func LLVMGetMDKindID(Name: cptr!<byte>, SLen: u32) -> u32 = extern;
func LLVMGetEnumAttributeKindForName(Name: cptr!<byte>, SLen: uint) -> u32 = extern;
func LLVMGetLastEnumAttributeKind() -> u32 = extern;
func LLVMCreateEnumAttribute(C: vptr!<LLVMOpaqueContext>, KindID: u32, Val: u64) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMGetEnumAttributeKind(A: vptr!<LLVMOpaqueAttributeRef>) -> u32 = extern;
func LLVMGetEnumAttributeValue(A: vptr!<LLVMOpaqueAttributeRef>) -> u64 = extern;
func LLVMCreateTypeAttribute(C: vptr!<LLVMOpaqueContext>, KindID: u32, type_ref: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMGetTypeAttributeValue(A: vptr!<LLVMOpaqueAttributeRef>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMCreateStringAttribute(C: vptr!<LLVMOpaqueContext>, K: cptr!<byte>, KLength: u32, V: cptr!<byte>, VLength: u32) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMGetStringAttributeKind(A: vptr!<LLVMOpaqueAttributeRef>, Length: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMGetStringAttributeValue(A: vptr!<LLVMOpaqueAttributeRef>, Length: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMIsEnumAttribute(A: vptr!<LLVMOpaqueAttributeRef>) -> i32 = extern;
func LLVMIsStringAttribute(A: vptr!<LLVMOpaqueAttributeRef>) -> i32 = extern;
func LLVMIsTypeAttribute(A: vptr!<LLVMOpaqueAttributeRef>) -> i32 = extern;
func LLVMGetTypeByName2(C: vptr!<LLVMOpaqueContext>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMModuleCreateWithName(ModuleID: cptr!<byte>) -> vptr!<LLVMOpaqueModule> = extern;
func LLVMModuleCreateWithNameInContext(ModuleID: cptr!<byte>, C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueModule> = extern;
func LLVMCloneModule(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueModule> = extern;
func LLVMDisposeModule(M: vptr!<LLVMOpaqueModule>) -> void = extern;
func LLVMGetModuleIdentifier(M: vptr!<LLVMOpaqueModule>, Len: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMSetModuleIdentifier(M: vptr!<LLVMOpaqueModule>, Ident: cptr!<byte>, Len: uint) -> void = extern;
func LLVMGetSourceFileName(M: vptr!<LLVMOpaqueModule>, Len: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMSetSourceFileName(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, Len: uint) -> void = extern;
func LLVMGetDataLayoutStr(M: vptr!<LLVMOpaqueModule>) -> cptr!<byte> = extern;
func LLVMGetDataLayout(M: vptr!<LLVMOpaqueModule>) -> cptr!<byte> = extern;
func LLVMSetDataLayout(M: vptr!<LLVMOpaqueModule>, DataLayoutStr: cptr!<byte>) -> void = extern;
func LLVMGetTarget(M: vptr!<LLVMOpaqueModule>) -> cptr!<byte> = extern;
func LLVMSetTarget(M: vptr!<LLVMOpaqueModule>, Triple: cptr!<byte>) -> void = extern;
func LLVMCopyModuleFlagsMetadata(M: vptr!<LLVMOpaqueModule>, Len: vptr!<uint>) -> vptr!<LLVMOpaqueModuleFlagEntry> = extern;
func LLVMDisposeModuleFlagsMetadata(Entries: vptr!<LLVMOpaqueModuleFlagEntry>) -> void = extern;
func LLVMModuleFlagEntriesGetFlagBehavior(Entries: vptr!<LLVMOpaqueModuleFlagEntry>, Index: u32) -> LLVMModuleFlagBehavior = extern;
func LLVMModuleFlagEntriesGetKey(Entries: vptr!<LLVMOpaqueModuleFlagEntry>, Index: u32, Len: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMModuleFlagEntriesGetMetadata(Entries: vptr!<LLVMOpaqueModuleFlagEntry>, Index: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMGetModuleFlag(M: vptr!<LLVMOpaqueModule>, Key: cptr!<byte>, KeyLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMAddModuleFlag(M: vptr!<LLVMOpaqueModule>, Behavior: LLVMModuleFlagBehavior, Key: cptr!<byte>, KeyLen: uint, Val: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMDumpModule(M: vptr!<LLVMOpaqueModule>) -> void = extern;
func LLVMPrintModuleToFile(M: vptr!<LLVMOpaqueModule>, Filename: cptr!<byte>, ErrorMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMPrintModuleToString(M: vptr!<LLVMOpaqueModule>) -> vptr!<byte> = extern;
func LLVMGetModuleInlineAsm(M: vptr!<LLVMOpaqueModule>, Len: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMSetModuleInlineAsm2(M: vptr!<LLVMOpaqueModule>, Asm: cptr!<byte>, Len: uint) -> void = extern;
func LLVMAppendModuleInlineAsm(M: vptr!<LLVMOpaqueModule>, Asm: cptr!<byte>, Len: uint) -> void = extern;
func LLVMGetInlineAsm(Ty: vptr!<LLVMOpaqueType>, AsmString: vptr!<byte>, AsmStringSize: uint, Constraints: vptr!<byte>, ConstraintsSize: uint, HasSideEffects: i32, IsAlignStack: i32, Dialect: LLVMInlineAsmDialect, CanThrow: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetModuleContext(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueContext> = extern;
func LLVMGetTypeByName(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetFirstNamedMetadata(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueNamedMDNode> = extern;
func LLVMGetLastNamedMetadata(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueNamedMDNode> = extern;
func LLVMGetNextNamedMetadata(NamedMDNode: vptr!<LLVMOpaqueNamedMDNode>) -> vptr!<LLVMOpaqueNamedMDNode> = extern;
func LLVMGetPreviousNamedMetadata(NamedMDNode: vptr!<LLVMOpaqueNamedMDNode>) -> vptr!<LLVMOpaqueNamedMDNode> = extern;
func LLVMGetNamedMetadata(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, NameLen: uint) -> vptr!<LLVMOpaqueNamedMDNode> = extern;
func LLVMGetOrInsertNamedMetadata(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, NameLen: uint) -> vptr!<LLVMOpaqueNamedMDNode> = extern;
func LLVMGetNamedMetadataName(NamedMD: vptr!<LLVMOpaqueNamedMDNode>, NameLen: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMGetNamedMetadataNumOperands(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>) -> u32 = extern;
func LLVMGetNamedMetadataOperands(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, Dest: vptr!<vptr!<LLVMOpaqueValue>>) -> void = extern;
func LLVMAddNamedMetadataOperand(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, Val: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetDebugLocDirectory(Val: vptr!<LLVMOpaqueValue>, Length: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMGetDebugLocFilename(Val: vptr!<LLVMOpaqueValue>, Length: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMGetDebugLocLine(Val: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetDebugLocColumn(Val: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMAddFunction(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, FunctionTy: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNamedFunction(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetFirstFunction(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetLastFunction(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNextFunction(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPreviousFunction(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetModuleInlineAsm(M: vptr!<LLVMOpaqueModule>, Asm: cptr!<byte>) -> void = extern;
func LLVMGetTypeKind(Ty: vptr!<LLVMOpaqueType>) -> LLVMTypeKind = extern;
func LLVMTypeIsSized(Ty: vptr!<LLVMOpaqueType>) -> i32 = extern;
func LLVMGetTypeContext(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueContext> = extern;
func LLVMDumpType(Val: vptr!<LLVMOpaqueType>) -> void = extern;
func LLVMPrintTypeToString(Val: vptr!<LLVMOpaqueType>) -> vptr!<byte> = extern;
func LLVMInt1TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt8TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt16TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt32TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt64TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt128TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIntTypeInContext(C: vptr!<LLVMOpaqueContext>, NumBits: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt1Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt8Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt16Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt32Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt64Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMInt128Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMIntType(NumBits: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetIntTypeWidth(IntegerTy: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMHalfTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMBFloatTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMFloatTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMDoubleTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMX86FP80TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMFP128TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMPPCFP128TypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMHalfType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMBFloatType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMFloatType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMDoubleType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMX86FP80Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMFP128Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMPPCFP128Type() -> vptr!<LLVMOpaqueType> = extern;
func LLVMFunctionType(ReturnType: vptr!<LLVMOpaqueType>, ParamTypes: vptr!<vptr!<LLVMOpaqueType>>, ParamCount: u32, IsVarArg: i32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIsFunctionVarArg(FunctionTy: vptr!<LLVMOpaqueType>) -> i32 = extern;
func LLVMGetReturnType(FunctionTy: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMCountParamTypes(FunctionTy: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMGetParamTypes(FunctionTy: vptr!<LLVMOpaqueType>, Dest: vptr!<vptr!<LLVMOpaqueType>>) -> void = extern;
func LLVMStructTypeInContext(C: vptr!<LLVMOpaqueContext>, ElementTypes: vptr!<vptr!<LLVMOpaqueType>>, ElementCount: u32, Packed: i32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMStructType(ElementTypes: vptr!<vptr!<LLVMOpaqueType>>, ElementCount: u32, Packed: i32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMStructCreateNamed(C: vptr!<LLVMOpaqueContext>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetStructName(Ty: vptr!<LLVMOpaqueType>) -> cptr!<byte> = extern;
func LLVMStructSetBody(StructTy: vptr!<LLVMOpaqueType>, ElementTypes: vptr!<vptr!<LLVMOpaqueType>>, ElementCount: u32, Packed: i32) -> void = extern;
func LLVMCountStructElementTypes(StructTy: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMGetStructElementTypes(StructTy: vptr!<LLVMOpaqueType>, Dest: vptr!<vptr!<LLVMOpaqueType>>) -> void = extern;
func LLVMStructGetTypeAtIndex(StructTy: vptr!<LLVMOpaqueType>, i: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIsPackedStruct(StructTy: vptr!<LLVMOpaqueType>) -> i32 = extern;
func LLVMIsOpaqueStruct(StructTy: vptr!<LLVMOpaqueType>) -> i32 = extern;
func LLVMIsLiteralStruct(StructTy: vptr!<LLVMOpaqueType>) -> i32 = extern;
func LLVMGetElementType(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetSubtypes(Tp: vptr!<LLVMOpaqueType>, Arr: vptr!<vptr!<LLVMOpaqueType>>) -> void = extern;
func LLVMGetNumContainedTypes(Tp: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMArrayType(ElementType: vptr!<LLVMOpaqueType>, ElementCount: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetArrayLength(ArrayTy: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMPointerType(ElementType: vptr!<LLVMOpaqueType>, AddressSpace: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMPointerTypeIsOpaque(Ty: vptr!<LLVMOpaqueType>) -> i32 = extern;
func LLVMPointerTypeInContext(C: vptr!<LLVMOpaqueContext>, AddressSpace: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetPointerAddressSpace(PointerTy: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMVectorType(ElementType: vptr!<LLVMOpaqueType>, ElementCount: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMScalableVectorType(ElementType: vptr!<LLVMOpaqueType>, ElementCount: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetVectorSize(VectorTy: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMVoidTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMLabelTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMX86MMXTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMX86AMXTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMTokenTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMMetadataTypeInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMVoidType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMLabelType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMX86MMXType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMX86AMXType() -> vptr!<LLVMOpaqueType> = extern;
func LLVMTargetExtTypeInContext(C: vptr!<LLVMOpaqueContext>, Name: cptr!<byte>, TypeParams: vptr!<vptr!<LLVMOpaqueType>>, TypeParamCount: u32, IntParams: vptr!<u32>, IntParamCount: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMTypeOf(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetValueKind(Val: vptr!<LLVMOpaqueValue>) -> LLVMValueKind = extern;
func LLVMGetValueName2(Val: vptr!<LLVMOpaqueValue>, Length: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMSetValueName2(Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>, NameLen: uint) -> void = extern;
func LLVMDumpValue(Val: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMPrintValueToString(Val: vptr!<LLVMOpaqueValue>) -> vptr!<byte> = extern;
func LLVMReplaceAllUsesWith(OldVal: vptr!<LLVMOpaqueValue>, NewVal: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMIsConstant(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMIsUndef(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMIsPoison(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMIsAArgument(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsABasicBlock(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAInlineAsm(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAUser(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstant(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsABlockAddress(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantAggregateZero(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantArray(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantDataSequential(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantDataArray(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantDataVector(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantExpr(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantFP(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantInt(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantPointerNull(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantStruct(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantTokenNone(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAConstantVector(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAGlobalValue(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAGlobalAlias(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAGlobalObject(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFunction(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAGlobalVariable(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAGlobalIFunc(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAUndefValue(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAPoisonValue(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAInstruction(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAUnaryOperator(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsABinaryOperator(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACallInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAIntrinsicInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsADbgInfoIntrinsic(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsADbgVariableIntrinsic(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsADbgDeclareInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsADbgLabelInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAMemIntrinsic(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAMemCpyInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAMemMoveInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAMemSetInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACmpInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFCmpInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAICmpInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAExtractElementInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAGetElementPtrInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAInsertElementInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAInsertValueInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsALandingPadInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAPHINode(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsASelectInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAShuffleVectorInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAStoreInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsABranchInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAIndirectBrInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAInvokeInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAReturnInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsASwitchInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAUnreachableInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAResumeInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACleanupReturnInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACatchReturnInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACatchSwitchInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACallBrInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFuncletPadInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACatchPadInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACleanupPadInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAUnaryInstruction(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAAllocaInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsACastInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAAddrSpaceCastInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsABitCastInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFPExtInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFPToSIInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFPToUIInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFPTruncInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAIntToPtrInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAPtrToIntInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsASExtInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsASIToFPInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsATruncInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAUIToFPInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAZExtInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAExtractValueInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsALoadInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAVAArgInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFreezeInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAAtomicCmpXchgInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAAtomicRMWInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAFenceInst(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAMDNode(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsAMDString(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetValueName(Val: vptr!<LLVMOpaqueValue>) -> cptr!<byte> = extern;
func LLVMSetValueName(Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> void = extern;
func LLVMGetFirstUse(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueUse> = extern;
func LLVMGetNextUse(U: vptr!<LLVMOpaqueUse>) -> vptr!<LLVMOpaqueUse> = extern;
func LLVMGetUser(U: vptr!<LLVMOpaqueUse>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetUsedValue(U: vptr!<LLVMOpaqueUse>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetOperand(Val: vptr!<LLVMOpaqueValue>, Index: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetOperandUse(Val: vptr!<LLVMOpaqueValue>, Index: u32) -> vptr!<LLVMOpaqueUse> = extern;
func LLVMSetOperand(User: vptr!<LLVMOpaqueValue>, Index: u32, Val: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetNumOperands(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMConstNull(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstAllOnes(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetUndef(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPoison(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsNull(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMConstPointerNull(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstInt(IntTy: vptr!<LLVMOpaqueType>, N: u32, SignExtend: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstIntOfArbitraryPrecision(IntTy: vptr!<LLVMOpaqueType>, NumWords: u32, Words: cptr!<u64>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstIntOfString(IntTy: vptr!<LLVMOpaqueType>, Text: cptr!<byte>, Radix: u8) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstIntOfStringAndSize(IntTy: vptr!<LLVMOpaqueType>, Text: cptr!<byte>, SLen: u32, Radix: u8) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstReal(RealTy: vptr!<LLVMOpaqueType>, N: f64) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstRealOfString(RealTy: vptr!<LLVMOpaqueType>, Text: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstRealOfStringAndSize(RealTy: vptr!<LLVMOpaqueType>, Text: cptr!<byte>, SLen: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstIntGetZExtValue(ConstantVal: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMConstIntGetSExtValue(ConstantVal: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMConstRealGetDouble(ConstantVal: vptr!<LLVMOpaqueValue>, losesInfo: vptr!<i32>) -> f64 = extern;
func LLVMConstStringInContext(C: vptr!<LLVMOpaqueContext>, Str: cptr!<byte>, Length: u32, DontNullTerminate: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstString(Str: cptr!<byte>, Length: u32, DontNullTerminate: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsConstantString(c: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMGetAsString(c: vptr!<LLVMOpaqueValue>, Length: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMConstStructInContext(C: vptr!<LLVMOpaqueContext>, ConstantVals: vptr!<vptr!<LLVMOpaqueValue>>, Count: u32, Packed: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstStruct(ConstantVals: vptr!<vptr!<LLVMOpaqueValue>>, Count: u32, Packed: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstArray(ElementTy: vptr!<LLVMOpaqueType>, ConstantVals: vptr!<vptr!<LLVMOpaqueValue>>, Length: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNamedStruct(StructTy: vptr!<LLVMOpaqueType>, ConstantVals: vptr!<vptr!<LLVMOpaqueValue>>, Count: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetAggregateElement(C: vptr!<LLVMOpaqueValue>, Idx: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetElementAsConstant(C: vptr!<LLVMOpaqueValue>, idx: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstVector(ScalarConstantVals: vptr!<vptr!<LLVMOpaqueValue>>, Size: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetConstOpcode(ConstantVal: vptr!<LLVMOpaqueValue>) -> LLVMOpcode = extern;
func LLVMAlignOf(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSizeOf(Ty: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNeg(ConstantVal: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNSWNeg(ConstantVal: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNUWNeg(ConstantVal: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNot(ConstantVal: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstAdd(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNSWAdd(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNUWAdd(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstSub(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNSWSub(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNUWSub(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstMul(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNSWMul(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstNUWMul(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstAnd(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstOr(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstXor(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstICmp(Predicate: LLVMIntPredicate, LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstFCmp(Predicate: LLVMRealPredicate, LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstShl(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstLShr(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstAShr(LHSConstant: vptr!<LLVMOpaqueValue>, RHSConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstGEP2(Ty: vptr!<LLVMOpaqueType>, ConstantVal: vptr!<LLVMOpaqueValue>, ConstantIndices: vptr!<vptr!<LLVMOpaqueValue>>, NumIndices: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstInBoundsGEP2(Ty: vptr!<LLVMOpaqueType>, ConstantVal: vptr!<LLVMOpaqueValue>, ConstantIndices: vptr!<vptr!<LLVMOpaqueValue>>, NumIndices: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstTrunc(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstSExt(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstZExt(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstFPTrunc(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstFPExt(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstUIToFP(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstSIToFP(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstFPToUI(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstFPToSI(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstPtrToInt(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstIntToPtr(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstBitCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstAddrSpaceCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstZExtOrBitCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstSExtOrBitCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstTruncOrBitCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstPointerCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstIntCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>, isSigned: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstFPCast(ConstantVal: vptr!<LLVMOpaqueValue>, ToType: vptr!<LLVMOpaqueType>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstSelect(ConstantCondition: vptr!<LLVMOpaqueValue>, ConstantIfTrue: vptr!<LLVMOpaqueValue>, ConstantIfFalse: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstExtractElement(VectorConstant: vptr!<LLVMOpaqueValue>, IndexConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstInsertElement(VectorConstant: vptr!<LLVMOpaqueValue>, ElementValueConstant: vptr!<LLVMOpaqueValue>, IndexConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstShuffleVector(VectorAConstant: vptr!<LLVMOpaqueValue>, VectorBConstant: vptr!<LLVMOpaqueValue>, MaskConstant: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBlockAddress(F: vptr!<LLVMOpaqueValue>, BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMConstInlineAsm(Ty: vptr!<LLVMOpaqueType>, AsmString: cptr!<byte>, Constraints: cptr!<byte>, HasSideEffects: i32, IsAlignStack: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetGlobalParent(Global: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueModule> = extern;
func LLVMIsDeclaration(Global: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMGetLinkage(Global: vptr!<LLVMOpaqueValue>) -> LLVMLinkage = extern;
func LLVMSetLinkage(Global: vptr!<LLVMOpaqueValue>, Linkage: LLVMLinkage) -> void = extern;
func LLVMGetSection(Global: vptr!<LLVMOpaqueValue>) -> cptr!<byte> = extern;
func LLVMSetSection(Global: vptr!<LLVMOpaqueValue>, Section: cptr!<byte>) -> void = extern;
func LLVMGetVisibility(Global: vptr!<LLVMOpaqueValue>) -> LLVMVisibility = extern;
func LLVMSetVisibility(Global: vptr!<LLVMOpaqueValue>, Viz: LLVMVisibility) -> void = extern;
func LLVMGetDLLStorageClass(Global: vptr!<LLVMOpaqueValue>) -> LLVMDLLStorageClass = extern;
func LLVMSetDLLStorageClass(Global: vptr!<LLVMOpaqueValue>, Class: LLVMDLLStorageClass) -> void = extern;
func LLVMGetUnnamedAddress(Global: vptr!<LLVMOpaqueValue>) -> LLVMUnnamedAddr = extern;
func LLVMSetUnnamedAddress(Global: vptr!<LLVMOpaqueValue>, UnnamedAddr: LLVMUnnamedAddr) -> void = extern;
func LLVMGlobalGetValueType(Global: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMHasUnnamedAddr(Global: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetUnnamedAddr(Global: vptr!<LLVMOpaqueValue>, HasUnnamedAddr: i32) -> void = extern;
func LLVMGetAlignment(V: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMSetAlignment(V: vptr!<LLVMOpaqueValue>, Bytes: u32) -> void = extern;
func LLVMGlobalSetMetadata(Global: vptr!<LLVMOpaqueValue>, Kind: u32, MD: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMGlobalEraseMetadata(Global: vptr!<LLVMOpaqueValue>, Kind: u32) -> void = extern;
func LLVMGlobalClearMetadata(Global: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGlobalCopyAllMetadata(Value: vptr!<LLVMOpaqueValue>, NumEntries: vptr!<uint>) -> vptr!<LLVMOpaqueValueMetadataEntry> = extern;
func LLVMDisposeValueMetadataEntries(Entries: vptr!<LLVMOpaqueValueMetadataEntry>) -> void = extern;
func LLVMValueMetadataEntriesGetKind(Entries: vptr!<LLVMOpaqueValueMetadataEntry>, Index: u32) -> u32 = extern;
func LLVMValueMetadataEntriesGetMetadata(Entries: vptr!<LLVMOpaqueValueMetadataEntry>, Index: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMAddGlobal(M: vptr!<LLVMOpaqueModule>, Ty: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMAddGlobalInAddressSpace(M: vptr!<LLVMOpaqueModule>, Ty: vptr!<LLVMOpaqueType>, Name: cptr!<byte>, AddressSpace: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNamedGlobal(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetFirstGlobal(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetLastGlobal(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNextGlobal(GlobalVar: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPreviousGlobal(GlobalVar: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMDeleteGlobal(GlobalVar: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetInitializer(GlobalVar: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetInitializer(GlobalVar: vptr!<LLVMOpaqueValue>, ConstantVal: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMIsThreadLocal(GlobalVar: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetThreadLocal(GlobalVar: vptr!<LLVMOpaqueValue>, IsThreadLocal: i32) -> void = extern;
func LLVMIsGlobalConstant(GlobalVar: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetGlobalConstant(GlobalVar: vptr!<LLVMOpaqueValue>, IsConstant: i32) -> void = extern;
func LLVMGetThreadLocalMode(GlobalVar: vptr!<LLVMOpaqueValue>) -> LLVMThreadLocalMode = extern;
func LLVMSetThreadLocalMode(GlobalVar: vptr!<LLVMOpaqueValue>, Mode: LLVMThreadLocalMode) -> void = extern;
func LLVMIsExternallyInitialized(GlobalVar: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetExternallyInitialized(GlobalVar: vptr!<LLVMOpaqueValue>, IsExtInit: i32) -> void = extern;
func LLVMAddAlias2(M: vptr!<LLVMOpaqueModule>, ValueTy: vptr!<LLVMOpaqueType>, AddrSpace: u32, Aliasee: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNamedGlobalAlias(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, NameLen: uint) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetFirstGlobalAlias(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetLastGlobalAlias(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNextGlobalAlias(GA: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPreviousGlobalAlias(GA: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMAliasGetAliasee(Alias: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMAliasSetAliasee(Alias: vptr!<LLVMOpaqueValue>, Aliasee: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMDeleteFunction(Fn: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMHasPersonalityFn(Fn: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMGetPersonalityFn(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetPersonalityFn(Fn: vptr!<LLVMOpaqueValue>, PersonalityFn: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMLookupIntrinsicID(Name: cptr!<byte>, NameLen: uint) -> u32 = extern;
func LLVMGetIntrinsicID(Fn: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetIntrinsicDeclaration(Mod: vptr!<LLVMOpaqueModule>, ID: u32, ParamTypes: vptr!<vptr!<LLVMOpaqueType>>, ParamCount: uint) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIntrinsicGetType(Ctx: vptr!<LLVMOpaqueContext>, ID: u32, ParamTypes: vptr!<vptr!<LLVMOpaqueType>>, ParamCount: uint) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIntrinsicGetName(ID: u32, NameLength: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMIntrinsicCopyOverloadedName(ID: u32, ParamTypes: vptr!<vptr!<LLVMOpaqueType>>, ParamCount: uint, NameLength: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMIntrinsicCopyOverloadedName2(Mod: vptr!<LLVMOpaqueModule>, ID: u32, ParamTypes: vptr!<vptr!<LLVMOpaqueType>>, ParamCount: uint, NameLength: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMIntrinsicIsOverloaded(ID: u32) -> i32 = extern;
func LLVMGetFunctionCallConv(Fn: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMSetFunctionCallConv(Fn: vptr!<LLVMOpaqueValue>, CC: u32) -> void = extern;
func LLVMGetGC(Fn: vptr!<LLVMOpaqueValue>) -> cptr!<byte> = extern;
func LLVMSetGC(Fn: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> void = extern;
func LLVMAddAttributeAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32, A: vptr!<LLVMOpaqueAttributeRef>) -> void = extern;
func LLVMGetAttributeCountAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32) -> u32 = extern;
func LLVMGetAttributesAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32, Attrs: vptr!<vptr!<LLVMOpaqueAttributeRef>>) -> void = extern;
func LLVMGetEnumAttributeAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32, KindID: u32) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMGetStringAttributeAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32, K: cptr!<byte>, KLen: u32) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMRemoveEnumAttributeAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32, KindID: u32) -> void = extern;
func LLVMRemoveStringAttributeAtIndex(F: vptr!<LLVMOpaqueValue>, Idx: u32, K: cptr!<byte>, KLen: u32) -> void = extern;
func LLVMAddTargetDependentFunctionAttr(Fn: vptr!<LLVMOpaqueValue>, A: cptr!<byte>, V: cptr!<byte>) -> void = extern;
func LLVMCountParams(Fn: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetParams(Fn: vptr!<LLVMOpaqueValue>, Params: vptr!<vptr!<LLVMOpaqueValue>>) -> void = extern;
func LLVMGetParam(Fn: vptr!<LLVMOpaqueValue>, Index: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetParamParent(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetFirstParam(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetLastParam(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNextParam(Arg: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPreviousParam(Arg: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetParamAlignment(Arg: vptr!<LLVMOpaqueValue>, Align: u32) -> void = extern;
func LLVMAddGlobalIFunc(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, NameLen: uint, Ty: vptr!<LLVMOpaqueType>, AddrSpace: u32, Resolver: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNamedGlobalIFunc(M: vptr!<LLVMOpaqueModule>, Name: cptr!<byte>, NameLen: uint) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetFirstGlobalIFunc(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetLastGlobalIFunc(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNextGlobalIFunc(IFunc: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPreviousGlobalIFunc(IFunc: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetGlobalIFuncResolver(IFunc: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetGlobalIFuncResolver(IFunc: vptr!<LLVMOpaqueValue>, Resolver: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMEraseGlobalIFunc(IFunc: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMRemoveGlobalIFunc(IFunc: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMMDStringInContext2(C: vptr!<LLVMOpaqueContext>, Str: cptr!<byte>, SLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMMDNodeInContext2(C: vptr!<LLVMOpaqueContext>, MDs: vptr!<vptr!<LLVMOpaqueMetadata>>, Count: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMMetadataAsValue(C: vptr!<LLVMOpaqueContext>, MD: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMValueAsMetadata(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMGetMDString(V: vptr!<LLVMOpaqueValue>, Length: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMGetMDNodeNumOperands(V: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetMDNodeOperands(V: vptr!<LLVMOpaqueValue>, Dest: vptr!<vptr!<LLVMOpaqueValue>>) -> void = extern;
func LLVMMDStringInContext(C: vptr!<LLVMOpaqueContext>, Str: cptr!<byte>, SLen: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMMDString(Str: cptr!<byte>, SLen: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMMDNodeInContext(C: vptr!<LLVMOpaqueContext>, Vals: vptr!<vptr!<LLVMOpaqueValue>>, Count: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMMDNode(Vals: vptr!<vptr!<LLVMOpaqueValue>>, Count: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBasicBlockAsValue(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMValueIsBasicBlock(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMValueAsBasicBlock(Val: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetBasicBlockName(BB: vptr!<LLVMOpaqueBasicBlock>) -> cptr!<byte> = extern;
func LLVMGetBasicBlockParent(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetBasicBlockTerminator(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMCountBasicBlocks(Fn: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetBasicBlocks(Fn: vptr!<LLVMOpaqueValue>, BasicBlocks: vptr!<vptr!<LLVMOpaqueBasicBlock>>) -> void = extern;
func LLVMGetFirstBasicBlock(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetLastBasicBlock(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetNextBasicBlock(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetPreviousBasicBlock(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetEntryBasicBlock(Fn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: vptr!<LLVMOpaqueBuilder>, BB: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMAppendExistingBasicBlock(Fn: vptr!<LLVMOpaqueValue>, BB: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMCreateBasicBlockInContext(C: vptr!<LLVMOpaqueContext>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMAppendBasicBlockInContext(C: vptr!<LLVMOpaqueContext>, Fn: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMAppendBasicBlock(Fn: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMInsertBasicBlockInContext(C: vptr!<LLVMOpaqueContext>, BB: vptr!<LLVMOpaqueBasicBlock>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMInsertBasicBlock(InsertBeforeBB: vptr!<LLVMOpaqueBasicBlock>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMDeleteBasicBlock(BB: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMRemoveBasicBlockFromParent(BB: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMMoveBasicBlockBefore(BB: vptr!<LLVMOpaqueBasicBlock>, MovePos: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMMoveBasicBlockAfter(BB: vptr!<LLVMOpaqueBasicBlock>, MovePos: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMGetFirstInstruction(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetLastInstruction(BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMHasMetadata(Val: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMGetMetadata(Val: vptr!<LLVMOpaqueValue>, KindID: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetMetadata(Val: vptr!<LLVMOpaqueValue>, KindID: u32, Node: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: vptr!<LLVMOpaqueValue>, NumEntries: vptr!<uint>) -> vptr!<LLVMOpaqueValueMetadataEntry> = extern;
func LLVMGetInstructionParent(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetNextInstruction(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetPreviousInstruction(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMInstructionRemoveFromParent(Inst: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMInstructionEraseFromParent(Inst: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMDeleteInstruction(Inst: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetInstructionOpcode(Inst: vptr!<LLVMOpaqueValue>) -> LLVMOpcode = extern;
func LLVMGetICmpPredicate(Inst: vptr!<LLVMOpaqueValue>) -> LLVMIntPredicate = extern;
func LLVMGetFCmpPredicate(Inst: vptr!<LLVMOpaqueValue>) -> LLVMRealPredicate = extern;
func LLVMInstructionClone(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsATerminatorInst(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNumArgOperands(Instr: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMSetInstructionCallConv(Instr: vptr!<LLVMOpaqueValue>, CC: u32) -> void = extern;
func LLVMGetInstructionCallConv(Instr: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMSetInstrParamAlignment(Instr: vptr!<LLVMOpaqueValue>, Idx: u32, Align: u32) -> void = extern;
func LLVMAddCallSiteAttribute(C: vptr!<LLVMOpaqueValue>, Idx: u32, A: vptr!<LLVMOpaqueAttributeRef>) -> void = extern;
func LLVMGetCallSiteAttributeCount(C: vptr!<LLVMOpaqueValue>, Idx: u32) -> u32 = extern;
func LLVMGetCallSiteAttributes(C: vptr!<LLVMOpaqueValue>, Idx: u32, Attrs: vptr!<vptr!<LLVMOpaqueAttributeRef>>) -> void = extern;
func LLVMGetCallSiteEnumAttribute(C: vptr!<LLVMOpaqueValue>, Idx: u32, KindID: u32) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMGetCallSiteStringAttribute(C: vptr!<LLVMOpaqueValue>, Idx: u32, K: cptr!<byte>, KLen: u32) -> vptr!<LLVMOpaqueAttributeRef> = extern;
func LLVMRemoveCallSiteEnumAttribute(C: vptr!<LLVMOpaqueValue>, Idx: u32, KindID: u32) -> void = extern;
func LLVMRemoveCallSiteStringAttribute(C: vptr!<LLVMOpaqueValue>, Idx: u32, K: cptr!<byte>, KLen: u32) -> void = extern;
func LLVMGetCalledFunctionType(C: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMGetCalledValue(Instr: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMIsTailCall(CallInst: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetTailCall(CallInst: vptr!<LLVMOpaqueValue>, IsTailCall: i32) -> void = extern;
func LLVMGetNormalDest(InvokeInst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetUnwindDest(InvokeInst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMSetNormalDest(InvokeInst: vptr!<LLVMOpaqueValue>, B: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMSetUnwindDest(InvokeInst: vptr!<LLVMOpaqueValue>, B: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMGetNumSuccessors(Term: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetSuccessor(Term: vptr!<LLVMOpaqueValue>, i: u32) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMSetSuccessor(Term: vptr!<LLVMOpaqueValue>, i: u32, block: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMIsConditional(Branch: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMGetCondition(Branch: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetCondition(Branch: vptr!<LLVMOpaqueValue>, Cond: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetSwitchDefaultDest(SwitchInstr: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetAllocatedType(Alloca: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIsInBounds(GEP: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetIsInBounds(GEP: vptr!<LLVMOpaqueValue>, InBounds: i32) -> void = extern;
func LLVMGetGEPSourceElementType(GEP: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMAddIncoming(PhiNode: vptr!<LLVMOpaqueValue>, IncomingValues: vptr!<vptr!<LLVMOpaqueValue>>, IncomingBlocks: vptr!<vptr!<LLVMOpaqueBasicBlock>>, Count: u32) -> void = extern;
func LLVMCountIncoming(PhiNode: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetIncomingValue(PhiNode: vptr!<LLVMOpaqueValue>, Index: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetIncomingBlock(PhiNode: vptr!<LLVMOpaqueValue>, Index: u32) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMGetNumIndices(Inst: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetIndices(Inst: vptr!<LLVMOpaqueValue>) -> cptr!<u32> = extern;
func LLVMCreateBuilderInContext(C: vptr!<LLVMOpaqueContext>) -> vptr!<LLVMOpaqueBuilder> = extern;
func LLVMCreateBuilder() -> vptr!<LLVMOpaqueBuilder> = extern;
func LLVMPositionBuilder(Builder: vptr!<LLVMOpaqueBuilder>, Block: vptr!<LLVMOpaqueBasicBlock>, Instr: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMPositionBuilderBefore(Builder: vptr!<LLVMOpaqueBuilder>, Instr: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMPositionBuilderAtEnd(Builder: vptr!<LLVMOpaqueBuilder>, Block: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMGetInsertBlock(Builder: vptr!<LLVMOpaqueBuilder>) -> vptr!<LLVMOpaqueBasicBlock> = extern;
func LLVMClearInsertionPosition(Builder: vptr!<LLVMOpaqueBuilder>) -> void = extern;
func LLVMInsertIntoBuilder(Builder: vptr!<LLVMOpaqueBuilder>, Instr: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMInsertIntoBuilderWithName(Builder: vptr!<LLVMOpaqueBuilder>, Instr: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> void = extern;
func LLVMDisposeBuilder(Builder: vptr!<LLVMOpaqueBuilder>) -> void = extern;
func LLVMGetCurrentDebugLocation2(Builder: vptr!<LLVMOpaqueBuilder>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMSetCurrentDebugLocation2(Builder: vptr!<LLVMOpaqueBuilder>, Loc: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMSetInstDebugLocation(Builder: vptr!<LLVMOpaqueBuilder>, Inst: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMAddMetadataToInst(Builder: vptr!<LLVMOpaqueBuilder>, Inst: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMBuilderGetDefaultFPMathTag(Builder: vptr!<LLVMOpaqueBuilder>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMBuilderSetDefaultFPMathTag(Builder: vptr!<LLVMOpaqueBuilder>, FPMathTag: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMSetCurrentDebugLocation(Builder: vptr!<LLVMOpaqueBuilder>, L: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetCurrentDebugLocation(Builder: vptr!<LLVMOpaqueBuilder>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildRetVoid(_: vptr!<LLVMOpaqueBuilder>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildRet(_: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAggregateRet(_: vptr!<LLVMOpaqueBuilder>, RetVals: vptr!<vptr!<LLVMOpaqueValue>>, N: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildBr(_: vptr!<LLVMOpaqueBuilder>, Dest: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCondBr(_: vptr!<LLVMOpaqueBuilder>, If: vptr!<LLVMOpaqueValue>, Then: vptr!<LLVMOpaqueBasicBlock>, Else: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSwitch(_: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>, Else: vptr!<LLVMOpaqueBasicBlock>, NumCases: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildIndirectBr(B: vptr!<LLVMOpaqueBuilder>, Addr: vptr!<LLVMOpaqueValue>, NumDests: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildInvoke2(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Fn: vptr!<LLVMOpaqueValue>, Args: vptr!<vptr!<LLVMOpaqueValue>>, NumArgs: u32, Then: vptr!<LLVMOpaqueBasicBlock>, Catch: vptr!<LLVMOpaqueBasicBlock>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildUnreachable(_: vptr!<LLVMOpaqueBuilder>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildResume(B: vptr!<LLVMOpaqueBuilder>, Exn: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildLandingPad(B: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, PersFn: vptr!<LLVMOpaqueValue>, NumClauses: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCleanupRet(B: vptr!<LLVMOpaqueBuilder>, CatchPad: vptr!<LLVMOpaqueValue>, BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCatchRet(B: vptr!<LLVMOpaqueBuilder>, CatchPad: vptr!<LLVMOpaqueValue>, BB: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCatchPad(B: vptr!<LLVMOpaqueBuilder>, ParentPad: vptr!<LLVMOpaqueValue>, Args: vptr!<vptr!<LLVMOpaqueValue>>, NumArgs: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCleanupPad(B: vptr!<LLVMOpaqueBuilder>, ParentPad: vptr!<LLVMOpaqueValue>, Args: vptr!<vptr!<LLVMOpaqueValue>>, NumArgs: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCatchSwitch(B: vptr!<LLVMOpaqueBuilder>, ParentPad: vptr!<LLVMOpaqueValue>, UnwindBB: vptr!<LLVMOpaqueBasicBlock>, NumHandlers: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMAddCase(Switch: vptr!<LLVMOpaqueValue>, OnVal: vptr!<LLVMOpaqueValue>, Dest: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMAddDestination(IndirectBr: vptr!<LLVMOpaqueValue>, Dest: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMGetNumClauses(LandingPad: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetClause(LandingPad: vptr!<LLVMOpaqueValue>, Idx: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMAddClause(LandingPad: vptr!<LLVMOpaqueValue>, ClauseVal: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMIsCleanup(LandingPad: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetCleanup(LandingPad: vptr!<LLVMOpaqueValue>, Val: i32) -> void = extern;
func LLVMAddHandler(CatchSwitch: vptr!<LLVMOpaqueValue>, Dest: vptr!<LLVMOpaqueBasicBlock>) -> void = extern;
func LLVMGetNumHandlers(CatchSwitch: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetHandlers(CatchSwitch: vptr!<LLVMOpaqueValue>, Handlers: vptr!<vptr!<LLVMOpaqueBasicBlock>>) -> void = extern;
func LLVMGetArgOperand(Funclet: vptr!<LLVMOpaqueValue>, i: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetArgOperand(Funclet: vptr!<LLVMOpaqueValue>, i: u32, value: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMGetParentCatchSwitch(CatchPad: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMSetParentCatchSwitch(CatchPad: vptr!<LLVMOpaqueValue>, CatchSwitch: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMBuildAdd(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNSWAdd(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNUWAdd(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFAdd(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSub(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNSWSub(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNUWSub(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFSub(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildMul(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNSWMul(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNUWMul(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFMul(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildUDiv(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildExactUDiv(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSDiv(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildExactSDiv(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFDiv(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildURem(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSRem(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFRem(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildShl(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildLShr(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAShr(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAnd(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildOr(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildXor(_: vptr!<LLVMOpaqueBuilder>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildBinOp(B: vptr!<LLVMOpaqueBuilder>, Op: LLVMOpcode, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNeg(_: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNSWNeg(B: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNUWNeg(B: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFNeg(_: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildNot(_: vptr!<LLVMOpaqueBuilder>, V: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildMalloc(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildArrayMalloc(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildMemSet(B: vptr!<LLVMOpaqueBuilder>, Ptr: vptr!<LLVMOpaqueValue>, Val: vptr!<LLVMOpaqueValue>, Len: vptr!<LLVMOpaqueValue>, Align: u32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildMemCpy(B: vptr!<LLVMOpaqueBuilder>, Dst: vptr!<LLVMOpaqueValue>, DstAlign: u32, Src: vptr!<LLVMOpaqueValue>, SrcAlign: u32, Size: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildMemMove(B: vptr!<LLVMOpaqueBuilder>, Dst: vptr!<LLVMOpaqueValue>, DstAlign: u32, Src: vptr!<LLVMOpaqueValue>, SrcAlign: u32, Size: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAlloca(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildArrayAlloca(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFree(_: vptr!<LLVMOpaqueBuilder>, PointerVal: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildLoad2(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, PointerVal: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildStore(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, Ptr: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildGEP2(B: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Pointer: vptr!<LLVMOpaqueValue>, Indices: vptr!<vptr!<LLVMOpaqueValue>>, NumIndices: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildInBoundsGEP2(B: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Pointer: vptr!<LLVMOpaqueValue>, Indices: vptr!<vptr!<LLVMOpaqueValue>>, NumIndices: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildStructGEP2(B: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Pointer: vptr!<LLVMOpaqueValue>, Idx: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildGlobalString(B: vptr!<LLVMOpaqueBuilder>, Str: cptr!<byte>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildGlobalStringPtr(B: vptr!<LLVMOpaqueBuilder>, Str: cptr!<byte>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetVolatile(MemoryAccessInst: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetVolatile(MemoryAccessInst: vptr!<LLVMOpaqueValue>, IsVolatile: i32) -> void = extern;
func LLVMGetWeak(CmpXchgInst: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetWeak(CmpXchgInst: vptr!<LLVMOpaqueValue>, IsWeak: i32) -> void = extern;
func LLVMGetOrdering(MemoryAccessInst: vptr!<LLVMOpaqueValue>) -> LLVMAtomicOrdering = extern;
func LLVMSetOrdering(MemoryAccessInst: vptr!<LLVMOpaqueValue>, Ordering: LLVMAtomicOrdering) -> void = extern;
func LLVMGetAtomicRMWBinOp(AtomicRMWInst: vptr!<LLVMOpaqueValue>) -> LLVMAtomicRMWBinOp = extern;
func LLVMSetAtomicRMWBinOp(AtomicRMWInst: vptr!<LLVMOpaqueValue>, BinOp: LLVMAtomicRMWBinOp) -> void = extern;
func LLVMBuildTrunc(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildZExt(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSExt(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFPToUI(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFPToSI(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildUIToFP(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSIToFP(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFPTrunc(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFPExt(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildPtrToInt(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildIntToPtr(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildBitCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAddrSpaceCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildZExtOrBitCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSExtOrBitCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildTruncOrBitCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCast(B: vptr!<LLVMOpaqueBuilder>, Op: LLVMOpcode, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildPointerCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildIntCast2(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, IsSigned: i32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFPCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildIntCast(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, DestTy: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetCastOpcode(Src: vptr!<LLVMOpaqueValue>, SrcIsSigned: i32, DestTy: vptr!<LLVMOpaqueType>, DestIsSigned: i32) -> LLVMOpcode = extern;
func LLVMBuildICmp(_: vptr!<LLVMOpaqueBuilder>, Op: LLVMIntPredicate, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFCmp(_: vptr!<LLVMOpaqueBuilder>, Op: LLVMRealPredicate, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildPhi(_: vptr!<LLVMOpaqueBuilder>, Ty: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildCall2(_: vptr!<LLVMOpaqueBuilder>, _: vptr!<LLVMOpaqueType>, Fn: vptr!<LLVMOpaqueValue>, Args: vptr!<vptr!<LLVMOpaqueValue>>, NumArgs: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildSelect(_: vptr!<LLVMOpaqueBuilder>, If: vptr!<LLVMOpaqueValue>, Then: vptr!<LLVMOpaqueValue>, Else: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildVAArg(_: vptr!<LLVMOpaqueBuilder>, List: vptr!<LLVMOpaqueValue>, Ty: vptr!<LLVMOpaqueType>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildExtractElement(_: vptr!<LLVMOpaqueBuilder>, VecVal: vptr!<LLVMOpaqueValue>, Index: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildInsertElement(_: vptr!<LLVMOpaqueBuilder>, VecVal: vptr!<LLVMOpaqueValue>, EltVal: vptr!<LLVMOpaqueValue>, Index: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildShuffleVector(_: vptr!<LLVMOpaqueBuilder>, V1: vptr!<LLVMOpaqueValue>, V2: vptr!<LLVMOpaqueValue>, Mask: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildExtractValue(_: vptr!<LLVMOpaqueBuilder>, AggVal: vptr!<LLVMOpaqueValue>, Index: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildInsertValue(_: vptr!<LLVMOpaqueBuilder>, AggVal: vptr!<LLVMOpaqueValue>, EltVal: vptr!<LLVMOpaqueValue>, Index: u32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFreeze(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildIsNull(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildIsNotNull(_: vptr!<LLVMOpaqueBuilder>, Val: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildPtrDiff2(_: vptr!<LLVMOpaqueBuilder>, ElemTy: vptr!<LLVMOpaqueType>, LHS: vptr!<LLVMOpaqueValue>, RHS: vptr!<LLVMOpaqueValue>, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildFence(B: vptr!<LLVMOpaqueBuilder>, ordering: LLVMAtomicOrdering, singleThread: i32, Name: cptr!<byte>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAtomicRMW(B: vptr!<LLVMOpaqueBuilder>, op: LLVMAtomicRMWBinOp, PTR: vptr!<LLVMOpaqueValue>, Val: vptr!<LLVMOpaqueValue>, ordering: LLVMAtomicOrdering, singleThread: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMBuildAtomicCmpXchg(B: vptr!<LLVMOpaqueBuilder>, Ptr: vptr!<LLVMOpaqueValue>, Cmp: vptr!<LLVMOpaqueValue>, New: vptr!<LLVMOpaqueValue>, SuccessOrdering: LLVMAtomicOrdering, FailureOrdering: LLVMAtomicOrdering, SingleThread: i32) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMGetNumMaskElements(ShuffleVectorInst: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMGetUndefMaskElem() -> i32 = extern;
func LLVMGetMaskValue(ShuffleVectorInst: vptr!<LLVMOpaqueValue>, Elt: u32) -> i32 = extern;
func LLVMIsAtomicSingleThread(AtomicInst: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMSetAtomicSingleThread(AtomicInst: vptr!<LLVMOpaqueValue>, SingleThread: i32) -> void = extern;
func LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: vptr!<LLVMOpaqueValue>) -> LLVMAtomicOrdering = extern;
func LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: vptr!<LLVMOpaqueValue>, Ordering: LLVMAtomicOrdering) -> void = extern;
func LLVMGetCmpXchgFailureOrdering(CmpXchgInst: vptr!<LLVMOpaqueValue>) -> LLVMAtomicOrdering = extern;
func LLVMSetCmpXchgFailureOrdering(CmpXchgInst: vptr!<LLVMOpaqueValue>, Ordering: LLVMAtomicOrdering) -> void = extern;
func LLVMCreateModuleProviderForExistingModule(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueModuleProvider> = extern;
func LLVMDisposeModuleProvider(M: vptr!<LLVMOpaqueModuleProvider>) -> void = extern;
func LLVMCreateMemoryBufferWithContentsOfFile(Path: cptr!<byte>, OutMemBuf: vptr!<vptr!<LLVMOpaqueMemoryBuffer>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: vptr!<vptr!<LLVMOpaqueMemoryBuffer>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMCreateMemoryBufferWithMemoryRange(InputData: cptr!<byte>, InputDataLength: uint, BufferName: cptr!<byte>, RequiresNullTerminator: i32) -> vptr!<LLVMOpaqueMemoryBuffer> = extern;
func LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: cptr!<byte>, InputDataLength: uint, BufferName: cptr!<byte>) -> vptr!<LLVMOpaqueMemoryBuffer> = extern;
func LLVMGetBufferStart(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>) -> cptr!<byte> = extern;
func LLVMGetBufferSize(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>) -> uint = extern;
func LLVMDisposeMemoryBuffer(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>) -> void = extern;
func LLVMGetGlobalPassRegistry() -> vptr!<LLVMOpaquePassRegistry> = extern;
func LLVMCreatePassManager() -> vptr!<LLVMOpaquePassManager> = extern;
func LLVMCreateFunctionPassManagerForModule(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaquePassManager> = extern;
func LLVMCreateFunctionPassManager(MP: vptr!<LLVMOpaqueModuleProvider>) -> vptr!<LLVMOpaquePassManager> = extern;
func LLVMRunPassManager(PM: vptr!<LLVMOpaquePassManager>, M: vptr!<LLVMOpaqueModule>) -> i32 = extern;
func LLVMInitializeFunctionPassManager(FPM: vptr!<LLVMOpaquePassManager>) -> i32 = extern;
func LLVMRunFunctionPassManager(FPM: vptr!<LLVMOpaquePassManager>, F: vptr!<LLVMOpaqueValue>) -> i32 = extern;
func LLVMFinalizeFunctionPassManager(FPM: vptr!<LLVMOpaquePassManager>) -> i32 = extern;
func LLVMDisposePassManager(PM: vptr!<LLVMOpaquePassManager>) -> void = extern;
func LLVMStartMultithreaded() -> i32 = extern;
func LLVMStopMultithreaded() -> void = extern;
func LLVMIsMultithreaded() -> i32 = extern;
func LLVMInitializeTransformUtils(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeScalarOpts(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeVectorization(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeInstCombine(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeIPO(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeAnalysis(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeIPA(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeCodeGen(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMInitializeTarget(R: vptr!<LLVMOpaquePassRegistry>) -> void = extern;
func LLVMVerifyModule(M: vptr!<LLVMOpaqueModule>, Action: LLVMVerifierFailureAction, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMVerifyFunction(Fn: vptr!<LLVMOpaqueValue>, Action: LLVMVerifierFailureAction) -> i32 = extern;
func LLVMViewFunctionCFG(Fn: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMViewFunctionCFGOnly(Fn: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMInitializeAArch64TargetInfo() -> void = extern;
func LLVMInitializeAMDGPUTargetInfo() -> void = extern;
func LLVMInitializeARMTargetInfo() -> void = extern;
func LLVMInitializeAVRTargetInfo() -> void = extern;
func LLVMInitializeBPFTargetInfo() -> void = extern;
func LLVMInitializeHexagonTargetInfo() -> void = extern;
func LLVMInitializeLanaiTargetInfo() -> void = extern;
func LLVMInitializeLoongArchTargetInfo() -> void = extern;
func LLVMInitializeMipsTargetInfo() -> void = extern;
func LLVMInitializeMSP430TargetInfo() -> void = extern;
func LLVMInitializeNVPTXTargetInfo() -> void = extern;
func LLVMInitializePowerPCTargetInfo() -> void = extern;
func LLVMInitializeRISCVTargetInfo() -> void = extern;
func LLVMInitializeSparcTargetInfo() -> void = extern;
func LLVMInitializeSystemZTargetInfo() -> void = extern;
func LLVMInitializeVETargetInfo() -> void = extern;
func LLVMInitializeWebAssemblyTargetInfo() -> void = extern;
func LLVMInitializeX86TargetInfo() -> void = extern;
func LLVMInitializeXCoreTargetInfo() -> void = extern;
func LLVMInitializeAArch64Target() -> void = extern;
func LLVMInitializeAMDGPUTarget() -> void = extern;
func LLVMInitializeARMTarget() -> void = extern;
func LLVMInitializeAVRTarget() -> void = extern;
func LLVMInitializeBPFTarget() -> void = extern;
func LLVMInitializeHexagonTarget() -> void = extern;
func LLVMInitializeLanaiTarget() -> void = extern;
func LLVMInitializeLoongArchTarget() -> void = extern;
func LLVMInitializeMipsTarget() -> void = extern;
func LLVMInitializeMSP430Target() -> void = extern;
func LLVMInitializeNVPTXTarget() -> void = extern;
func LLVMInitializePowerPCTarget() -> void = extern;
func LLVMInitializeRISCVTarget() -> void = extern;
func LLVMInitializeSparcTarget() -> void = extern;
func LLVMInitializeSystemZTarget() -> void = extern;
func LLVMInitializeVETarget() -> void = extern;
func LLVMInitializeWebAssemblyTarget() -> void = extern;
func LLVMInitializeX86Target() -> void = extern;
func LLVMInitializeXCoreTarget() -> void = extern;
func LLVMInitializeAArch64TargetMC() -> void = extern;
func LLVMInitializeAMDGPUTargetMC() -> void = extern;
func LLVMInitializeARMTargetMC() -> void = extern;
func LLVMInitializeAVRTargetMC() -> void = extern;
func LLVMInitializeBPFTargetMC() -> void = extern;
func LLVMInitializeHexagonTargetMC() -> void = extern;
func LLVMInitializeLanaiTargetMC() -> void = extern;
func LLVMInitializeLoongArchTargetMC() -> void = extern;
func LLVMInitializeMipsTargetMC() -> void = extern;
func LLVMInitializeMSP430TargetMC() -> void = extern;
func LLVMInitializeNVPTXTargetMC() -> void = extern;
func LLVMInitializePowerPCTargetMC() -> void = extern;
func LLVMInitializeRISCVTargetMC() -> void = extern;
func LLVMInitializeSparcTargetMC() -> void = extern;
func LLVMInitializeSystemZTargetMC() -> void = extern;
func LLVMInitializeVETargetMC() -> void = extern;
func LLVMInitializeWebAssemblyTargetMC() -> void = extern;
func LLVMInitializeX86TargetMC() -> void = extern;
func LLVMInitializeXCoreTargetMC() -> void = extern;
func LLVMInitializeAArch64AsmPrinter() -> void = extern;
func LLVMInitializeAMDGPUAsmPrinter() -> void = extern;
func LLVMInitializeARMAsmPrinter() -> void = extern;
func LLVMInitializeAVRAsmPrinter() -> void = extern;
func LLVMInitializeBPFAsmPrinter() -> void = extern;
func LLVMInitializeHexagonAsmPrinter() -> void = extern;
func LLVMInitializeLanaiAsmPrinter() -> void = extern;
func LLVMInitializeLoongArchAsmPrinter() -> void = extern;
func LLVMInitializeMipsAsmPrinter() -> void = extern;
func LLVMInitializeMSP430AsmPrinter() -> void = extern;
func LLVMInitializeNVPTXAsmPrinter() -> void = extern;
func LLVMInitializePowerPCAsmPrinter() -> void = extern;
func LLVMInitializeRISCVAsmPrinter() -> void = extern;
func LLVMInitializeSparcAsmPrinter() -> void = extern;
func LLVMInitializeSystemZAsmPrinter() -> void = extern;
func LLVMInitializeVEAsmPrinter() -> void = extern;
func LLVMInitializeWebAssemblyAsmPrinter() -> void = extern;
func LLVMInitializeX86AsmPrinter() -> void = extern;
func LLVMInitializeXCoreAsmPrinter() -> void = extern;
func LLVMInitializeAArch64AsmParser() -> void = extern;
func LLVMInitializeAMDGPUAsmParser() -> void = extern;
func LLVMInitializeARMAsmParser() -> void = extern;
func LLVMInitializeAVRAsmParser() -> void = extern;
func LLVMInitializeBPFAsmParser() -> void = extern;
func LLVMInitializeHexagonAsmParser() -> void = extern;
func LLVMInitializeLanaiAsmParser() -> void = extern;
func LLVMInitializeLoongArchAsmParser() -> void = extern;
func LLVMInitializeMipsAsmParser() -> void = extern;
func LLVMInitializeMSP430AsmParser() -> void = extern;
func LLVMInitializePowerPCAsmParser() -> void = extern;
func LLVMInitializeRISCVAsmParser() -> void = extern;
func LLVMInitializeSparcAsmParser() -> void = extern;
func LLVMInitializeSystemZAsmParser() -> void = extern;
func LLVMInitializeVEAsmParser() -> void = extern;
func LLVMInitializeWebAssemblyAsmParser() -> void = extern;
func LLVMInitializeX86AsmParser() -> void = extern;
func LLVMInitializeAArch64Disassembler() -> void = extern;
func LLVMInitializeAMDGPUDisassembler() -> void = extern;
func LLVMInitializeARMDisassembler() -> void = extern;
func LLVMInitializeAVRDisassembler() -> void = extern;
func LLVMInitializeBPFDisassembler() -> void = extern;
func LLVMInitializeHexagonDisassembler() -> void = extern;
func LLVMInitializeLanaiDisassembler() -> void = extern;
func LLVMInitializeLoongArchDisassembler() -> void = extern;
func LLVMInitializeMipsDisassembler() -> void = extern;
func LLVMInitializeMSP430Disassembler() -> void = extern;
func LLVMInitializePowerPCDisassembler() -> void = extern;
func LLVMInitializeRISCVDisassembler() -> void = extern;
func LLVMInitializeSparcDisassembler() -> void = extern;
func LLVMInitializeSystemZDisassembler() -> void = extern;
func LLVMInitializeVEDisassembler() -> void = extern;
func LLVMInitializeWebAssemblyDisassembler() -> void = extern;
func LLVMInitializeX86Disassembler() -> void = extern;
func LLVMInitializeXCoreDisassembler() -> void = extern;
func LLVMInitializeAllTargetInfos() -> void = extern;
func LLVMInitializeAllTargets() -> void = extern;
func LLVMInitializeAllTargetMCs() -> void = extern;
func LLVMInitializeAllAsmPrinters() -> void = extern;
func LLVMInitializeAllAsmParsers() -> void = extern;
func LLVMInitializeAllDisassemblers() -> void = extern;
func LLVMInitializeNativeTarget() -> i32 = extern;
func LLVMInitializeNativeAsmParser() -> i32 = extern;
func LLVMInitializeNativeAsmPrinter() -> i32 = extern;
func LLVMInitializeNativeDisassembler() -> i32 = extern;
func LLVMGetModuleDataLayout(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueTargetData> = extern;
func LLVMSetModuleDataLayout(M: vptr!<LLVMOpaqueModule>, DL: vptr!<LLVMOpaqueTargetData>) -> void = extern;
func LLVMCreateTargetData(StringRep: cptr!<byte>) -> vptr!<LLVMOpaqueTargetData> = extern;
func LLVMDisposeTargetData(TD: vptr!<LLVMOpaqueTargetData>) -> void = extern;
func LLVMAddTargetLibraryInfo(TLI: vptr!<LLVMOpaqueTargetLibraryInfotData>, PM: vptr!<LLVMOpaquePassManager>) -> void = extern;
func LLVMCopyStringRepOfTargetData(TD: vptr!<LLVMOpaqueTargetData>) -> vptr!<byte> = extern;
func LLVMByteOrder(TD: vptr!<LLVMOpaqueTargetData>) -> LLVMByteOrdering = extern;
func LLVMPointerSize(TD: vptr!<LLVMOpaqueTargetData>) -> u32 = extern;
func LLVMPointerSizeForAS(TD: vptr!<LLVMOpaqueTargetData>, AS: u32) -> u32 = extern;
func LLVMIntPtrType(TD: vptr!<LLVMOpaqueTargetData>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIntPtrTypeForAS(TD: vptr!<LLVMOpaqueTargetData>, AS: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIntPtrTypeInContext(C: vptr!<LLVMOpaqueContext>, TD: vptr!<LLVMOpaqueTargetData>) -> vptr!<LLVMOpaqueType> = extern;
func LLVMIntPtrTypeForASInContext(C: vptr!<LLVMOpaqueContext>, TD: vptr!<LLVMOpaqueTargetData>, AS: u32) -> vptr!<LLVMOpaqueType> = extern;
func LLVMSizeOfTypeInBits(TD: vptr!<LLVMOpaqueTargetData>, Ty: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMStoreSizeOfType(TD: vptr!<LLVMOpaqueTargetData>, Ty: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMABISizeOfType(TD: vptr!<LLVMOpaqueTargetData>, Ty: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMABIAlignmentOfType(TD: vptr!<LLVMOpaqueTargetData>, Ty: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMCallFrameAlignmentOfType(TD: vptr!<LLVMOpaqueTargetData>, Ty: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMPreferredAlignmentOfType(TD: vptr!<LLVMOpaqueTargetData>, Ty: vptr!<LLVMOpaqueType>) -> u32 = extern;
func LLVMPreferredAlignmentOfGlobal(TD: vptr!<LLVMOpaqueTargetData>, GlobalVar: vptr!<LLVMOpaqueValue>) -> u32 = extern;
func LLVMElementAtOffset(TD: vptr!<LLVMOpaqueTargetData>, StructTy: vptr!<LLVMOpaqueType>, Offset: u32) -> u32 = extern;
func LLVMOffsetOfElement(TD: vptr!<LLVMOpaqueTargetData>, StructTy: vptr!<LLVMOpaqueType>, Element: u32) -> u32 = extern;
func LLVMParseIRInContext(ContextRef: vptr!<LLVMOpaqueContext>, MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutM: vptr!<vptr!<LLVMOpaqueModule>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMParseBitcode(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutModule: vptr!<vptr!<LLVMOpaqueModule>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMParseBitcode2(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutModule: vptr!<vptr!<LLVMOpaqueModule>>) -> i32 = extern;
func LLVMParseBitcodeInContext(ContextRef: vptr!<LLVMOpaqueContext>, MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutModule: vptr!<vptr!<LLVMOpaqueModule>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMParseBitcodeInContext2(ContextRef: vptr!<LLVMOpaqueContext>, MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutModule: vptr!<vptr!<LLVMOpaqueModule>>) -> i32 = extern;
func LLVMGetBitcodeModuleInContext(ContextRef: vptr!<LLVMOpaqueContext>, MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutM: vptr!<vptr!<LLVMOpaqueModule>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMGetBitcodeModuleInContext2(ContextRef: vptr!<LLVMOpaqueContext>, MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutM: vptr!<vptr!<LLVMOpaqueModule>>) -> i32 = extern;
func LLVMGetBitcodeModule(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutM: vptr!<vptr!<LLVMOpaqueModule>>, OutMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMGetBitcodeModule2(MemBuf: vptr!<LLVMOpaqueMemoryBuffer>, OutM: vptr!<vptr!<LLVMOpaqueModule>>) -> i32 = extern;
func LLVMWriteBitcodeToFile(M: vptr!<LLVMOpaqueModule>, Path: cptr!<byte>) -> i32 = extern;
func LLVMWriteBitcodeToFD(M: vptr!<LLVMOpaqueModule>, FD: i32, ShouldClose: i32, Unbuffered: i32) -> i32 = extern;
func LLVMWriteBitcodeToFileHandle(M: vptr!<LLVMOpaqueModule>, Handle: i32) -> i32 = extern;
func LLVMWriteBitcodeToMemoryBuffer(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueMemoryBuffer> = extern;
func LLVMLinkModules2(Dest: vptr!<LLVMOpaqueModule>, Src: vptr!<LLVMOpaqueModule>) -> i32 = extern;
func LLVMDebugMetadataVersion() -> u32 = extern;
func LLVMGetModuleDebugMetadataVersion(Module: vptr!<LLVMOpaqueModule>) -> u32 = extern;
func LLVMStripModuleDebugInfo(Module: vptr!<LLVMOpaqueModule>) -> i32 = extern;
func LLVMCreateDIBuilderDisallowUnresolved(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueDIBuilder> = extern;
func LLVMCreateDIBuilder(M: vptr!<LLVMOpaqueModule>) -> vptr!<LLVMOpaqueDIBuilder> = extern;
func LLVMDisposeDIBuilder(Builder: vptr!<LLVMOpaqueDIBuilder>) -> void = extern;
func LLVMDIBuilderFinalize(Builder: vptr!<LLVMOpaqueDIBuilder>) -> void = extern;
func LLVMDIBuilderFinalizeSubprogram(Builder: vptr!<LLVMOpaqueDIBuilder>, Subprogram: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMDIBuilderCreateCompileUnit(Builder: vptr!<LLVMOpaqueDIBuilder>, Lang: LLVMDWARFSourceLanguage, FileRef: vptr!<LLVMOpaqueMetadata>, Producer: cptr!<byte>, ProducerLen: uint, isOptimized: i32, Flags: cptr!<byte>, FlagsLen: uint, RuntimeVer: u32, SplitName: cptr!<byte>, SplitNameLen: uint, Kind: LLVMDWARFEmissionKind, DWOId: u32, SplitDebugInlining: i32, DebugInfoForProfiling: i32, SysRoot: cptr!<byte>, SysRootLen: uint, SDK: cptr!<byte>, SDKLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateFile(Builder: vptr!<LLVMOpaqueDIBuilder>, Filename: cptr!<byte>, FilenameLen: uint, Directory: cptr!<byte>, DirectoryLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateModule(Builder: vptr!<LLVMOpaqueDIBuilder>, ParentScope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, ConfigMacros: cptr!<byte>, ConfigMacrosLen: uint, IncludePath: cptr!<byte>, IncludePathLen: uint, APINotesFile: cptr!<byte>, APINotesFileLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateNameSpace(Builder: vptr!<LLVMOpaqueDIBuilder>, ParentScope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, ExportSymbols: i32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateFunction(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, LinkageName: cptr!<byte>, LinkageNameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, Ty: vptr!<LLVMOpaqueMetadata>, IsLocalToUnit: i32, IsDefinition: i32, ScopeLine: u32, Flags: LLVMDIFlags, IsOptimized: i32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateLexicalBlock(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32, Column: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateLexicalBlockFile(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Discriminator: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateImportedModuleFromNamespace(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, NS: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateImportedModuleFromAlias(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, ImportedEntity: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateImportedModuleFromModule(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, M: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateImportedDeclaration(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Decl: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32, Name: cptr!<byte>, NameLen: uint, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateDebugLocation(Ctx: vptr!<LLVMOpaqueContext>, Line: u32, Column: u32, Scope: vptr!<LLVMOpaqueMetadata>, InlinedAt: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDILocationGetLine(Location: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMDILocationGetColumn(Location: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMDILocationGetScope(Location: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDILocationGetInlinedAt(Location: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIScopeGetFile(Scope: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIFileGetDirectory(File: vptr!<LLVMOpaqueMetadata>, Len: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMDIFileGetFilename(File: vptr!<LLVMOpaqueMetadata>, Len: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMDIFileGetSource(File: vptr!<LLVMOpaqueMetadata>, Len: vptr!<u32>) -> cptr!<byte> = extern;
func LLVMDIBuilderGetOrCreateTypeArray(Builder: vptr!<LLVMOpaqueDIBuilder>, Data: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateSubroutineType(Builder: vptr!<LLVMOpaqueDIBuilder>, File: vptr!<LLVMOpaqueMetadata>, ParameterTypes: vptr!<vptr!<LLVMOpaqueMetadata>>, NumParameterTypes: u32, Flags: LLVMDIFlags) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateMacro(Builder: vptr!<LLVMOpaqueDIBuilder>, ParentMacroFile: vptr!<LLVMOpaqueMetadata>, Line: u32, RecordType: LLVMDWARFMacinfoRecordType, Name: cptr!<byte>, NameLen: uint, Value: cptr!<byte>, ValueLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateTempMacroFile(Builder: vptr!<LLVMOpaqueDIBuilder>, ParentMacroFile: vptr!<LLVMOpaqueMetadata>, Line: u32, File: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateEnumerator(Builder: vptr!<LLVMOpaqueDIBuilder>, Name: cptr!<byte>, NameLen: uint, Value: i64, IsUnsigned: i32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateEnumerationType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32, ClassTy: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateUnionType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32, RunTimeLang: u32, UniqueId: cptr!<byte>, UniqueIdLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateArrayType(Builder: vptr!<LLVMOpaqueDIBuilder>, Size: u64, AlignInBits: u32, Ty: vptr!<LLVMOpaqueMetadata>, Subscripts: vptr!<vptr!<LLVMOpaqueMetadata>>, NumSubscripts: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateVectorType(Builder: vptr!<LLVMOpaqueDIBuilder>, Size: u64, AlignInBits: u32, Ty: vptr!<LLVMOpaqueMetadata>, Subscripts: vptr!<vptr!<LLVMOpaqueMetadata>>, NumSubscripts: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateUnspecifiedType(Builder: vptr!<LLVMOpaqueDIBuilder>, Name: cptr!<byte>, NameLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateBasicType(Builder: vptr!<LLVMOpaqueDIBuilder>, Name: cptr!<byte>, NameLen: uint, SizeInBits: u64, Encoding: u32, Flags: LLVMDIFlags) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreatePointerType(Builder: vptr!<LLVMOpaqueDIBuilder>, PointeeTy: vptr!<LLVMOpaqueMetadata>, SizeInBits: u64, AlignInBits: u32, AddressSpace: u32, Name: cptr!<byte>, NameLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateStructType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, DerivedFrom: vptr!<LLVMOpaqueMetadata>, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32, RunTimeLang: u32, VTableHolder: vptr!<LLVMOpaqueMetadata>, UniqueId: cptr!<byte>, UniqueIdLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateMemberType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateStaticMemberType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNumber: u32, Type: vptr!<LLVMOpaqueMetadata>, Flags: LLVMDIFlags, ConstantVal: vptr!<LLVMOpaqueValue>, AlignInBits: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateMemberPointerType(Builder: vptr!<LLVMOpaqueDIBuilder>, PointeeType: vptr!<LLVMOpaqueMetadata>, ClassType: vptr!<LLVMOpaqueMetadata>, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateObjCIVar(Builder: vptr!<LLVMOpaqueDIBuilder>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, Ty: vptr!<LLVMOpaqueMetadata>, PropertyNode: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateObjCProperty(Builder: vptr!<LLVMOpaqueDIBuilder>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, GetterName: cptr!<byte>, GetterNameLen: uint, SetterName: cptr!<byte>, SetterNameLen: uint, PropertyAttributes: u32, Ty: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateObjectPointerType(Builder: vptr!<LLVMOpaqueDIBuilder>, Type: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateQualifiedType(Builder: vptr!<LLVMOpaqueDIBuilder>, Tag: u32, Type: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateReferenceType(Builder: vptr!<LLVMOpaqueDIBuilder>, Tag: u32, Type: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateNullPtrType(Builder: vptr!<LLVMOpaqueDIBuilder>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateTypedef(Builder: vptr!<LLVMOpaqueDIBuilder>, Type: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, Scope: vptr!<LLVMOpaqueMetadata>, AlignInBits: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateInheritance(Builder: vptr!<LLVMOpaqueDIBuilder>, Ty: vptr!<LLVMOpaqueMetadata>, BaseTy: vptr!<LLVMOpaqueMetadata>, BaseOffset: u64, VBPtrOffset: u32, Flags: LLVMDIFlags) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateForwardDecl(Builder: vptr!<LLVMOpaqueDIBuilder>, Tag: u32, Name: cptr!<byte>, NameLen: uint, Scope: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, UniqueIdentifier: cptr!<byte>, UniqueIdentifierLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateReplaceableCompositeType(Builder: vptr!<LLVMOpaqueDIBuilder>, Tag: u32, Name: cptr!<byte>, NameLen: uint, Scope: vptr!<LLVMOpaqueMetadata>, File: vptr!<LLVMOpaqueMetadata>, Line: u32, RuntimeLang: u32, SizeInBits: u64, AlignInBits: u32, Flags: LLVMDIFlags, UniqueIdentifier: cptr!<byte>, UniqueIdentifierLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateBitFieldMemberType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNumber: u32, SizeInBits: u64, OffsetInBits: u64, StorageOffsetInBits: u64, Flags: LLVMDIFlags, Type: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateClassType(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNumber: u32, SizeInBits: u64, AlignInBits: u32, OffsetInBits: u64, Flags: LLVMDIFlags, DerivedFrom: vptr!<LLVMOpaqueMetadata>, Elements: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: u32, VTableHolder: vptr!<LLVMOpaqueMetadata>, TemplateParamsNode: vptr!<LLVMOpaqueMetadata>, UniqueIdentifier: cptr!<byte>, UniqueIdentifierLen: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateArtificialType(Builder: vptr!<LLVMOpaqueDIBuilder>, Type: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDITypeGetName(DType: vptr!<LLVMOpaqueMetadata>, Length: vptr!<uint>) -> cptr!<byte> = extern;
func LLVMDITypeGetSizeInBits(DType: vptr!<LLVMOpaqueMetadata>) -> u64 = extern;
func LLVMDITypeGetOffsetInBits(DType: vptr!<LLVMOpaqueMetadata>) -> u64 = extern;
func LLVMDITypeGetAlignInBits(DType: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMDITypeGetLine(DType: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMDITypeGetFlags(DType: vptr!<LLVMOpaqueMetadata>) -> LLVMDIFlags = extern;
func LLVMDIBuilderGetOrCreateSubrange(Builder: vptr!<LLVMOpaqueDIBuilder>, LowerBound: i64, Count: i64) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderGetOrCreateArray(Builder: vptr!<LLVMOpaqueDIBuilder>, Data: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateExpression(Builder: vptr!<LLVMOpaqueDIBuilder>, Addr: vptr!<u64>, Length: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateConstantValueExpression(Builder: vptr!<LLVMOpaqueDIBuilder>, Value: u64) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateGlobalVariableExpression(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, Linkage: cptr!<byte>, LinkLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, Ty: vptr!<LLVMOpaqueMetadata>, LocalToUnit: i32, Expr: vptr!<LLVMOpaqueMetadata>, Decl: vptr!<LLVMOpaqueMetadata>, AlignInBits: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIGlobalVariableExpressionGetVariable(GVE: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIGlobalVariableExpressionGetExpression(GVE: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIVariableGetFile(Var: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIVariableGetScope(Var: vptr!<LLVMOpaqueMetadata>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIVariableGetLine(Var: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMTemporaryMDNode(Ctx: vptr!<LLVMOpaqueContext>, Data: vptr!<vptr!<LLVMOpaqueMetadata>>, NumElements: uint) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDisposeTemporaryMDNode(TempNode: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: vptr!<LLVMOpaqueMetadata>, Replacement: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMDIBuilderCreateTempGlobalVariableFwdDecl(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, Linkage: cptr!<byte>, LnkLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, Ty: vptr!<LLVMOpaqueMetadata>, LocalToUnit: i32, Decl: vptr!<LLVMOpaqueMetadata>, AlignInBits: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderInsertDeclareBefore(Builder: vptr!<LLVMOpaqueDIBuilder>, Storage: vptr!<LLVMOpaqueValue>, VarInfo: vptr!<LLVMOpaqueMetadata>, Expr: vptr!<LLVMOpaqueMetadata>, DebugLoc: vptr!<LLVMOpaqueMetadata>, Instr: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMDIBuilderInsertDeclareAtEnd(Builder: vptr!<LLVMOpaqueDIBuilder>, Storage: vptr!<LLVMOpaqueValue>, VarInfo: vptr!<LLVMOpaqueMetadata>, Expr: vptr!<LLVMOpaqueMetadata>, DebugLoc: vptr!<LLVMOpaqueMetadata>, Block: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMDIBuilderInsertDbgValueBefore(Builder: vptr!<LLVMOpaqueDIBuilder>, Val: vptr!<LLVMOpaqueValue>, VarInfo: vptr!<LLVMOpaqueMetadata>, Expr: vptr!<LLVMOpaqueMetadata>, DebugLoc: vptr!<LLVMOpaqueMetadata>, Instr: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMDIBuilderInsertDbgValueAtEnd(Builder: vptr!<LLVMOpaqueDIBuilder>, Val: vptr!<LLVMOpaqueValue>, VarInfo: vptr!<LLVMOpaqueMetadata>, Expr: vptr!<LLVMOpaqueMetadata>, DebugLoc: vptr!<LLVMOpaqueMetadata>, Block: vptr!<LLVMOpaqueBasicBlock>) -> vptr!<LLVMOpaqueValue> = extern;
func LLVMDIBuilderCreateAutoVariable(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, Ty: vptr!<LLVMOpaqueMetadata>, AlwaysPreserve: i32, Flags: LLVMDIFlags, AlignInBits: u32) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMDIBuilderCreateParameterVariable(Builder: vptr!<LLVMOpaqueDIBuilder>, Scope: vptr!<LLVMOpaqueMetadata>, Name: cptr!<byte>, NameLen: uint, ArgNo: u32, File: vptr!<LLVMOpaqueMetadata>, LineNo: u32, Ty: vptr!<LLVMOpaqueMetadata>, AlwaysPreserve: i32, Flags: LLVMDIFlags) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMGetSubprogram(Func: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMSetSubprogram(Func: vptr!<LLVMOpaqueValue>, SP: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMDISubprogramGetLine(Subprogram: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMInstructionGetDebugLoc(Inst: vptr!<LLVMOpaqueValue>) -> vptr!<LLVMOpaqueMetadata> = extern;
func LLVMInstructionSetDebugLoc(Inst: vptr!<LLVMOpaqueValue>, Loc: vptr!<LLVMOpaqueMetadata>) -> void = extern;
func LLVMGetMetadataKind(Metadata: vptr!<LLVMOpaqueMetadata>) -> u32 = extern;
func LLVMGetFirstTarget() -> vptr!<LLVMTarget> = extern;
func LLVMGetNextTarget(T: vptr!<LLVMTarget>) -> vptr!<LLVMTarget> = extern;
func LLVMGetTargetFromName(Name: cptr!<byte>) -> vptr!<LLVMTarget> = extern;
func LLVMGetTargetFromTriple(Triple: cptr!<byte>, T: vptr!<vptr!<LLVMTarget>>, ErrorMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMGetTargetName(T: vptr!<LLVMTarget>) -> cptr!<byte> = extern;
func LLVMGetTargetDescription(T: vptr!<LLVMTarget>) -> cptr!<byte> = extern;
func LLVMTargetHasJIT(T: vptr!<LLVMTarget>) -> i32 = extern;
func LLVMTargetHasTargetMachine(T: vptr!<LLVMTarget>) -> i32 = extern;
func LLVMTargetHasAsmBackend(T: vptr!<LLVMTarget>) -> i32 = extern;
func LLVMCreateTargetMachine(T: vptr!<LLVMTarget>, Triple: cptr!<byte>, CPU: cptr!<byte>, Features: cptr!<byte>, Level: LLVMCodeGenOptLevel, Reloc: LLVMRelocMode, CodeModel: LLVMCodeModel) -> vptr!<LLVMOpaqueTargetMachine> = extern;
func LLVMDisposeTargetMachine(T: vptr!<LLVMOpaqueTargetMachine>) -> void = extern;
func LLVMGetTargetMachineTarget(T: vptr!<LLVMOpaqueTargetMachine>) -> vptr!<LLVMTarget> = extern;
func LLVMGetTargetMachineTriple(T: vptr!<LLVMOpaqueTargetMachine>) -> vptr!<byte> = extern;
func LLVMGetTargetMachineCPU(T: vptr!<LLVMOpaqueTargetMachine>) -> vptr!<byte> = extern;
func LLVMGetTargetMachineFeatureString(T: vptr!<LLVMOpaqueTargetMachine>) -> vptr!<byte> = extern;
func LLVMCreateTargetDataLayout(T: vptr!<LLVMOpaqueTargetMachine>) -> vptr!<LLVMOpaqueTargetData> = extern;
func LLVMSetTargetMachineAsmVerbosity(T: vptr!<LLVMOpaqueTargetMachine>, VerboseAsm: i32) -> void = extern;
func LLVMTargetMachineEmitToFile(T: vptr!<LLVMOpaqueTargetMachine>, M: vptr!<LLVMOpaqueModule>, Filename: cptr!<byte>, codegen: LLVMCodeGenFileType, ErrorMessage: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMTargetMachineEmitToMemoryBuffer(T: vptr!<LLVMOpaqueTargetMachine>, M: vptr!<LLVMOpaqueModule>, codegen: LLVMCodeGenFileType, ErrorMessage: vptr!<vptr!<byte>>, OutMemBuf: vptr!<vptr!<LLVMOpaqueMemoryBuffer>>) -> i32 = extern;
func LLVMGetDefaultTargetTriple() -> vptr!<byte> = extern;
func LLVMNormalizeTargetTriple(triple: cptr!<byte>) -> vptr!<byte> = extern;
func LLVMGetHostCPUName() -> vptr!<byte> = extern;
func LLVMGetHostCPUFeatures() -> vptr!<byte> = extern;
func LLVMAddAnalysisPasses(T: vptr!<LLVMOpaqueTargetMachine>, PM: vptr!<LLVMOpaquePassManager>) -> void = extern;
func LLVMLinkInMCJIT() -> void = extern;
func LLVMLinkInInterpreter() -> void = extern;
func LLVMCreateGenericValueOfInt(Ty: vptr!<LLVMOpaqueType>, N: u32, IsSigned: i32) -> vptr!<LLVMOpaqueGenericValue> = extern;
func LLVMCreateGenericValueOfPointer(P: vptr) -> vptr!<LLVMOpaqueGenericValue> = extern;
func LLVMCreateGenericValueOfFloat(Ty: vptr!<LLVMOpaqueType>, N: f64) -> vptr!<LLVMOpaqueGenericValue> = extern;
func LLVMGenericValueIntWidth(GenValRef: vptr!<LLVMOpaqueGenericValue>) -> u32 = extern;
func LLVMGenericValueToInt(GenVal: vptr!<LLVMOpaqueGenericValue>, IsSigned: i32) -> u32 = extern;
func LLVMGenericValueToPointer(GenVal: vptr!<LLVMOpaqueGenericValue>) -> vptr = extern;
func LLVMGenericValueToFloat(TyRef: vptr!<LLVMOpaqueType>, GenVal: vptr!<LLVMOpaqueGenericValue>) -> f64 = extern;
func LLVMDisposeGenericValue(GenVal: vptr!<LLVMOpaqueGenericValue>) -> void = extern;
func LLVMCreateExecutionEngineForModule(OutEE: vptr!<vptr!<LLVMOpaqueExecutionEngine>>, M: vptr!<LLVMOpaqueModule>, OutError: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMCreateInterpreterForModule(OutInterp: vptr!<vptr!<LLVMOpaqueExecutionEngine>>, M: vptr!<LLVMOpaqueModule>, OutError: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMCreateJITCompilerForModule(OutJIT: vptr!<vptr!<LLVMOpaqueExecutionEngine>>, M: vptr!<LLVMOpaqueModule>, OptLevel: u32, OutError: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMInitializeMCJITCompilerOptions(Options: vptr!<LLVMMCJITCompilerOptions>, SizeOfOptions: uint) -> void = extern;
func LLVMCreateMCJITCompilerForModule(OutJIT: vptr!<vptr!<LLVMOpaqueExecutionEngine>>, M: vptr!<LLVMOpaqueModule>, Options: vptr!<LLVMMCJITCompilerOptions>, SizeOfOptions: uint, OutError: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMDisposeExecutionEngine(EE: vptr!<LLVMOpaqueExecutionEngine>) -> void = extern;
func LLVMRunStaticConstructors(EE: vptr!<LLVMOpaqueExecutionEngine>) -> void = extern;
func LLVMRunStaticDestructors(EE: vptr!<LLVMOpaqueExecutionEngine>) -> void = extern;
func LLVMRunFunctionAsMain(EE: vptr!<LLVMOpaqueExecutionEngine>, F: vptr!<LLVMOpaqueValue>, ArgC: u32, ArgV: cptr!<cptr!<byte>>, EnvP: cptr!<cptr!<byte>>) -> i32 = extern;
func LLVMRunFunction(EE: vptr!<LLVMOpaqueExecutionEngine>, F: vptr!<LLVMOpaqueValue>, NumArgs: u32, Args: vptr!<vptr!<LLVMOpaqueGenericValue>>) -> vptr!<LLVMOpaqueGenericValue> = extern;
func LLVMFreeMachineCodeForFunction(EE: vptr!<LLVMOpaqueExecutionEngine>, F: vptr!<LLVMOpaqueValue>) -> void = extern;
func LLVMAddModule(EE: vptr!<LLVMOpaqueExecutionEngine>, M: vptr!<LLVMOpaqueModule>) -> void = extern;
func LLVMRemoveModule(EE: vptr!<LLVMOpaqueExecutionEngine>, M: vptr!<LLVMOpaqueModule>, OutMod: vptr!<vptr!<LLVMOpaqueModule>>, OutError: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMFindFunction(EE: vptr!<LLVMOpaqueExecutionEngine>, Name: cptr!<byte>, OutFn: vptr!<vptr!<LLVMOpaqueValue>>) -> i32 = extern;
func LLVMRecompileAndRelinkFunction(EE: vptr!<LLVMOpaqueExecutionEngine>, Fn: vptr!<LLVMOpaqueValue>) -> vptr = extern;
func LLVMGetExecutionEngineTargetData(EE: vptr!<LLVMOpaqueExecutionEngine>) -> vptr!<LLVMOpaqueTargetData> = extern;
func LLVMGetExecutionEngineTargetMachine(EE: vptr!<LLVMOpaqueExecutionEngine>) -> vptr!<LLVMOpaqueTargetMachine> = extern;
func LLVMAddGlobalMapping(EE: vptr!<LLVMOpaqueExecutionEngine>, Global: vptr!<LLVMOpaqueValue>, Addr: vptr) -> void = extern;
func LLVMGetPointerToGlobal(EE: vptr!<LLVMOpaqueExecutionEngine>, Global: vptr!<LLVMOpaqueValue>) -> vptr = extern;
func LLVMGetGlobalValueAddress(EE: vptr!<LLVMOpaqueExecutionEngine>, Name: cptr!<byte>) -> u64 = extern;
func LLVMGetFunctionAddress(EE: vptr!<LLVMOpaqueExecutionEngine>, Name: cptr!<byte>) -> u64 = extern;
func LLVMExecutionEngineGetErrMsg(EE: vptr!<LLVMOpaqueExecutionEngine>, OutError: vptr!<vptr!<byte>>) -> i32 = extern;
func LLVMDisposeMCJITMemoryManager(MM: vptr!<LLVMOpaqueMCJITMemoryManager>) -> void = extern;
func LLVMCreateGDBRegistrationListener() -> vptr!<LLVMOpaqueJITEventListener> = extern;
func LLVMCreateIntelJITEventListener() -> vptr!<LLVMOpaqueJITEventListener> = extern;
func LLVMCreateOProfileJITEventListener() -> vptr!<LLVMOpaqueJITEventListener> = extern;
func LLVMCreatePerfJITEventListener() -> vptr!<LLVMOpaqueJITEventListener> = extern;
