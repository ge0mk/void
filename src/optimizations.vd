import std/core;
import std/io;
import std/string;

import program;

// if expr is copy constructor call
//     and lhs is variable and removeDereference(rhs) is call
// -> replace result var of rhs with lhs and replace expr with rhs
func eliminateCallResultCopies(call: &&CallExpr, cu: &CompilationUnit) -> void {
	if !call.function.is_copy_constructor {
		return;
	}

	const lhs = call.parameters[0u];
	const result_var = cu.getASTNode(lhs) as VarInvokeExpr else {
		return;
	}

	const rhs_call = cu.getASTNode(cu.removeDereference(call.parameters[1u])) as CallExpr else {
		return;
	}

	if rhs_call.result_var.isEmpty() {
		return;
	}

	call = rhs_call;
	call.result_var.destructor_call = cu.getEmptyNode();
	call.result_var.is_unused = true;

	call.result_var = result_var;
	match call.return_kind {
		case Variable | VariableButYieldNone -> call.return_kind = VariableButYieldNone;
		case Parameter -> {
			call.return_kind = None;
			call.parameters[0u] = lhs;
		}
		else -> panic("invalid call");
	}
}
