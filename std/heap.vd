import std/core;
import std/list;

template <T: type>
struct Heap {
	var elements: List!<T>;

	func constructor(this: &&Heap!<T>) -> void = default;
	func constructor(this: &&Heap!<T>, other: Heap!<T>) -> void = default;
	func destructor(this: &&Heap!<T>) -> void = default;

	operator =(this: &&Heap!<T>, other: Heap!<T>) -> void = default;
	operator ==(this: Heap!<T>, other: Heap!<T>) -> bool = default;

	func size(this: &Heap!<T>) -> uint {
		return this.elements.size();
	}

	func isEmpty(this: &Heap!<T>) -> bool {
		return this.elements.isEmpty();
	}

	func push(this: &&Heap!<T>, @[shallow] value: T) -> void {
		this.elements.append(value);
		this._siftDown(0u, this.elements.size() - 1);
	}

	func pop(this: &&Heap!<T>) -> T {
		var result = this.elements[this.elements.size() - 1];
		this.elements.removeLast();
		if this.elements.isEmpty() {
			return result;
		}

		swap!<T>(&&this.elements[0u], &&result);
		this._siftUp(0u);
		return result;
	}

	func popPush(this: &&Heap!<T>, value: T) -> T {
		swap!<T>(&&value, &&this.elements[0u]);
		this._siftUp(0u);
		return value;
	}

	func pushPop(this: &&Heap!<T>, value: T) -> T {
		if this.elements.isEmpty() {
			return value;
		}

		if this.elements[0u] < value {
			swap!<T>(&&value, &&this.elements[0u]);
			this._siftUp(0u);
		}

		return value;
	}

	func _siftDown(this: &&Heap!<T>, start: uint, pos: uint) -> void {
		while pos > start {
			const parent = (pos - 1) / 2;
			if this.elements[pos] < this.elements[parent] {
				swap!<T>(&&this.elements[pos], &&this.elements[parent]);
				pos = parent;
				continue;
			}
			break;
		}
	}

	func _siftUp(this: &&Heap!<T>, pos: uint) -> void {
		const start = pos;
		const end = this.elements.size();

		var child = pos * 2 + 1;
		while child < end {
			const right = child + 1;
			if right < end {
				if this.elements[right] < this.elements[child] {
					child = right;
				}
			}

			swap!<T>(&&this.elements[pos], &&this.elements[child]);
			pos = child;
			child = pos * 2 + 1;
		}

		this._siftDown(start, pos);
	}
}
