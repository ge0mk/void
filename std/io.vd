import std/core;
import std/libc/stdio;
import std/string;

func fprint(f: ptr!<FILE, true>, msg: String) -> void {
	discard libc::stdio::fwrite!<byte>(msg.data(), msg.size(), f);
}

func fprint(f: ptr!<FILE, true>, val: byte) -> void {
	discard libc::stdio::fputc(val as i32, f);
}

func fprintln(f: ptr!<FILE, true>, msg: String) -> void {
	fprint(f, msg);
	fprint(f, '\n'b);
}

func print(msg: String) -> void {
	fprint(libc::stdio::stdout(), msg);
}

func println(msg: String) -> void {
	fprintln(libc::stdio::stdout(), msg);
}

func print(val: byte) -> void {
	fprint(libc::stdio::stdout(), val);
}

func eprint(msg: String) -> void {
	fprint(libc::stdio::stderr(), msg);
}

func eprintln(msg: String) -> void {
	fprintln(libc::stdio::stderr(), msg);
}

func eprint(val: byte) -> void {
	fprint(libc::stdio::stderr(), val);
}

func assert(cond: bool, msg: String) -> void {
	if !cond {
		eprintln(msg);
		abort();
	}
}

func panic(msg: String) -> never {
	eprintln(msg);
	abort();
}
