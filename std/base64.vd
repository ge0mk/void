import std/core;
import std/array;
import std/string;

func encode(str: String) -> String {
	const lut = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	var padded = str;
	while padded.size() % 3 != 0 {
		padded.append('\0'b);
	}

	var result = String(padded.size() / 3 * 4, '\0'b);
	for i in 0u..padded.size() | 3u {
		const a = padded[i + 0] as uint;
		const b = padded[i + 1] as uint;
		const c = padded[i + 2] as uint;

		const triple = a << 16 + b << 8 + c;

		const k = i / 3 * 4;
		result[k + 0] = lut[triple >> 18 & 0x3F];
		result[k + 1] = lut[triple >> 12 & 0x3F];
		result[k + 2] = lut[triple >> 6  & 0x3F];
		result[k + 3] = lut[triple >> 0  & 0x3F];
	}

	for i in 0u..((3u - str.size() % 3) % 3) {
		result[result.size() - (i + 1)] = '='b;
	}

	return result;
}

func generateDecodeLUT() -> [uint, 256] {
	const encode_lut = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	var result: [uint, 256];

	for i in 0u..encode_lut.size() {
		result[encode_lut[i] as uint] = i;
	}

	return result;
}

func decode(str: String) -> String {
	const lut = generateDecodeLUT();

	var result = String(str.size() / 4 * 3, '\0'b);
	for i in 0u..str.size() | 4u {
		const a = lut[str[i + 0] as uint];
		const b = lut[str[i + 1] as uint];
		const c = lut[str[i + 2] as uint];
		const d = lut[str[i + 3] as uint];

		const triple = a << 18 + b << 12 + c << 6 + d;

		const k = i / 4 * 3;
		result[k + 0] = ((triple >> 16) & 0xFF) as byte;
		result[k + 1] = ((triple >> 8) & 0xFF) as byte;
		result[k + 2] = (triple & 0xFF) as byte;
	}

	if str[str.size() - 1] == '='b {
		result.size--;
	}

	if str[str.size() - 2] == '='b {
		result.size--;
	}

	return result;
}
