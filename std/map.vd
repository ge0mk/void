import std/core;
import std/range;

import std/libc/stdlib;
import std/libc/string;

template <Tkey: type, Tvalue: type>
struct MapIterator {
	var keys: cptr!<Tkey>;
	var values: cptr!<Tvalue>;
	var end: cptr!<Tkey>;

	func constructor(this: &&MapIterator!<Tkey, Tvalue>, keys: cptr!<Tkey>, values: cptr!<Tvalue>, end: cptr!<Tkey>) -> void {
		this.keys := keys;
		this.values := values;
		this.end := end;
	}

	func constructor(this: &&MapIterator!<Tkey, Tvalue>, other: MapIterator!<Tkey, Tvalue>) -> void = default;
	func destructor(this: &&MapIterator!<Tkey, Tvalue>) -> void = default;

	func hasNext(this: &MapIterator!<Tkey, Tvalue>) -> bool {
		return this.keys < this.end;
	}

	func getNext(this: &&MapIterator!<Tkey, Tvalue>) -> (key: Tkey, value: Tvalue) {
		assert(this.keys < this.end, Error::EINVAL);

		this.keys = this.keys + 1;
		this.values = this.values + 1;
		return (key: this.keys[-1], value: this.values[-1]);
	}
}

template <Tkey: type, Tvalue: type>
struct Map {
	var keys: vptr!<Tkey>;
	var values: vptr!<Tvalue>;
	var size: uint;
	var capacity: uint;

	func constructor(this: &&Map!<Tkey, Tvalue>) -> void {
		this.keys := vptr::null() as vptr!<Tkey>;
		this.values := vptr::null() as vptr!<Tvalue>;
		this.size := 0;
		this.capacity := 0;
	}

	func constructor(this: &&Map!<Tkey, Tvalue>, other: Map!<Tkey, Tvalue>) -> void {
		this.keys := vptr::null() as vptr!<Tkey>;
		this.values := vptr::null() as vptr!<Tvalue>;
		this.size := 0;
		this.capacity := 0;

		this.grow(other.size());
		for index in 0u..other.size() {
			this.keys[index].constructor(other.keys[index]);
			this.values[index].constructor(other.values[index]);
		}
		this.size = other.size();
	}

	func destructor(this: &&Map!<Tkey, Tvalue>) -> void {
		this.clear();

		if this.keys != vptr::null() {
			libc::stdlib::free(this.keys as vptr);
			libc::stdlib::free(this.values as vptr);
		}
	}

	operator =(this: &&Map!<Tkey, Tvalue>, other: Map!<Tkey, Tvalue>) -> void {
		this.clear();

		this.grow(other.size());
		for index in 0u..other.size() {
			this.keys[index].constructor(other.keys[index]);
			this.values[index].constructor(other.values[index]);
		}
		this.size = other.size();
	}

	func size(this: &Map!<Tkey, Tvalue>) -> uint {
		return this.size;
	}

	func isEmpty(this: &Map!<Tkey, Tvalue>) -> bool {
		return this.size == 0u;
	}

	func keys(this: &Map!<Tkey, Tvalue>) -> Range!<Tkey, false> {
		return Range!<Tkey, false>(this.keys as cptr!<Tkey>, this.size);
	}

	func values(this: &Map!<Tkey, Tvalue>) -> Range!<Tvalue, false> {
		return Range!<Tvalue, false>(this.values as cptr!<Tvalue>, this.size);
	}

	func iterator(this: &Map!<Tkey, Tvalue>) -> MapIterator!<Tkey, Tvalue> {
		return MapIterator!<Tkey, Tvalue>(this.keys as cptr!<Tkey>, this.values as cptr!<Tvalue>, this.keys as cptr!<Tkey> + this.size());
	}

	operator ==(@[shallow] this: Map!<Tkey, Tvalue>, @[shallow] other: Map!<Tkey, Tvalue>) -> bool {
		if this.size() != other.size() {
			return false;
		}

		for i in 0u..this.size() {
			if this.keys[i] != other.keys[i] {
				return false;
			}

			if this.values[i] != other.values[i] {
				return false;
			}
		}

		return true;
	}

	func getInsertPos(this: &Map!<Tkey, Tvalue>, @[shallow] key: Tkey, exact_match: &&bool) -> uint {
		var min = 0u;
		var max = this.size;
		var index = this.size / 2u;

		while min < max {
			const order = key <=> this.keys[index];
			if order < 0 {
				max = index;
			} else if order > 0 {
				min = index + 1u;
			} else {
				exact_match = true;
				return index;
			}
			index = (min + max) / 2u;
		}

		return index;
	}

	func contains(this: &Map!<Tkey, Tvalue>, @[shallow] key: Tkey) -> bool {
		var exact_match = false;
		discard this.getInsertPos(key, &&exact_match);
		return exact_match;
	}

	func set(this: &&Map!<Tkey, Tvalue>, @[shallow] key: Tkey, @[shallow] value: Tvalue) -> void {
		var exact_match = false;
		const index = this.getInsertPos(key, &&exact_match);
		if exact_match {
			this.values[index] = value;
			return;
		}

		this.grow();

		memmove!<Tkey>(this.keys + index + 1, this.keys as cptr!<Tkey> + index, this.size - index);
		memmove!<Tvalue>(this.values + index + 1, this.values as cptr!<Tvalue> + index, this.size - index);

		this.keys[index].constructor(key);
		this.values[index].constructor(value);
		this.size += 1u;
	}

	func get(this: &Map!<Tkey, Tvalue>, @[shallow] key: Tkey) -> Optional!<Tvalue> {
		var exact_match = false;
		const index = this.getInsertPos(key, &&exact_match);
		if exact_match {
			return Some(this.values[index]);
		}

		return None;
	}

	func getOrDefault(this: &Map!<Tkey, Tvalue>, @[shallow] key: Tkey) -> Tvalue {
		var exact_match = false;
		const index = this.getInsertPos(key, &&exact_match);
		if exact_match {
			return this.values[index];
		}

		var d: Tvalue;
		return d;
	}

	func remove(this: &&Map!<Tkey, Tvalue>, @[shallow] key: Tkey) -> void {
		var exact_match = false;
		const index = this.getInsertPos(key, &&exact_match);
		if !exact_match {
			return;
		}

		this.keys[index].destructor();
		this.values[index].destructor();
		this.size -= 1u;

		memmove!<Tkey>(this.keys + index, this.keys as cptr!<Tkey> + index + 1, this.size - index);
		memmove!<Tvalue>(this.values + index, this.values as cptr!<Tvalue> + index + 1, this.size - index);
	}

	operator [](this: &&Map!<Tkey, Tvalue>, @[shallow] key: Tkey) -> &&Tvalue {
		var exact_match = false;
		const index = this.getInsertPos(key, &&exact_match);
		if exact_match {
			return &&this.values[index];
		}

		this.grow();

		memmove!<Tkey>(this.keys + index + 1, this.keys as cptr!<Tkey> + index, this.size - index);
		memmove!<Tvalue>(this.values + index + 1, this.values as cptr!<Tvalue> + index, this.size - index);

		this.keys[index].constructor(key);
		this.values[index].constructor();
		this.size += 1u;

		return &&this.values[index];
	}

	func clear(this: &&Map!<Tkey, Tvalue>) -> void {
		for index in 0u..this.size {
			this.keys[index].destructor();
			this.values[index].destructor();
		}

		this.size = 0u;
	}

	// ensure that memory for at least one more element is available
	func grow(this: &&Map!<Tkey, Tvalue>) -> void {
		if this.size < this.capacity {
			return;
		}

		this.grow(this.size * 3u / 2u + 1u);
	}

	// ensure that memory for at least 'new_capacity' elements is available
	func grow(this: &&Map!<Tkey, Tvalue>, new_capacity: uint) -> void {
		const old_capacity = this.capacity;
		if old_capacity >= new_capacity {
			return;
		}

		var new_keys: vptr!<Tkey>;
		var new_values: vptr!<Tvalue>;
		if this.keys == vptr::null() {
			new_keys = libc::stdlib::malloc(new_capacity * sizeOf!<Tkey>()) as vptr!<Tkey>;
			new_values = libc::stdlib::malloc(new_capacity * sizeOf!<Tvalue>()) as vptr!<Tvalue>;
		} else {
			new_keys = libc::stdlib::realloc(this.keys as vptr, new_capacity * sizeOf!<Tkey>()) as vptr!<Tkey>;
			new_values = libc::stdlib::realloc(this.values as vptr, new_capacity * sizeOf!<Tvalue>()) as vptr!<Tvalue>;
		}

		assert(new_keys != vptr::null() && new_values != vptr::null(), Error::ENOMEM);

		this.keys = new_keys;
		this.values = new_values;
		this.capacity = new_capacity;

		memset!<Tkey>(this.keys + old_capacity, '\0'b, new_capacity - old_capacity);
		memset!<Tvalue>(this.values + old_capacity, '\0'b, new_capacity - old_capacity);
	}
}
