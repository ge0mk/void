pragma generate_std_core_builtins;

enum ReferenceKind: byte {
	case None;
	case Const;
	case Var;

	func constructor(this: &&ReferenceKind) -> void {
		this.constructor(ReferenceKind::None);
	}
}

namespace Error {
	case OK = 0;
	case EPERM = 1;
	case ENOENT = 2;
	case ESRCH = 3;
	case EINTR = 4;
	case EIO = 5;
	case ENXIO = 6;
	case E2BIG = 7;
	case ENOEXEC = 8;
	case EBADF = 9;
	case ECHILD = 10;
	case EAGAIN = 11;
	case ENOMEM = 12;
	case EACCES = 13;
	case EFAULT = 14;
	case ENOTBLK = 15;
	case EBUSY = 16;
	case EEXIST = 17;
	case EXDEV = 18;
	case ENODEV = 19;
	case ENOTDIR = 20;
	case EISDIR = 21;
	case EINVAL = 22;
	case ENFILE = 23;
	case EMFILE = 24;
	case ENOTTY = 25;
	case ETXTBSY = 26;
	case EFBIG = 27;
	case ENOSPC = 28;
	case ESPIPE = 29;
	case EROFS = 30;
	case EMLINK = 31;
	case EPIPE = 32;
	case EDOM = 33;
	case ERANGE = 34;
	case EDEADLK = 35;
	case ENAMETOOLONG = 36;
	case ENOLCK = 37;
	case ENOSYS = 38;
	case ENOTEMPTY = 39;
	case ELOOP = 40;
	case EWOULDBLOCK = 11;
	case ENOMSG = 42;
	case EIDRM = 43;
	case ECHRNG = 44;
	case EL2NSYNC = 45;
	case EL3HLT = 46;
	case EL3RST = 47;
	case ELNRNG = 48;
	case EUNATCH = 49;
	case ENOCSI = 50;
	case EL2HLT = 51;
	case EBADE = 52;
	case EBADR = 53;
	case EXFULL = 54;
	case ENOANO = 55;
	case EBADRQC = 56;
	case EBADSLT = 57;
	case EDEADLOCK = 35;
	case EBFONT = 59;
	case ENOSTR = 60;
	case ENODATA = 61;
	case ETIME = 62;
	case ENOSR = 63;
	case ENONET = 64;
	case ENOPKG = 65;
	case EREMOTE = 66;
	case ENOLINK = 67;
	case EADV = 68;
	case ESRMNT = 69;
	case ECOMM = 70;
	case EPROTO = 71;
	case EMULTIHOP = 72;
	case EDOTDOT = 73;
	case EBADMSG = 74;
	case EOVERFLOW = 75;
	case ENOTUNIQ = 76;
	case EBADFD = 77;
	case EREMCHG = 78;
	case ELIBACC = 79;
	case ELIBBAD = 80;
	case ELIBSCN = 81;
	case ELIBMAX = 82;
	case ELIBEXEC = 83;
	case EILSEQ = 84;
	case ERESTART = 85;
	case ESTRPIPE = 86;
	case EUSERS = 87;
	case ENOTSOCK = 88;
	case EDESTADDRREQ = 89;
	case EMSGSIZE = 90;
	case EPROTOTYPE = 91;
	case ENOPROTOOPT = 92;
	case EPROTONOSUPPORT = 93;
	case ESOCKTNOSUPPORT = 94;
	case EOPNOTSUPP = 95;
	case EPFNOSUPPORT = 96;
	case EAFNOSUPPORT = 97;
	case EADDRINUSE = 98;
	case EADDRNOTAVAIL = 99;
	case ENETDOWN = 100;
	case ENETUNREACH = 101;
	case ENETRESET = 102;
	case ECONNABORTED = 103;
	case ECONNRESET = 104;
	case ENOBUFS = 105;
	case EISCONN = 106;
	case ENOTCONN = 107;
	case ESHUTDOWN = 108;
	case ETOOMANYREFS = 109;
	case ETIMEDOUT = 110;
	case ECONNREFUSED = 111;
	case EHOSTDOWN = 112;
	case EHOSTUNREACH = 113;
	case EALREADY = 114;
	case EINPROGRESS = 115;
	case ESTALE = 116;
	case EUCLEAN = 117;
	case ENOTNAM = 118;
	case ENAVAIL = 119;
	case EISNAM = 120;
	case EREMOTEIO = 121;
	case EDQUOT = 122;
	case ENOMEDIUM = 123;
	case EMEDIUMTYPE = 124;
	case ECANCELED = 125;
	case ENOKEY = 126;
	case EKEYEXPIRED = 127;
	case EKEYREVOKED = 128;
	case EKEYREJECTED = 129;
	case EOWNERDEAD = 130;
	case ENOTRECOVERABLE = 131;
	case ERFKILL = 132;
	case EHWPOISON = 133;
	case ENOTSUP = 95;

	case EBOUNDS = 256;
	case EOPTNONE = 257;
	case EASSERTFAILED = 258;

	case EOF = -1;

	@[extern_name: "error_toCString"]
	func toCString(this: Error) -> ptr!<byte, false> = extern;
}

template <T: type>
variant Optional {
	case None;
	case Some: T;

	func constructor(this: &&Optional!<T>) -> void {
		this.constructor!<0>();	// default to None
	}

	func hasValue(this: Optional!<T>) -> bool {
		return this is Some;
	}

	func value(this: Optional!<T>) -> T {
		comptime if referenceKindOf!<T>() == ReferenceKind::Var {
			match this {
				case Some: &&value -> return &&value;
				else -> panic(Error::EOPTNONE);
			}
		} else if referenceKindOf!<T>() == ReferenceKind::Const {
			match this {
				case Some: &value -> return &value;
				else -> panic(Error::EOPTNONE);
			}
		} else {
			match this {
				case Some: value -> return value;
				else -> panic(Error::EOPTNONE);
			}
		}
	}

	operator ??(this: Optional!<T>, other: T) -> T {
		comptime if referenceKindOf!<T>() == ReferenceKind::Var {
			match this {
				case Some: &&value -> return &&value;
				else -> return &&other;
			}
		} else if referenceKindOf!<T>() == ReferenceKind::Const {
			match this {
				case Some: &value -> return &value;
				else -> return &other;
			}
		} else {
			match this {
				case Some: value -> return value;
				else -> return other;
			}
		}
	}

	operator ??(this: Optional!<T>, other: Optional!<T>) -> Optional!<T> {
		match this {
			case Some -> return this;
			else -> return other;
		}
	}
}

template <Tok: type, Terr: type>
variant Result {
	case Ok: Tok;
	case Error: Terr;

	func hasValue(this: Result!<Tok, Terr>) -> bool {
		return this is Ok;
	}

	func hasError(this: Result!<Tok, Terr>) -> bool {
		return this is Error;
	}

	func value(this: Result!<Tok, Terr>) -> Tok {
		comptime if referenceKindOf!<Tok>() == ReferenceKind::Var {
			match this {
				case Ok: &&value -> return &&value;
				else -> abort();
			}
		} else if referenceKindOf!<Tok>() == ReferenceKind::Const {
			match this {
				case Ok: &value -> return &value;
				else -> abort();
			}
		} else {
			match this {
				case Ok: value -> return value;
				else -> abort();
			}
		}
	}

	func error(this: Result!<Tok, Terr>) -> Terr {
		match this {
			case Error: error -> return error;
			else -> abort();
		}
	}

	operator ??(this: Result!<Tok, Terr>, other: Tok) -> Tok {
		comptime if referenceKindOf!<Tok>() == ReferenceKind::Var {
			match this {
				case Ok: &&value -> return &&value;
				else -> return &&other;
			}
		} else if referenceKindOf!<Tok>() == ReferenceKind::Const {
			match this {
				case Ok: &value -> return &value;
				else -> return &other;
			}
		} else {
			match this {
				case Ok: value -> return value;
				else -> return other;
			}
		}
	}
}

template <Tok: type = void, Terr: type>
variant Result {
	case Ok;
	case Error: Terr;

	func hasValue(this: Result!<Tok, Terr>) -> bool {
		return this is Ok;
	}

	func hasError(this: Result!<Tok, Terr>) -> bool {
		return this is Error;
	}

	func value(this: Result!<Tok, Terr>) -> void {}

	func error(this: Result!<Tok, Terr>) -> Terr {
		match this {
			case Error: error -> return error;
			else -> abort();
		}
	}
}

template <Tok: type>
variant Result {
	case Ok: Tok;
	case Error: Error;

	func hasValue(this: Result!<Tok>) -> bool {
		return this is Ok;
	}

	func hasError(this: Result!<Tok>) -> bool {
		return this is Error;
	}

	func value(this: Result!<Tok>) -> Tok {
		comptime if referenceKindOf!<Tok>() == ReferenceKind::Var {
			match this {
				case Ok: &&value -> return &&value;
				else -> abort();
			}
		} else if referenceKindOf!<Tok>() == ReferenceKind::Const {
			match this {
				case Ok: &value -> return &value;
				else -> abort();
			}
		} else {
			match this {
				case Ok: value -> return value;
				else -> abort();
			}
		}
	}

	func error(this: Result!<Tok>) -> Error {
		match this {
			case Error: error -> return error;
			else -> abort();
		}
	}

	operator ??(this: Result!<Tok>, other: Tok) -> Tok {
		comptime if referenceKindOf!<Tok>() == ReferenceKind::Var {
			match this {
				case Ok: &&value -> return &&value;
				else -> return &&other;
			}
		} else if referenceKindOf!<Tok>() == ReferenceKind::Const {
			match this {
				case Ok: &value -> return &value;
				else -> return &other;
			}
		} else {
			match this {
				case Ok: value -> return value;
				else -> return other;
			}
		}
	}
}

template <Tok: type = void>
variant Result {
	case Ok;
	case Error: Error;

	func hasValue(this: Result!<Tok>) -> bool {
		return this is Ok;
	}

	func hasError(this: Result!<Tok>) -> bool {
		return this is Error;
	}

	func value(this: Result!<Tok>) -> void {}

	func error(this: Result!<Tok>) -> Error {
		match this {
			case Error: error -> return error;
			else -> abort();
		}
	}
}

template <Type: type, Mutable: bool>
namespace Range {
	func at(this: &Range!<Type, Mutable>, index: uint) -> Optional!<&Type> {
		if index >= this.size {
			return None;
		}

		return Some(&this.data[index]);
	}

	comptime if Mutable {
		operator [](this: &Range!<Type, Mutable>, index: uint) -> &&Type {
			assert(index < this.size, Error::EINVAL);
			return &&this.data[index];
		}
	} else {
		operator [](this: &Range!<Type, Mutable>, index: uint) -> &Type {
			assert(index < this.size, Error::EINVAL);
			return &this.data[index];
		}
	}

	func find(this: Range!<Type, Mutable>, value: Type) -> Optional!<uint> {
		for index in 0u..this.size() {
			if this.data[index] == value {
				return Some(index);
			}
		}

		return None;
	}

	func contains(this: Range!<Type, Mutable>, value: Type) -> bool {
		return this.find(value) is Some;
	}
}

template <T: type, Size: uint>
namespace Array {
	pragma finalize_std_core_array_instance;

	func iterator(this: &Array!<T, Size>) -> RangeIterator!<T, false> {
		return RangeIterator!<T, false>(this.data() as ptr!<T, false>, this.data() as ptr!<T, false> + Size);
	}

	func iterator(this: &&Array!<T, Size>) -> RangeIterator!<T, true> {
		return RangeIterator!<T, true>(this.data() as ptr!<T, true>, this.data() as ptr!<T, true> + Size);
	}

	func at(this: &Array!<T, Size>, index: uint) -> Optional!<&T> {
		if index < 0u || index >= Size {
			return None;
		}

		return Some(&this.data()[index]);
	}

	operator [](this: &Array!<T, Size>, index: uint) -> &T {
		assert(index < Size, Error::EBOUNDS);
		return &this.data()[index];
	}

	operator [](this: &&Array!<T, Size>, index: uint) -> &&T {
		assert(index < Size, Error::EBOUNDS);
		return &&this.data()[index];
	}

	operator [](this: &Array!<T, Size>, range: NumericRange!<uint>) -> Range!<T, false> {
		assert(range.end <= Size, Error::EBOUNDS);
		assert(range.start <= range.end && range.step == 1, Error::EINVAL);
		return Range!<T, false>(this.data() + range.start, range.end - range.start);
	}

	operator [](this: &&Array!<T, Size>, range: NumericRange!<uint>) -> Range!<T, true> {
		assert(range.end <= Size, Error::EBOUNDS);
		assert(range.start <= range.end && range.step == 1, Error::EINVAL);
		return Range!<T, true>(this.data() + range.start, range.end - range.start);
	}

	func range(this: &Array!<T, Size>) -> Range!<T, false> {
		return Range!<T, false>(this.data(), this.size());
	}

	func range(this: &&Array!<T, Size>) -> Range!<T, true> {
		return Range!<T, true>(this.data(), this.size());
	}

	func find(this: &Array!<T, Size>, value: T) -> Optional!<uint> {
		for index in 0u..this.size() {
			if this.data()[index] == value {
				return Some(index);
			}
		}

		return None;
	}

	func contains(this: &Array!<T, Size>, value: T) -> bool {
		return this.find(value) is Some;
	}
}
