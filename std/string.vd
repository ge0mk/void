import std/core;
import std/range;
import std/list;

import std/libc/math;
import std/libc/stdlib;
import std/libc/string;

struct String {
	var data: ptr!<byte, true>;
	var size: uint;
	var capacity: uint;
	var short_size_and_flags: uint;

	comptime const short_capacity = 31u;

	func constructor(this: &&String) -> void {
		this.data := ();
		this.size := ();
		this.capacity := ();
		this.short_size_and_flags := 3u<<62; // set short & owner bits to true
	}

	func constructor(this: &&String, other: String) -> void {
		if other.isShort() {
			this.data := other.data;
			this.size := other.size;
			this.capacity := other.capacity;
			this.short_size_and_flags := other.short_size_and_flags;
		} else {
			this.constructor(other.bytes());
		}
	}

	func constructor(this: &&String, count: uint, fill_char: byte) -> void {
		this.constructor();

		if count > short_capacity {
			this._setIsShort(false);
			this.data = malloc!<byte>(count);
		}

		this._setSize(count);
		this._setCapacity(count);

		this._fill(0u, fill_char);
	}

	func constructor(this: &&String, bytes: Range!<byte, false>) -> void {
		this.constructor();

		if bytes.size() > short_capacity {
			this._setIsShort(false);
			this.data = malloc!<byte>(bytes.size());
		}

		this._copy(0u, bytes.data(), bytes.size());

		this._setSize(bytes.size());
		this._setCapacity(bytes.size());
	}

	func fromCString(data: ptr!<byte, false>) -> String {
		return String(Range!<byte, false>(data, strlen(data)));
	}

	func fromErrorCode(error: Error) -> String {
		return String::fromCString(strerror(error));
	}

	operator =(this: &&String, other: String) -> void {
		this.grow(other.size());
		this._copy(0u, other.data(), other.size());
		this._setSize(other.size());
	}

	func destructor(this: &&String) -> void {
		if this.isOwner() && !this.isShort() {
			free!<byte>(this.data);
		}
	}

	func shortSize(this: &String) -> uint {
		return (this.short_size_and_flags >> 56) & 0b111111;
	}

	func isOwner(this: &String) -> bool {
		return (this.short_size_and_flags >> 62) as bool;
	}

	func isShort(this: &String) -> bool {
		return (this.short_size_and_flags >> 63) as bool;
	}

	func size(this: &String) -> uint {
		if this.isShort() {
			return this.shortSize();
		} else {
			return this.size;
		}
	}

	func capacity(this: &String) -> uint {
		if this.isShort() {
			return short_capacity;
		} else {
			return this.capacity;
		}
	}

	func data(this: &String) -> ptr!<byte, false> {
		if this.isShort() {
			return ptr!<ptr!<byte, true>, false>::addressOf(&this.data) as ptr!<byte, false>;
		} else {
			return this.data as ptr!<byte, false>;
		}
	}

	func vdata(this: &&String) -> ptr!<byte, true> {
		if this.isShort() {
			return ptr!<ptr!<byte, true>, true>::addressOf(&&this.data) as ptr!<byte, true>;
		} else {
			return this.data as ptr!<byte, true>;
		}
	}

	func isEmpty(this: &String) -> bool {
		return this.size() == 0u;
	}

	func bytes(this: &String) -> Range!<byte, false> {
		return Range!<byte, false>(this.data(), this.size());
	}

	operator [](this: &String, index: uint) -> &byte {
		assert(index < this.size(), Error::EBOUNDS);
		return &this.data()[index];
	}

	operator [](this: &&String, index: uint) -> &&byte {
		assert(index < this.size(), Error::EBOUNDS);
		return &&this.vdata()[index];
	}

	operator [](this: &String, range: NumericRange!<uint>) -> Range!<byte, false> {
		assert(range.end <= this.size(), Error::EBOUNDS);
		assert(range.start <= range.end && range.step == 1, Error::EINVAL);
		return Range!<byte, false>(this.data() + range.start, range.end - range.start);
	}

	func substring(this: &String, range: NumericRange!<uint>) -> String {
		return String(this[range]);
	}

	func at(this: &String, index: uint) -> Optional!<byte> {
		if index >= this.size() {
			return None;
		}

		return Some(this.data()[index]);
	}

	func clear(this: &&String) -> void {
		this._setSize(0u);
	}

	func append(this: &&String, value: byte) -> void {
		this.grow();
		this.vdata()[this.size()] = value;
		this._setSize(this.size() + 1);
	}

	func append(this: &&String, @[shallow] other: String) -> void {
		this.append(other.bytes());
	}

	func append(this: &&String, bytes: Range!<byte, false>) -> void {
		this.grow(this.size() + bytes.size());
		this._copy(this.size(), bytes.data(), bytes.size());
		this._setSize(this.size() + bytes.size());
	}

	func insert(this: &&String, index: uint, value: byte) -> void {
		assert(index <= this.size(), Error::EBOUNDS);

		this.grow();
		this._move(index + 1, index);

		this.vdata()[index] = value;
		this._setSize(this.size() + 1);
	}

	func insert(this: &&String, index: uint, @[shallow] other: String) -> void {
		this.insert(index, other.bytes());
	}

	func insert(this: &&String, index: uint, bytes: Range!<byte, false>) -> void {
		assert(index <= this.size(), Error::EBOUNDS);

		this.grow(this.size() + bytes.size());
		this._move(index + bytes.size(), index);
		this._copy(index, bytes.data(), bytes.size());
		this._setSize(this.size() + bytes.size());
	}

	func remove(this: &&String, index: uint) -> void {
		assert(index < this.size(), Error::EBOUNDS);

		this._move(index, index + 1);
		this._setSize(this.size() - 1);
	}

	func remove(this: &&String, range: NumericRange!<uint>) -> void {
		assert(range.end <= this.size(), Error::EBOUNDS);
		assert(range.start <= range.end && range.step == 1, Error::EINVAL);

		this._move(range.start, range.end);
		this._setSize(this.size() - (range.end - range.start));
	}

	func find(this: &String, start: uint, value: byte) -> Optional!<uint> {
		if start >= this.size() {
			return None;
		}

		const pos = memchr(this.data() + start, value as i32, this.size() - start);
		if pos == ptr!<byte, false>::null() {
			return None;
		}

		return Some((pos - this.data()) as uint);
	}

	func find(this: &String, start: uint, @[shallow] needle: String) -> Optional!<uint> {
		if start >= this.size() {
			return None;
		}

		const pos = memmem(this.data() + start, this.size() - start, needle.data(), needle.size());
		if pos == ptr!<byte, false>::null() {
			return None;
		}

		return Some((pos - this.data()) as uint);
	}

	func rfind(this: &String, end: uint, value: byte) -> Optional!<uint> {
		if end >= this.size() {
			return None;
		}

		const pos = memrchr(this.data(), value as i32, this.size() - end);
		if pos == ptr!<byte, false>::null() {
			return None;
		}

		return Some((pos - this.data()) as uint);
	}

	func find(this: &String, value: byte) -> Optional!<uint> {
		return this.find(0u, value);
	}

	func find(this: &String, @[shallow] needle: String) -> Optional!<uint> {
		return this.find(0u, needle);
	}

	func rfind(this: &String, value: byte) -> Optional!<uint> {
		return this.rfind(0u, value);
	}

	func contains(this: &String, value: byte) -> bool {
		return this.find(value) is Some;
	}

	func contains(this: &String, @[shallow] needle: String) -> bool {
		return this.find(needle) is Some;
	}

	func replace(this: &&String, range: NumericRange!<uint>, @[shallow] with: String) -> void {
		assert(range.end <= this.size(), Error::EBOUNDS);
		assert(range.start <= range.end && range.step == 1u, Error::EINVAL);

		const difference = with.size() as int - (range.end - range.start) as int;
		const count = (difference if difference >= 0 else -difference) as uint;
		if difference > 0 {
			this.grow(this.size() + count);
		}

		this._move((range.end as int + difference) as uint, range.end);
		this._copy(range.start, with.data(), with.size());

		if difference < 0 {
			this._setSize(this.size() - count);
		} else {
			this._setSize(this.size() + count);
		}
	}

	func replace(this: &&String, @[shallow] pattern: byte, @[shallow] with: String) -> void {
		var start = 0u;
		var pos = this.find(start, pattern);

		while pos.hasValue() {
			const index = pos.value();
			this.replace(index..(index + 1u), with);
			start = index + with.size();
			pos = this.find(start, pattern);
		}
	}

	func replace(this: &&String, @[shallow] pattern: String, @[shallow] with: String) -> void {
		var start = 0u;
		var pos = this.find(start, pattern);

		while pos.hasValue() {
			const index = pos.value();
			this.replace(index..(index + pattern.size()), with);
			start = index + with.size();
			pos = this.find(start, pattern);
		}
	}

	func split(this: &String, separator: byte) -> List!<String> {
		var result = List!<String>();

		var segment_start = 0u;
		var segment_end = this.find(segment_start, separator);

		while segment_end.hasValue() {
			const segment = this[segment_start..(segment_end.value())];
			result.append(String(segment));

			segment_start = segment_end.value() + 1u;
			segment_end = this.find(segment_start, separator);
		}
		const segment = this[segment_start..this.size()];
		result.append(String(segment));

		return result;
	}

	func split(this: &String, @[shallow] separator: String) -> List!<String> {
		var result = List!<String>();

		var segment_start = 0u;
		var segment_end = this.find(segment_start, separator);

		while segment_end.hasValue() {
			const segment = this[segment_start..(segment_end.value())];
			result.append(String(segment));

			segment_start = segment_end.value() + separator.size();
			segment_end = this.find(segment_start, separator);
		}
		const segment = this[segment_start..this.size()];
		result.append(String(segment));

		return result;
	}

	func join(separator: String, @[shallow] segments: List!<String>) -> String {
		var result = String();
		for i in 0u..segments.size() {
			if i != 0 {
				result.append(separator);
			}
			result.append(segments[i]);
		}
		return result;
	}

	func startsWith(this: &String, @[shallow] other: String) -> bool {
		if this.size() < other.size() {
			return false;
		}

		return this._cmp(0u, other.data(), other.size()) == 0;
	}

	func endsWith(this: &String, @[shallow] other: String) -> bool {
		if this.size() < other.size() {
			return false;
		}

		const offset = this.size() - other.size();
		return this._cmp(offset, other.data(), other.size()) == 0;
	}

	operator ==(this: String, @[shallow] other: String) -> bool {
		if this.size() != other.size() {
			return false;
		}

		return this._cmp(0u, other.data(), this.size()) == 0;
	}

	operator <=>(this: String, @[shallow] other: String) -> int {
		const r = this._cmp(0u, other.data(), uint::min(this.size(), other.size()));
		if r == 0 {
			return this.size() <=> other.size();
		} else {
			return r;
		}
	}

	operator +(lhs: String, rhs: byte) -> String {
		lhs.append(rhs);
		return lhs;
	}

	operator +(lhs: String, @[shallow] rhs: String) -> String {
		lhs.append(rhs);
		return lhs;
	}

	operator +=(this: &&String, value: byte) -> void {
		this.append(value);
	}

	operator +=(this: &&String, @[shallow] other: String) -> void {
		this.append(other);
	}

	// ensure that memory for at least one more element is available
	func grow(this: &&String) -> void {
		if this.size() < this.capacity() {
			return;
		}

		this.grow(this.size() * 3u / 2u + 1u);
	}

	// ensure that memory for at least 'new_capacity' elements is available
	func grow(this: &&String, new_capacity: uint) -> void {
		const old_capacity = this.capacity();
		if old_capacity >= new_capacity && this.isOwner() {
			return;
		}

		var new_data = ptr!<byte, true>::null();
		if !this.isOwner() || this.isShort() {
			new_data = malloc!<byte>(new_capacity);
		} else {
			new_data = realloc!<byte>(this.data, new_capacity);
		}

		assert(new_data != ptr!<byte, true>::null(), Error::ENOMEM);

		const size = this.size();

		if !this.isOwner() || this.isShort() {
			memcpy!<byte>(new_data, this.data(), old_capacity);
			this._setIsOwner(true);
			this._setIsShort(false);
		}

		memset!<byte>(new_data + old_capacity, '\0'b, new_capacity - old_capacity);

		this.data = new_data;
		this._setSize(size);
		this._setCapacity(new_capacity);
	}

	func _setSize(this: &&String, value: uint) -> void {
		if this.isShort() {
			this.short_size_and_flags = (this.short_size_and_flags & ~(0b111111u << 56)) | (value << 56);
		} else {
			this.size = value;
		}
	}

	func _setCapacity(this: &&String, value: uint) -> void {
		if !this.isShort() {
			this.capacity = value;
		}
	}

	func _setIsOwner(this: &&String, value: bool) -> void {
		this.short_size_and_flags = this.short_size_and_flags & ~(1u << 62) | (value as uint << 62);
	}

	func _setIsShort(this: &&String, value: bool) -> void {
		this.short_size_and_flags = this.short_size_and_flags & ~(1u << 63) | (value as uint << 63);
	}

	func _fill(this: &&String, start: uint, fill_char: byte) -> void {
		memset!<byte>(this.vdata() as ptr!<byte, true> + start, fill_char, this.size() - start);
	}

	func _move(this: &&String, dst: uint, src: uint) -> void {
		const data = this.vdata();
		memmove!<byte>(data + dst, data as ptr!<byte, false> + src, this.size() - src);
	}

	func _copy(this: &&String, dst: uint, src: ptr!<byte, false>, length: uint) -> void {
		memcpy!<byte>(this.vdata() + dst, src as ptr!<byte, false>, length);
	}

	func _cmp(this: &String, offset: uint, other_data: ptr!<byte, false>, length: uint) -> int {
		return strncmp(this.data() + offset, other_data, length) as int;
	}
}

// number: (0[bodx])?[0-9]+(\.[0-9]+(e[+-]?[0-9]+)?)?
// base set by prefix 0[bodx], default 10 (decimal)
// significant = [0-9]+(\.[0-9]+)? (decimal point is ignored)
// exponent = 'e[+-]?[0-9]+' - offset of decimal point from the right
// length = # of parsed bytes
struct ParsedNumber {
	var significant: int;
	var base: int;
	var exponent: int;
	var length: uint;
	var contains_decimal_point: bool;
	var contains_exponent: bool;

	func constructor(this: &&ParsedNumber, significant: int, base: int, exponent: int, length: uint, contains_decimal_point: bool, contains_exponent: bool) -> void {
		this.significant := significant;
		this.base := base;
		this.exponent := exponent;
		this.length := length;
		this.contains_decimal_point := contains_decimal_point;
		this.contains_exponent := contains_exponent;

		this.normalize();
	}

	func constructor(this: &&ParsedNumber, other: ParsedNumber) -> void = default;
	func destructor(this: &&ParsedNumber) -> void = default;

	operator =(this: &&ParsedNumber, other: ParsedNumber) -> void = default;

	operator ==(this: ParsedNumber, other: ParsedNumber) -> bool = default;

	// remove trailing zeros in the significant: 100 * 10^0 -> 1 * 10^2
	func normalize(this: &&ParsedNumber) -> void {
		if this.significant == 0 {
			return;
		}

		while this.significant % this.base == 0 {
			this.significant /= this.base;
			this.exponent += 1;
		}
	}

	func toInt(this: &ParsedNumber) -> int {
		const power = this.exponent if this.exponent > 0 else -this.exponent;
		var result = this.significant;
		var i = 0;

		while i < power {
			if this.exponent < 0 {
				result /= this.base;
			} else {
				result *= this.base;
			}
			i++;
		}

		return result;
	}

	func toFloat(this: &ParsedNumber) -> f64 {
		return this.significant as f64 * pow(this.base as f64, this.exponent as f64);
	}

	func isInteger(this: &ParsedNumber) -> bool {
		if this.exponent >= 0 {
			return true;
		}

		const power = -this.exponent;
		var result = this.significant;
		var i = 0;

		while i < power {
			if result % this.base != 0 { // next division would produce decimals
				return false;
			}

			result /= this.base;
			i++;
		}

		return true;
	}
}

func isAlpha(val: byte) -> bool {
	return (val >= 'A'b && val <= 'Z'b) || (val >= 'a'b && val <= 'z'b);
}

func isDigit(val: byte) -> bool {
	return val >= '0'b && val <= '9'b;
}

func isSpace(b: byte) -> bool {
	return b == ' 'b || b == '\t'b || b == '\n'b || b == '\r'b;
}

func isDigit(val: byte, base: int) -> bool {
	match base {
		case 2 -> return val == '0'b || val == '1'b;
		case 8 -> return val >= '0'b && val <= '7'b;
		case 10 -> return val >= '0'b && val <= '9'b;
		case 16 -> return (val >= '0'b && val <= '9'b)
						|| (val >= 'A'b && val <= 'F'b)
						|| (val >= 'a'b && val <= 'f'b);
		else -> return val >= '0'b && val <= '9'b;
	}
}

func parseDigit(val: byte, base: int) -> int {
	match base {
		case 16 -> {
			if val >= '0'b && val <= '9'b {
				return val as int - '0'b as int;
			} else if val >= 'A'b && val <= 'F'b {
				return val as int - 'A'b as int + 10;
			} else if val >= 'a'b && val <= 'f'b {
				return val as int - 'a'b as int + 10;
			} else {
				return -1;
			}
		}
		else -> return val as int - '0'b as int;
	}
}

func parseNumber(str: String, start: uint) -> ParsedNumber {
	if start >= str.size() {
		return ParsedNumber(0, 0, 0, 0u, false, false);
	}

	var index = start;
	var negative = false;
	var significant = 0;
	var base = 10;
	var exponent = 0;
	var offset = 0;

	var contains_decimal_point = false;
	var contains_exponent = false;

	if str[index] == '-'b && str.size() - index >= 2 {
		negative = true;
		index++;
	}

	if !isDigit(str[index], base) {
		return ParsedNumber(0, 0, 0, 0u, false, false);
	}

	if str.size() - index >= 3 {
		if str[index] == '0'b && isAlpha(str[index + 1]) {
			match str[index + 1] {
				case 'b'b -> base = 2;
				case 'o'b -> base = 8;
				case 'd'b -> base = 10;
				case 'x'b -> base = 16;
				else -> return ParsedNumber(0, 10, 0, 1u, false, false);
			}

			if isDigit(str[index + 2], base) {
				index += 2;
			} else {
				// 0x -> number 0 with postfix x
				return ParsedNumber(0, 10, 0, 1u, false, false);
			}
		}
	}

	while isDigit(str[index], base) {
		const digit = parseDigit(str[index], base);
		significant = significant * base + digit;
		index++;

		if index >= str.size() {
			break;
		}
	}

	if str.size() - index >= 2 {
		if str[index] == '.'b && isDigit(str[index + 1], base) {
			contains_decimal_point = true;
			index++;

			while isDigit(str[index], base) {
				const digit = parseDigit(str[index], base);
				significant = significant * base + digit;
				offset++;
				index++;

				if index >= str.size() {
					break;
				}
			}
		}
	}

	if negative {
		significant *= -1;
	}

	const significant_end = index;

	if str.size() - index >= 2 {
		if str[index] == 'e'b || str[index] == 'E'b {
			contains_exponent = true;
			index++;

			var exponent_sign = 1;
			if str[index] == '-'b {
				exponent_sign = -1;
				index++;
			} else if str[index] == '+'b {
				index++;
			}

			if !isDigit(str[index], base) {
				return ParsedNumber(significant, base, exponent - offset, significant_end - start, contains_decimal_point, false);
			}

			while isDigit(str[index], base) {
				const digit = parseDigit(str[index], base);
				exponent = exponent * base + digit;
				index++;

				if index >= str.size() {
					break;
				}
			}

			exponent *= exponent_sign;
		}
	}

	return ParsedNumber(significant, base, exponent - offset, index - start, contains_decimal_point, contains_exponent);
}
