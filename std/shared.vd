import std/core;
import std/libc/stdlib;

template <T: type>
struct refc {
	var strong_count: uint;
	var weak_count: uint;
	var value: T;
}

template <T: type>
struct SharedPtr {
	var data: ptr!<refc!<T>, true>;

	func constructor(this: &&SharedPtr!<T>, @[shallow] value: T) -> void {
		this.data := malloc!<refc!<T>>(1u);
		this.data[0u].strong_count = 1;
		this.data[0u].weak_count = 1;
		this.data[0u].value.constructor(value);
	}

	func destructor(this: &&SharedPtr!<T>) -> void {
		assert(this.data[0u].strong_count > 0);

		this.data[0u].strong_count--;
		if this.data[0u].strong_count == 0 {
			this.data[0u].value.destructor();
			this.data[0u].weak_count--;
		}

		if this.data[0u].weak_count == 0 {
			free!<refc!<T>>(this.data);
		}
	}

	func constructor(this: &&SharedPtr!<T>, other: SharedPtr!<T>) -> void {
		this.data := other.data;
		this.data[0u].strong_count++;
	}

	func constructor(this: &&SharedPtr!<T>, @[shallow] other: WeakPtr!<T>) -> void {
		assert(other.data != ptr!<refc!<T>, true>::null());

		this.data := other.data;
		this.data[0u].strong_count++;
	}

	operator =(this: &&SharedPtr!<T>, other: SharedPtr!<T>) -> void {
		this.destructor();
		this.constructor(other);
	}

	operator ==(this: SharedPtr!<T>, other: SharedPtr!<T>) -> bool = default;
	operator <=>(this: SharedPtr!<T>, other: SharedPtr!<T>) -> int = default;

	func new(@[shallow] value: T) -> SharedPtr!<T> {
		return SharedPtr!<T>(value);
	}

	operator unwrap(@[shallow] this: SharedPtr!<T>) -> T {
		return this.data[0u].value;
	}

	operator unwrap(this: &SharedPtr!<T>) -> &T {
		return &this.data[0u].value;
	}

	operator unwrap(this: &&SharedPtr!<T>) -> &&T {
		return &&this.data[0u].value;
	}
}

template <T: type>
struct WeakPtr {
	var data: ptr!<refc!<T>, true>;

	func constructor(this: &&WeakPtr!<T>) -> void = default;

	func constructor(this: &&WeakPtr!<T>, @[shallow] other: SharedPtr!<T>) -> void {
		this.data := other.data;
		if this.data != ptr!<refc!<T>, true>::null() {
			this.data[0u].weak_count++;
		}
	}

	func constructor(this: &&WeakPtr!<T>, other: WeakPtr!<T>) -> void {
		this.data := other.data;
		if this.data != ptr!<refc!<T>, true>::null() {
			this.data[0u].weak_count++;
		}
	}

	func destructor(this: &&WeakPtr!<T>) -> void {
		if this.data == ptr!<refc!<T>, true>::null() {
			return;
		}

		assert(this.data[0u].weak_count > 0);

		this.data[0u].weak_count--;
		if this.data[0u].weak_count == 0 {
			free!<refc!<T>>(this.data);
		}
	}

	operator =(this: &&WeakPtr!<T>, other: WeakPtr!<T>) -> void {
		this.destructor();
		this.constructor(other);
	}

	func isAlive(this: &WeakPtr!<T>) -> bool {
		if this.data == ptr!<refc!<T>, true>::null() {
			return false;
		}

		return this.data[0u].strong_count > 0;
	}

	func isEmpty(this: &WeakPtr!<T>) -> bool {
		if this.data == ptr!<refc!<T>, true>::null() {
			return true;
		}

		return this.data[0u].strong_count == 0;
	}

	func lock(this: &WeakPtr!<T>) -> Optional!<SharedPtr!<T>> {
		if this.data == ptr!<refc!<T>, true>::null() {
			return None;
		}

		if this.data[0u].strong_count <= 0 {
			return None;
		}

		return Some(SharedPtr!<T>(this));
	}

	func forceLock(this: &WeakPtr!<T>) -> SharedPtr!<T> {
		assert(this.data != ptr!<refc!<T>, true>::null(), Error::EOPTNONE);
		assert(this.data[0u].strong_count > 0, Error::EOPTNONE);

		return SharedPtr!<T>(this);
	}

	operator ==(this: WeakPtr!<T>, other: WeakPtr!<T>) -> bool = default;
	operator <=>(this: WeakPtr!<T>, other: WeakPtr!<T>) -> int = default;
}
