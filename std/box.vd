import std/core;
import std/libc/stdlib;

template <T: type>
struct Box {
	var data: ptr!<T, true>;

	func constructor(this: &&Box!<T>, @[shallow] other: Box!<T>) -> void {
		this.data := malloc!<T>(1u);
		assert(this.data != ptr!<T, true>::null(), Error::ENOMEM);
		this.data[0u].constructor(other.data[0u]);
	}

	func constructor(this: &&Box!<T>, @[shallow] value: T) -> void {
		this.data := malloc!<T>(1u);
		assert(this.data != ptr!<T, true>::null(), Error::ENOMEM);
		this.data[0u].constructor(value);
	}

	func destructor(this: &&Box!<T>) -> void {
		this.data[0u].destructor();
		free!<T>(this.data);
	}

	operator =(this: &&Box!<T>, @[shallow] other: Box!<T>) -> void {
		this.data[0u] = other.data[0u];
	}

	operator =(this: &&Box!<T>, @[shallow] value: T) -> void {
		this.data[0u] = value;
	}

	operator ==(@[shallow] this: Box!<T>, @[shallow] other: Box!<T>) -> bool {
		return this.data[0u] == other.data[0u];
	}

	operator ==(@[shallow] this: Box!<T>, @[shallow] value: T) -> bool {
		return this.data[0u] == value;
	}

	operator unwrap(this: &Box!<T>) -> &T {
		return &this.data[0u];
	}

	operator unwrap(this: &&Box!<T>) -> &&T {
		return &&this.data[0u];
	}
}
