import std/core;
import std/string;
import std/list;
import std/map;
import std/format;

variant Value {
	case Null;
	case Boolean: bool;
	case Number: int;
	case String: String;
	case Array: List!<Value>;
	case Object: Map!<String, Value>;

	func constructor(this: &&Value) {
		this.constructor!<0>();
	}
}

func skipWhitespace(str: &String, index: &&uint) {
	while index < str.size() {
		if !isSpace(str[index]) {
			break;
		}
		index++;
	}
}

func parse(str: &String, index: &&uint) -> Result!<Value> {
	skipWhitespace(&str, &&index);
	match str[index] {
		case '['b -> {
			index++;
			skipWhitespace(&str, &&index);

			var children: List!<Value>;
			while index < str.size() {
				if str[index] == ']'b {
					index++;
					break;
				}

				const child = try parse(&str, &&index);
				children.append(child);

				skipWhitespace(&str, &&index);
				if str[index] != ']'b {
					if str[index] == ','b {
						index++;
						skipWhitespace(&str, &&index);
					} else {
						throw Error::EINVAL;
					}
				}
			}

			return Ok(Value::Array(children));
		}
		case '{'b -> {
			index++;
			skipWhitespace(&str, &&index);

			var children: Map!<String, Value>;
			while index < str.size() {
				if str[index] == '}'b {
					index++;
					break;
				}

				var name = "";
				match try parse(&str, &&index) {
					case String: value -> name = value;
					else -> throw Error::EINVAL;
				}

				skipWhitespace(&str, &&index);
				if str[index] != ':'b {
					throw Error::EINVAL;
				}
				index++;

				const value = try parse(&str, &&index);
				children.set(name, value);

				skipWhitespace(&str, &&index);
				if str[index] != '}'b {
					if str[index] == ','b {
						index++;
						skipWhitespace(&str, &&index);
					} else {
						throw Error::EINVAL;
					}
				}
			}

			return Ok(Value::Object(children));
		}
		case '"'b -> {
			index++;

			const start = index;
			while index < str.size() {
				if str[index] == '"'b {
					index++;
					break;
				}

				index++;
			}
			const end = index - 1;

			const val = str.substring(start..end);
			return Ok(Value::String(val));
		}
		else -> {
			if isAlpha(str[index]) {
				const start = index;
				while index < str.size() {
					if !isAlpha(str[index]) {
						break;
					}
					index++;
				}

				const keyword = str.substring(start..index);
				if keyword == "null" {
					return Ok(Value::Null);
				} else if keyword == "true" {
					return Ok(Value::Boolean(true));
				} else if keyword == "false" {
					return Ok(Value::Boolean(false));
				} else {
					throw Error::EINVAL;
				}
			} else {
				const number = parseNumber(str, index);
				if number.length == 0 {
					throw Error::EINVAL;
				}

				index += number.length;
				return Ok(Value::Number(number.toInt()));
			}
		}
	}
}

func parse(str: String) -> Result!<Value> {
	var index = 0u;
	const result = try parse(&str, &&index);
	skipWhitespace(&str, &&index);
	if index < str.size() {
		throw Error::EINVAL;
	}
	return Ok(result);
}

func format(this: Value) -> String {
	match this {
		case Null -> return "null";
		case Boolean: val -> return format(val);
		case Number: val -> return format(val);
		case String: val -> return "\"" + val + "\"";
		case Array: children -> {
			var result = "[";
			for i in 0u..children.size() {
				if i != 0 {
					result += ", ";
				}
				result += children[i].format();
			}
			return result + "]";
		}
		case Object: children -> {
			var result = "{";
			var first = true;
			for entry in children {
				if first {
					first = false;
				} else {
					result += ", ";
				}

				result += "\"" + entry.key + "\": " + entry.value.format();
			}
			return result + "}";
		}
	}
}
