import std/core;

import std/libc/stdlib;
import std/libc/string;

template <T: type>
struct Set {
	var data: ptr!<T, true>;
	var size: uint;
	var capacity: uint;

	func constructor(this: &&Set!<T>) -> void {
		this.data := ();
		this.size := ();
		this.capacity := ();
	}

	func constructor(this: &&Set!<T>, range: Range!<T, false>) -> void {
		this.data := ();
		this.size := ();
		this.capacity := ();
		this.add(range);
	}

	func constructor(this: &&Set!<T>, other: Set!<T>) -> void {
		this.data := ptr!<T, true>::null();
		this.size := 0;
		this.capacity := 0;

		this.grow(other.size());
		for index in 0u..other.size() {
			this.data[index].constructor(other.data[index]);
		}
		this.size = other.size();
	}

	operator =(this: &&Set!<T>, other: Set!<T>) -> void {
		this.clear();
		this.grow(other.size());

		for index in 0u..other.size() {
			this.data[index].constructor(other.data[index]);
		}
		this.size = other.size();
	}

	func destructor(this: &&Set!<T>) -> void {
		this.clear();

		if this.data != ptr!<T, true>::null() {
			free!<T>(this.data);
		}
	}

	func size(this: &Set!<T>) -> uint {
		return this.size;
	}

	func isEmpty(this: &Set!<T>) -> bool {
		return this.size == 0u;
	}

	func data(this: &Set!<T>) -> ptr!<T, false> {
		return this.data as ptr!<T, false>;
	}

	func range(this: &Set!<T>) -> Range!<T, false> {
		return Range!<T, false>(this.data as ptr!<T, false>, this.size);
	}

	func iterator(this: &Set!<T>) -> RangeIterator!<T, false> {
		return RangeIterator!<T, false>(this.data as ptr!<T, false>, this.data as ptr!<T, false> + this.size);
	}

	func getInsertPos(this: &Set!<T>, @[shallow] value: T, exact_match: &&bool) -> uint {
		var min = 0u;
		var max = this.size;
		var index = this.size / 2u;

		while min < max {
			const order = value <=> this.data[index];
			if order < 0 {
				max = index;
			} else if order > 0 {
				min = index + 1u;
			} else {
				exact_match = true;
				return index;
			}
			index = (min + max) / 2u;
		}

		return index;
	}

	func contains(this: &Set!<T>, @[shallow] value: T) -> bool {
		var exact_match = false;
		discard this.getInsertPos(value, &&exact_match);
		return exact_match;
	}

	func add(this: &&Set!<T>, @[shallow] value: T) -> void {
		var exact_match = false;
		const index = this.getInsertPos(value, &&exact_match);
		if exact_match {
			return;
		}

		this.grow();

		memmove!<T>(this.data + index + 1, this.data as ptr!<T, false> + index, this.size - index);

		this.data[index].constructor(value);
		this.size += 1u;
	}

	func add(this: &&Set!<T>, range: Range!<T, false>) -> void {
		for value in range {
			this.add(value);
		}
	}

	func add(this: &&Set!<T>, @[shallow] other: Set!<T>) -> void {
		for value in other {
			this.add(value);
		}
	}

	func remove(this: &&Set!<T>, @[shallow] value: T) -> void {
		var exact_match = false;
		const index = this.getInsertPos(value, &&exact_match);
		if !exact_match {
			return;
		}

		this.data[index].destructor();
		this.size -= 1u;
		memmove!<T>(this.data + index, this.data as ptr!<T, false> + index + 1, this.size - index);
	}

	func remove(this: &&Set!<T>, range: Range!<T, false>) -> void {
		for value in range {
			this.remove(value);
		}
	}

	func remove(this: &&Set!<T>, @[shallow] other: Set!<T>) -> void {
		for value in other {
			this.remove(value);
		}
	}

	func clear(this: &&Set!<T>) -> void {
		for index in 0u..this.size() {
			this.data[index].destructor();
		}
		this.size = 0u;
	}

	operator ==(@[shallow] this: Set!<T>, @[shallow] other: Set!<T>) -> bool {
		if this.size() != other.size() {
			return false;
		}

		for i in 0u..this.size() {
			if this.data[i] != other.data[i] {
				return false;
			}
		}

		return true;
	}

	// union
	operator |(lhs: Set!<T>, @[shallow] rhs: Set!<T>) -> Set!<T> {
		for element in rhs {
			lhs.add(element);
		}

		return lhs;
	}

	// intersection
	operator &(@[shallow] lhs: Set!<T>, @[shallow] rhs: Set!<T>) -> Set!<T> {
		var result = Set!<T>();

		for element in lhs {
			if rhs.contains(element) {
				result.add(element);
			}
		}

		return result;
	}

	// difference
	operator -(@[shallow] lhs: Set!<T>, @[shallow] rhs: Set!<T>) -> Set!<T> {
		var result = Set!<T>();

		for element in lhs {
			if !rhs.contains(element) {
				result.add(element);
			}
		}

		return result;
	}

	// symetric difference
	operator ^(@[shallow] lhs: Set!<T>, @[shallow] rhs: Set!<T>) -> Set!<T> {
		var result = Set!<T>();

		for element in lhs {
			if !rhs.contains(element) {
				result.add(element);
			}
		}

		for element in rhs {
			if !lhs.contains(element) {
				result.add(element);
			}
		}

		return result;
	}

	// ensure that memory for at least one more element is available
	func grow(this: &&Set!<T>) -> void {
		if this.size < this.capacity {
			return;
		}

		this.grow(this.size * 3u / 2u + 1u);
	}

	// ensure that memory for at least 'new_capacity' elements is available
	func grow(this: &&Set!<T>, new_capacity: uint) -> void {
		const old_capacity = this.capacity;
		if old_capacity >= new_capacity {
			return;
		}

		var new_data: ptr!<T, true>;
		if this.data == ptr!<T, true>::null() {
			new_data = malloc!<T>(new_capacity);
		} else {
			new_data = realloc!<T>(this.data, new_capacity);
		}

		assert(new_data != ptr!<T, true>::null(), Error::ENOMEM);

		this.data = new_data;
		this.capacity = new_capacity;

		memset!<T>(this.data + old_capacity, '\0'b, new_capacity - old_capacity);
	}
}
