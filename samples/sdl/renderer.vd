import std/core;

import sdl/window;

enum RendererFlags {
	case Software      = 0x00000001;
	case Accelerated   = 0x00000002;
	case PresentVSync  = 0x00000004;
	case TargetTexture = 0x00000008;

	operator |(this: RendererFlags, other: RendererFlags) -> RendererFlags = default;
}

struct Renderer {}

@[extern_name: "SDL_CreateRenderer"]
func createRenderer(window: ptr!<Window, true>, index: i32, flags: RendererFlags) -> ptr!<Renderer, true> = extern;

@[extern_name: "SDL_DestroyRenderer"]
func destroy(renderer: ptr!<Renderer, true>) -> void = extern;

@[extern_name: "SDL_RenderClear"]
func clear(renderer: ptr!<Renderer, true>) -> void = extern;

@[extern_name: "SDL_RenderPresent"]
func present(renderer: ptr!<Renderer, true>) -> void = extern;

func SDL_SetRenderDrawColor(renderer: ptr!<Renderer, true>, r: u8, g: u8, b: u8, a: u8) -> i32 = extern;

func setDrawColor(renderer: ptr!<Renderer, true>, r: u8, g: u8, b: u8, a: u8) -> void {
	discard SDL_SetRenderDrawColor(renderer, r, g, b, a);
}

func SDL_RenderDrawRect(renderer: ptr!<Renderer, true>, rect: ptr!<Rect, false>) -> i32 = extern;
func SDL_RenderFillRect(renderer: ptr!<Renderer, true>, rect: ptr!<Rect, false>) -> i32 = extern;

func drawRect(renderer: ptr!<Renderer, true>, rect: Rect) -> void {
	discard SDL_RenderDrawRect(renderer, ptr!<Rect, false>::addressOf(&rect));
}

func fillRect(renderer: ptr!<Renderer, true>, rect: Rect) -> void {
	discard SDL_RenderFillRect(renderer, ptr!<Rect, false>::addressOf(&rect));
}

struct Rect {
	var x: i32;
	var y: i32;
	var width: i32;
	var height: i32;

	func constructor(this: &&Rect, x: i32, y: i32, width: i32, height: i32) -> void {
		this.x := x;
		this.y := y;
		this.width := width;
		this.height := height;
	}

	func constructor(this: &&Rect) -> void = default;
	func constructor(this: &&Rect, other: Rect) -> void = default;
	func destructor(this: &&Rect) -> void = default;

	operator =(this: &&Rect, other: Rect) -> void = default;
	operator ==(this: Rect, other: Rect) -> bool = default;
}
