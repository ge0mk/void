%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://www.sublimetext.com/docs/scope_naming.html
# https://raw.githubusercontent.com/kkos/oniguruma/master/doc/RE
file_extensions: [vd, void]

scope: source.void

contexts:
  main:
    - include: stmt

  stmt:
    - include: comments
    - include: decl

    - match: \bpragma\b
      scope: keyword.control
      push:
        - match: \w+
          scope: entity.name
          pop: true

    - match: \bimport\b
      scope: keyword.control.import
      push:
        - meta_scope: meta.path
        - match: (\w+)/
          captures:
            1: entity.name.namespace

        - match: \w+
          scope: entity.name.namespace
          pop: true

    - match: \balias\b
      scope: keyword.control
      push:
        - match: \w+
          scope: entity.name.class
          set:
            - match: \=
              scope: keyword.operator.assignment
              set: type

    - match: \bconst\b
      scope: storage.modifier keyword.declaration.var
      push: const_decl

    - match: \bvar\b
      scope: storage.modifier keyword.declaration.var
      push: var_decl

    - match: \bcase\b
      scope: keyword.declaration
      push: case_stmt

    - match: \b(else)\s*->
      captures:
        1: keyword.control.conditional

    - match: \b(if|else)\b
      scope: keyword.control.conditional

    - match: \b(comptime|do|while|for|in|defer|continue|break|discard|return|throw|yield)\b
      scope: keyword.control

    - match: \b(default|extern)\b
      scope: keyword.control

    - match: \{
      scope: punctuation.section.block.begin
      push: compound_stmt

    - match: ;
      scope: punctuation.terminator

    - include: expr_stmt

  decl:
    - match: '@\['
      push: annotation_decl

    - match: (template)\s*<
      captures:
        1: keyword.declaration
      push: template_parameter_decl

    - match: private
      scope: keyword.control

    - match: \b(func|operator)\b
      scope: keyword.declaration.function
      branch_point: function_decl
      branch:
        - function_reference
        - function_decl

    - match: \bnamespace\b
      scope: keyword.declaration.namespace
      push:
        - match: \w+
          scope: entity.name.namespace
          set:
            - match: \{
              scope: punctuation.section.block.begin
              set:
                - meta_scope: meta.namespace meta.block
                - match: \}
                  scope: punctuation.section.block.end
                  pop: true

                - include: stmt

    - match: \bstruct\b
      scope: keyword.declaration.type
      push:
        - match: \w+
          scope: entity.name.class
          set:
            - match: \{
              scope: punctuation.section.block.begin
              set:
                - meta_scope: meta.struct meta.block
                - match: \}
                  scope: punctuation.section.block.end
                  pop: true

                - include: stmt

    - match: \b(enum|variant)\b
      scope: keyword.declaration.type
      push:
        - match: \w+
          scope: entity.name.class
          set:
            - match: ':'
              push: type

            - match: \{
              scope: punctuation.section.block.begin
              set:
                - meta_scope: meta.enum meta.block
                - match: \}
                  scope: punctuation.section.block.end
                  pop: true

                - include: stmt

  annotation_decl:
    - meta_scope: meta.annotation

    - match: '\w+'
      scope: entity.name.constant
      set:
        - match: ':'
          push: operand

        - match: ','
          scope: punctuation.separator
          set: annotation_decl

        - match: '\]'
          pop: true

  template_parameter_decl:
    - match: '\w+'
      scope: variable.parameter.constant
      set:
        - match: ':'
          push: type

        - match: '='
          scope: keyword.operator.assignment
          push:
            - include: type
            - include: operand

        - match: ','
          scope: punctuation.separator
          set: template_parameter_decl

        - match: '>'
          pop: true

  compound_stmt:
    - meta_scope: meta.block
    - match: \}
      scope: punctuation.section.block.end
      pop: true

    - include: stmt

  function_reference:
    - match: \w+|<=>|(&&)|(\|\|)|(!=)|(((\+)|(\-)|(\*)|(\/)|(%)|(&)|(\|)|(^)|(<<)|(>>)|(\?\?)|(<)|(>)|(=))=?)|(\.\.)|\bas\b|\bis\b|\bunwrap\b|(~)|(!)|(\+\+)|(\-\-)
      scope: entity.name.function
      set:
        - match: \s*\(\s*\)\s*->
          fail: function_decl

        - match: \s*\(\s*\)
          pop: true

        - match: \s*\(
          set: [function_reference_type, type]

        - match: ''
          fail: function_decl

  function_reference_type:
    - match: '\s*,'
      scope: punctuation.separator
      push: type

    - match: \s*\)
      pop: true

    - match: ''
      fail: function_decl

  function_decl:
    - match: \w+|<=>|(&&)|(\|\|)|(!=)|(((\+)|(\-)|(\*)|(\/)|(%)|(&)|(\|)|(^)|(<<)|(>>)|(\?\?)|(<)|(>)|(=))=?)|(\.\.)|\bas\b|\bis\b|\bunwrap\b|(~)|(!)|(\+\+)|(\-\-)
      scope: entity.name.function
      set: function_signature

    - include: function_signature

  function_signature:
    - meta_scope: meta.function.parameters

    - match: \(\s*\)
      set:
        - match: ->
          set: [function_body, type]

    - match: \(
      set: [function_parameter_list, function_parameter_decl]

  function_parameter_list:
    - meta_scope: meta.function.parameters

    - match: ','
      scope: punctuation.separator
      push: function_parameter_decl

    - match: \)
      set:
        - meta_scope: meta.function.return-type
        - match: ->
          set: [function_body, type]

  function_parameter_decl:
    - match: '@\['
      push: annotation_decl

    - match: \w+
      scope: variable.parameter
      set: colon_type

  function_body:
    - meta_scope: meta.function

    - match: \{
      scope: punctuation.section.block.begin
      set:
      - meta_scope: meta.function meta.block

      - match: \}
        scope: punctuation.section.block.end
        pop: true

      - include: stmt

    - match: \=
      set:
        - match: default|extern
          scope: keyword.control
          pop: true

  colon_type:
    - match: ':'
      set: type

  expect_type:
    - match: ''
      push:
        - include: type

  type:
    - match: ([a-zA-Z_]\w*)!<
      captures:
        1: storage.type
      set: [template_parameter_list, template_parameter]

    - match: '([a-zA-Z_]\w*)(::)'
      captures:
        1: entity.name.namespace
        2: punctuation.accessor

    - match: '[a-zA-Z_]\w*'
      scope: storage.type
      pop: true

    - match: \[
      set:
        - match: ','
          scope: punctuation.separator
          set:
            - include: operand
            - match: \]
              pop: true

        - match: \]
          pop: true

        - include: expect_type

    - match: \{
      set:
        - match: ':'
          set:
            - include: expect_type
            - match: \}
              pop: true

        - match: \}
          pop: true

        - include: expect_type

    - match: \(
      set:
        - match: '\s*(\w+)\s*:'
          captures:
            1: variable.other.member
          push: type

        - match: ([a-zA-Z_]\w*)!<
          captures:
            1: storage.type
          push: [template_parameter_list, template_parameter]

        - match: '([a-zA-Z_]\w*)(::)'
          captures:
            1: entity.name.namespace
            2: punctuation.accessor

        - match: '[a-zA-Z_]\w*'
          scope: storage.type

        - match: \)\s*->
          set: type

        - match: \)
          pop: true

        - include: expr_stmt

  template_parameter_list:
    - match: ','
      scope: punctuation.separator
      push: template_parameter

    - match: \>
      pop: true

  template_parameter:
    - include: type
    - include: operand

  const_decl:
    - match: '(\w+)\s*:'
      captures:
        1: variable.other.constant
      set: type

    - match: \w+
      scope: variable.other.constant
      pop: true

  var_decl:
    - match: '(\w+)\s*:'
      captures:
        1: variable.other.readwrite
      set: type

    - match: \w+
      scope: variable.other.readwrite
      pop: true

  case_stmt:
    - match: '([a-zA-Z_]\w*)\s*:\s*(&?&?)(\w+)\s*->'
      captures:
        1: entity.name.constant
        2: keyword.operator
        3: variable.other.readwrite
      pop: true

    - match: '([a-zA-Z_]\w*)\s*:'
      captures:
        1: entity.name.constant
      set: type

    - match: '[a-zA-Z_]\w*'
      scope: entity.name.constant

    - match: \|

    - match: '->'
      pop: true

    - include: expr_stmt

    - match: ;
      scope: punctuation.terminator
      pop: true

  operand:
    - include: comments

    - match: \b(0b[01]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type
      pop: true

    - match: \b(0o[0-7]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type
      pop: true

    - match: \b(0x[0-9A-Fa-f]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type
      pop: true

    - match: \b([0-9]+\.[0-9]+(e[+-]?[0-9]+)?)(f[0-9]+)?
      captures:
        1: constant.numeric
        3: storage.type
      pop: true

    - match: \b([0-9]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type
      pop: true

    - match: \"
      scope: string.quoted.double punctuation.definition.string.begin
      push:
        - meta_scope: meta.string

        - match: \\.
          scope: constant.character.escape

        - match: (\")([a-z0-9]*)
          captures:
            1: string.quoted.double punctuation.definition.string.end
            2: storage.type
          pop: 2

        - match: .
          scope: string.quoted.double

    - match: \'
      scope: string.quoted.single punctuation.definition.string.begin
      push:
        - meta_scope: meta.string

        - match: \\.
          scope: constant.character.escape

        - match: (\')([a-z0-9]*)
          captures:
            1: string.quoted.single punctuation.definition.string.end
            2: storage.type
          pop: 2

        - match: .
          scope: string.quoted.single

    - match: '\b(true|false)\b'
      scope: constant.language
      pop: true

    - match: \bmatch\b
      scope: keyword.control
      set: match_expr

    - match: \(
      set: paren_expr

  expr:
    - match: \b([a-zA-Z_]\w*)\(
      captures:
        1: variable.function
      set: unnamed_tuple_expr

    - match: \b([a-zA-Z_]\w*)!<
      captures:
        1: variable.function
      push: [template_parameter_list, template_parameter]

    - match: '\b([a-zA-Z_]\w*)(::)'
      captures:
        1: entity.name.namespace
        2: punctuation.accessor

    - match: '\b([a-zA-Z_]\w*)\.'
      captures:
        1: variable.other.readwrite

    - include: operand

    - match: \b[a-zA-Z_]\w*\b
      scope: variable.other.readwrite
      pop: true

  expr_stmt:
    - include: comments

    - match: \b(0b[01]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type

    - match: \b(0o[0-7]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type

    - match: \b(0x[0-9A-Fa-f]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type

    - match: \b([0-9]+\.[0-9]+(e[+-]?[0-9]+)?)(f[0-9]+)?
      captures:
        1: constant.numeric
        3: storage.type

    - match: \b([0-9]+)([ui][0-9]*)?
      captures:
        1: constant.numeric
        2: storage.type

    - match: '\b(true|false)\b'
      scope: constant.language

    - match: \"
      scope: string.quoted.double punctuation.definition.string.begin
      push:
        - meta_scope: meta.string

        - match: \\.
          scope: constant.character.escape

        - match: (\")([a-z0-9]*)
          captures:
            1: string.quoted.double punctuation.definition.string.end
            2: storage.type
          pop: 1

        - match: .
          scope: string.quoted.double

    - match: \'
      scope: string.quoted.single punctuation.definition.string.begin
      push:
        - meta_scope: meta.string

        - match: \\.
          scope: constant.character.escape

        - match: (\')([a-z0-9]*)
          captures:
            1: string.quoted.single punctuation.definition.string.end
            2: storage.type
          pop: 1

        - match: .
          scope: string.quoted.single

    - match: \boperator\s+(<=>|(&&)|(\|\|)|(!=)|(((\+)|(\-)|(\*)|(\/)|(%)|(&)|(\|)|(^)|(<<)|(>>)|(\?\?)|(<)|(>)|(=))=?)|(\.\.)|\bas\b|\bis\b|\bunwrap\b|(~)|(!)|(\+\+)|(\-\-))
      scope: entity.name.function

    - match: \bmatch\b
      scope: keyword.control
      push: match_expr

    - match: \b(is|as)\b
      scope: keyword.operator.word
      push: type

    - match: \b(must|try)\b
      scope: keyword.operator.word

    - match: '([\+\-\*\/%&\|^:]|(<<)|(>>))='
      scope: keyword.operator.assignment

    - match: '<=>|([<|=|>]=?)|!='
      scope: keyword.operator.comparison

    - match: '[\+\-\*\/%]|(\+\+)|(\-\-)'
      scope: keyword.operator.arithmetic

    - match: '(&&)|(\|\|)|!'
      scope: keyword.operator.logical

    - match: '(<<)|(>>)|[&\|^~]'
      scope: keyword.operator.bitwise

    - match: \b([a-zA-Z_]\w*)\(
      captures:
        1: variable.function
      push: unnamed_tuple_expr

    - match: \b([a-zA-Z_]\w*)!<
      captures:
        1: variable.function
      push: [template_parameter_list, template_parameter]

    - match: '\b([a-zA-Z_]\w*)(::)'
      captures:
        1: entity.name.namespace
        2: punctuation.accessor

    - match: \b[a-zA-Z_]\w*\b
      scope: variable.other.readwrite

    - match: \.
      scope: punctuation.accessor

    - match: \(
      push: paren_expr

  match_expr:
    - include: expr_stmt

    - match: \{
      scope: punctuation.section.block.begin
      set: compound_stmt

  paren_expr:
    - match: ''
      pop: true
      branch_point: paren_expr
      branch:
        - unnamed_tuple_expr
        - named_tuple_expr

  unnamed_tuple_expr:
    - match: '\s*(\w+)(::)'
      captures:
        1: entity.name.namespace
        2: punctuation.accessor

    - match: '\s*\w+\s*:'
      fail: paren_expr

    - match: ','
      scope: punctuation.separator

    - match: \)
      pop: true

    - include: expr_stmt

  named_tuple_expr:
    - match: '\s*(\w+)(::)'
      captures:
        1: entity.name.namespace
        2: punctuation.accessor

    - match: '\s*(\w+)\s*:'
      captures:
        1: variable.other.member

    - match: ','
      scope: punctuation.separator

    - match: \)
      pop: true

    - include: expr_stmt

  comments:
    - match: /\*
      scope: comment.block
      push:
        - meta_scope: comment.block

        - match: \*/
          scope: comment.block
          pop: true

    - match: //
      scope: comment.line
      push:
        - meta_scope: comment.block

        - match: \n
          scope: comment.line
          pop: true
