//> output "Foo<T>::constructor()"
//> output "Foo<int>::constructor()"

import std/core;
import std/io;
import std/string;

template <T: type>
struct Foo {
    var value: T;

    func constructor(this: &&Foo!<T>, value: T) -> void {
        println("Foo<T>::constructor()");
        this.value := value;
    }

    func destructor(this: &&Foo!<T>) -> void {
        println("Foo<T>::destructor()");
    }
}

template <T: type = int>
struct Foo {
    var value: int;

    func constructor(this: &&Foo!<int>, value: int) -> void {
        println("Foo<int>::constructor()");
        this.value := value;
    }

    func destructor(this: &&Foo!<int>) -> void {
        println("Foo<int>::destructor()");
    }
}

func main() -> int {
    const a = Foo!<uint>(5u);
    const b = Foo!<int>(5);
    return 0;
}
