import std/core;

template <T: type>
struct Foo {
	var x: T;

	func constructor(this: &&Foo!<T>, val: T) -> void {
		comptime if referenceKindOf!<T>() == ReferenceKind::Var {
			this.x := &&val;
		} else if referenceKindOf!<T>() == ReferenceKind::Const {
			this.x := &val;
		} else {
			this.x := val;
		}
	}

	func constructor(this: &&Foo!<T>, other: Foo!<T>) -> void = default;
	func destructor(this: &&Foo!<T>) -> void = default;
}

func main() -> int {
	var a = 0;
	var b = Foo!<&&int>(&&a);
	return 0;
}
